USE [master]
GO
/****** Object:  UserDefinedFunction [dbo].[fnSplit]    Script Date: 5/17/2022 9:57:52 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[fnSplit] (
      @InputString                  NVARCHAR(MAX),
      @Delimiter                    NVARCHAR(50)
)

RETURNS @Items TABLE (
      Item                          NVARCHAR(MAX)
)

AS
BEGIN
      IF @Delimiter = ' '
      BEGIN
            SET @Delimiter = ','
            SET @InputString = REPLACE(@InputString, ' ', @Delimiter)
      END

      IF (@Delimiter IS NULL OR @Delimiter = '')
            SET @Delimiter = ','

--INSERT INTO @Items VALUES (@Delimiter) -- Diagnostic
--INSERT INTO @Items VALUES (@InputString) -- Diagnostic

      DECLARE @Item                 VARCHAR(8000)
      DECLARE @ItemList       VARCHAR(8000)
      DECLARE @DelimIndex     INT

      SET @ItemList = @InputString
      SET @DelimIndex = CHARINDEX(@Delimiter, @ItemList, 0)
      WHILE (@DelimIndex != 0)
      BEGIN
            SET @Item = SUBSTRING(@ItemList, 0, @DelimIndex)
            INSERT INTO @Items VALUES (@Item)

            -- Set @ItemList = @ItemList minus one less item
            SET @ItemList = SUBSTRING(@ItemList, @DelimIndex+1, LEN(@ItemList)-@DelimIndex)
            SET @DelimIndex = CHARINDEX(@Delimiter, @ItemList, 0)
      END -- End WHILE

      IF @Item IS NOT NULL -- At least one delimiter was encountered in @InputString
      BEGIN
            SET @Item = @ItemList
            INSERT INTO @Items VALUES (@Item)
      END

      -- No delimiters were encountered in @InputString, so just return @InputString
      ELSE INSERT INTO @Items VALUES (@InputString)

      RETURN

END -- End Function
GO
/****** Object:  View [dbo].[vwJobScheduleDetail]    Script Date: 5/17/2022 9:57:52 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



  CREATE VIEW [dbo].[vwJobScheduleDetail]
  AS
  SELECT 
       S.name AS JobName,
       SS.name AS ScheduleName,                    
       CASE(SS.freq_type)
            WHEN 1  THEN 'Once'
            WHEN 4  THEN 'Daily'
            WHEN 8  THEN (case when (SS.freq_recurrence_factor > 1) then  'Every ' + convert(varchar(3),SS.freq_recurrence_factor) + ' Weeks'  else 'Weekly'  end)
            WHEN 16 THEN (case when (SS.freq_recurrence_factor > 1) then  'Every ' + convert(varchar(3),SS.freq_recurrence_factor) + ' Months' else 'Monthly' end)
            WHEN 32 THEN 'Every ' + convert(varchar(3),SS.freq_recurrence_factor) + ' Months' -- RELATIVE
            WHEN 64 THEN 'SQL Startup'
            WHEN 128 THEN 'SQL Idle'
            ELSE '??'
        END AS Frequency,  
       CASE
            WHEN (freq_type = 1)                       then 'One time only'
            WHEN (freq_type = 4 and freq_interval = 1) then 'Every Day'
            WHEN (freq_type = 4 and freq_interval > 1) then 'Every ' + convert(varchar(10),freq_interval) + ' Days'
            WHEN (freq_type = 8) then (select 'Weekly Schedule' = MIN(D1+ D2+D3+D4+D5+D6+D7 )
                                        from (select SS.schedule_id,
                                                        freq_interval, 
                                                        'D1' = CASE WHEN (freq_interval & 1  <> 0) then 'Sun ' ELSE '' END,
                                                        'D2' = CASE WHEN (freq_interval & 2  <> 0) then 'Mon '  ELSE '' END,
                                                        'D3' = CASE WHEN (freq_interval & 4  <> 0) then 'Tue '  ELSE '' END,
                                                        'D4' = CASE WHEN (freq_interval & 8  <> 0) then 'Wed '  ELSE '' END,
                                                    'D5' = CASE WHEN (freq_interval & 16 <> 0) then 'Thu '  ELSE '' END,
                                                        'D6' = CASE WHEN (freq_interval & 32 <> 0) then 'Fri '  ELSE '' END,
                                                        'D7' = CASE WHEN (freq_interval & 64 <> 0) then 'Sat '  ELSE '' END
                                                    from msdb..sysschedules ss
                                                where freq_type = 8
                                            ) as F
                                        where schedule_id = SJ.schedule_id
                                    )
            WHEN (freq_type = 16) then 'Day ' + convert(varchar(2),freq_interval) 
            WHEN (freq_type = 32) then (select  freq_rel + WDAY 
                                        from (select SS.schedule_id,
                                                        'freq_rel' = CASE(freq_relative_interval)
                                                                    WHEN 1 then 'First'
                                                                    WHEN 2 then 'Second'
                                                                    WHEN 4 then 'Third'
                                                                    WHEN 8 then 'Fourth'
                                                                    WHEN 16 then 'Last'
                                                                    ELSE '??'
                                                                    END,
                                                    'WDAY'     = CASE (freq_interval)
                                                                    WHEN 1 then ' Sun'
                                                                    WHEN 2 then ' Mon'
                                                                    WHEN 3 then ' Tue'
                                                                    WHEN 4 then ' Wed'
                                                                    WHEN 5 then ' Thu'
                                                                    WHEN 6 then ' Fri'
                                                                    WHEN 7 then ' Sat'
                                                                    WHEN 8 then ' Day'
                                                                    WHEN 9 then ' Weekday'
                                                                    WHEN 10 then ' Weekend'
                                                                    ELSE '??'
                                                                    END
                                                from msdb..sysschedules SS
                                                where SS.freq_type = 32
                                                ) as WS 
                                        where WS.schedule_id = SS.schedule_id
                                        ) 
        END AS Interval,
        CASE (freq_subday_type)
            WHEN 1 then   left(stuff((stuff((replicate('0', 6 - len(active_start_time)))+ convert(varchar(6),active_start_time),3,0,':')),6,0,':'),8)
            WHEN 2 then 'Every ' + convert(varchar(10),freq_subday_interval) + ' seconds'
            WHEN 4 then 'Every ' + convert(varchar(10),freq_subday_interval) + ' minutes'
            WHEN 8 then 'Every ' + convert(varchar(10),freq_subday_interval) + ' hours'
            ELSE '??'
        END AS [Time],
        CASE SJ.next_run_date
            WHEN 0 THEN cast('n/a' as char(10))
            ELSE convert(char(10), convert(datetime, convert(char(8),SJ.next_run_date)),120)  + ' ' + left(stuff((stuff((replicate('0', 6 - len(next_run_time)))+ convert(varchar(6),next_run_time),3,0,':')),6,0,':'),8)
        END AS NextRunTime
		,SS.enabled
from msdb.dbo.sysjobs S
left join msdb.dbo.sysjobschedules SJ on S.job_id = SJ.job_id  
left join msdb.dbo.sysschedules SS on SS.schedule_id = SJ.schedule_id
 
GO
/****** Object:  View [dbo].[vwJobTodayExecutionTime]    Script Date: 5/17/2022 9:57:52 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

 

		CREATE VIEW [dbo].[vwJobTodayExecutionTime]
		AS
		SELECT jmn_Code,ma.jmn_JobName,jmn_Est_Imp_Minute,
			t.c.value('(Freq/text())[1]', 'NVARCHAR(100)') Freq ,
			t.c.value('(Day_value/text())[1]', 'NVARCHAR(100)') Day_value,
			t.c.value('(Time_value/text())[1]', 'NVARCHAR(100)') Time_value 
			FROM mstJobMonitoring ma
			CROSS APPLY ma.jmn_FileExecDate.nodes('XML') m(c)
		CROSS APPLY m.c.nodes('DATEITEM') t(c) 
		WHERE t.c.value('(Freq/text())[1]', 'NVARCHAR(100)') = 'DAILY'
		UNION ALL
		SELECT jmn_Code,ma.jmn_JobName,jmn_Est_Imp_Minute,
			t.c.value('(Freq/text())[1]', 'NVARCHAR(100)') Freq ,
			t.c.value('(Day_value/text())[1]', 'NVARCHAR(100)') Day_value,
			t.c.value('(Time_value/text())[1]', 'NVARCHAR(100)') Time_value 
			FROM mstJobMonitoring ma
			CROSS APPLY ma.jmn_FileExecDate.nodes('XML') m(c)
		CROSS APPLY m.c.nodes('DATEITEM') t(c) 
		WHERE t.c.value('(Freq/text())[1]', 'NVARCHAR(100)') = 'WEEKLY' AND t.c.value('(Day_value/text())[1]', 'NVARCHAR(100)') = DATEPART(WEEKDAY,GETDATE())
		UNION ALL
		SELECT jmn_Code,ma.jmn_JobName,jmn_Est_Imp_Minute,
			t.c.value('(Freq/text())[1]', 'NVARCHAR(100)') Freq ,
			t.c.value('(Day_value/text())[1]', 'NVARCHAR(100)') Day_value,
			t.c.value('(Time_value/text())[1]', 'NVARCHAR(100)') Time_value 
			FROM mstJobMonitoring ma
			CROSS APPLY ma.jmn_FileExecDate.nodes('XML') m(c)
		CROSS APPLY m.c.nodes('DATEITEM') t(c) 
		WHERE t.c.value('(Freq/text())[1]', 'NVARCHAR(100)') = 'MONTHLY' AND t.c.value('(Day_value/text())[1]', 'NVARCHAR(100)') = DATEPART(DAY,GETDATE())

GO
/****** Object:  StoredProcedure [dbo].[sp_BULK_INSERT_SCRIPT]    Script Date: 5/17/2022 9:57:52 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_BULK_INSERT_SCRIPT]
AS
BEGIN

	SET QUOTED_IDENTIFIER ON
    truncate table stock_info_temp

    BULK INSERT stock_info_temp
    FROM 'C:\UTBATCH\DSB\EG_STOCK_INFO.TXT'  
	WITH (  
    DATAFILETYPE = 'char',  
    FIELDTERMINATOR = ',',  
    ROWTERMINATOR = '0x0A',
	CODEPAGE='65001' 
    );  

	DELETE FROM stock_info_temp WHERE LEFT(rData,1) IN ('H','T')

	SELECT SUBSTRING(rData,2,20) AS stockcode,
	SUBSTRING(rData,61,100) AS englishname  ,
	SUBSTRING(rData,220,28) AS lotsize  ,
	SUBSTRING(rData,281,6) AS market,
	SUBSTRING(rData,290,100) AS chinesename
	FROM stock_info_temp


END
GO
/****** Object:  StoredProcedure [dbo].[sp_CheckStatus]    Script Date: 5/17/2022 9:57:52 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_CheckStatus]
AS
BEGIN
	SELECT TOP 30 last_user_update,c2.name,c3.name, *
	FROM HITRUST.sys.dm_db_index_usage_stats c1 
	INNER JOIN  HITRUST.sys.databases c2 ON c1.database_id = c2.database_id 
	INNER JOIN HITRUST.sys.tables c3 ON c1.object_id = c3.object_id
	WHERE c2.name = 'HITRUST'
	ORDER BY c1.last_user_update DESC

	SELECT TOP 30 last_user_update,c2.name,c3.name, *
	FROM BPSS.sys.dm_db_index_usage_stats c1 
	INNER JOIN  BPSS.sys.databases c2 ON c1.database_id = c2.database_id 
	INNER JOIN BPSS.sys.tables c3 ON c1.object_id = c3.object_id
	WHERE c2.name = 'BPSS'
	ORDER BY c1.last_user_update DESC

	SELECT TOP 30 last_user_update,c2.name,c3.name, *
	FROM DSBDB.sys.dm_db_index_usage_stats c1 
	INNER JOIN  DSBDB.sys.databases c2 ON c1.database_id = c2.database_id 
	INNER JOIN DSBDB.sys.tables c3 ON c1.object_id = c3.object_id
	WHERE c2.name = 'DSBDB'
	ORDER BY c1.last_user_update DESC


	SELECT type FROM DSBDB.sys.objects GROUP BY type 

	SELECT name, create_date, modify_date FROM DSBDB.sys.objects WHERE type = 'P' ORDER BY modify_date DESC
	SELECT name, create_date, modify_date FROM DSBDB.sys.objects WHERE type = 'V' ORDER BY modify_date DESC
	SELECT name, create_date, modify_date FROM DSBDB.sys.objects WHERE type = 'U' ORDER BY modify_date DESC


	SELECT name, create_date, modify_date FROM BPSS.sys.objects WHERE type = 'P' ORDER BY modify_date DESC
	SELECT name, create_date, modify_date FROM BPSS.sys.objects WHERE type = 'V' ORDER BY modify_date DESC
	SELECT name, create_date, modify_date FROM BPSS.sys.objects WHERE type = 'U' ORDER BY modify_date DESC
 
	SELECT name, [modify_date] FROM DSBDB.sys.tables ORDER BY modify_date DESC
	SELECT name, [modify_date] FROM BPSS.sys.tables	 ORDER BY modify_date DESC
	SELECT name, [modify_date] FROM HITRUST.sys.tables	 ORDER BY modify_date DESC
END

GO
/****** Object:  StoredProcedure [dbo].[sp_column_script_generator]    Script Date: 5/17/2022 9:57:52 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
CREATE PROCEDURE [dbo].[sp_column_script_generator]
(
@pXML XML,
@pOutXML XML OUTPUT
)
AS
BEGIN
/*
------------------------------------------------------------------------
--GET COMPARE DETAIL WITH LINK SERVER
DECLARE @pRtnXML XML
EXEC master.dbo.[sp_column_script_generator]'
<ROOT>
		<TYPE>GEN_TABLE_COLUMN</TYPE>
		<SOURCE_DB>DSBDB</SOURCE_DB>		
		<SOURCE_TABLE>TB_UT2CIF</SOURCE_TABLE>
</ROOT>',@pRtnXML OUTPUT
SELECT @pRtnXML

DECLARE @pRtnXML XML
EXEC master.dbo.sp_column_script_generator '
<ROOT>
		<TYPE>GEN_TABLE_COLUMN_COMPARE</TYPE>
		<SOURCE_DB>DSBDB</SOURCE_DB>
		<TARGET_DB>DSBDB</TARGET_DB>
		<SOURCE_TABLE>TB_UT2CIF_TEMP</SOURCE_TABLE>
		<TARGET_TABLE>TB_UT2CIF_TEMP_NEW</TARGET_TABLE>
		<KEYVALUE>ACCOUNT,FUNDCODE</KEYVALUE> 
</ROOT>',@pRtnXML OUTPUT
SELECT @pRtnXML

------------------------------------------------------------------------
*/
	DECLARE @tbl_SCRIPT TABLE
	(
		rData NVARCHAR(MAX)
	)
	DECLARE @TYPE NVARCHAR(100)
	DECLARE @sSOURCE_DB NVARCHAR(100)
	DECLARE @sTARGET_DB NVARCHAR(100)
	DECLARE @sSOURCE_TABLE NVARCHAR(100)
	DECLARE @sTARGET_TABLE NVARCHAR(100)
	DECLARE @sKEYVALUE NVARCHAR(100)
	DECLARE @sSCRIPT NVARCHAR(MAX)
	DECLARE @sColumn NVARCHAR(MAX)
	DECLARE @sFilter NVARCHAR(MAX)
	DECLARE @sEXCLUDE_COLUMN NVARCHAR(MAX)
	DECLARE @sORDER_COLUMN NVARCHAR(MAX)
	DECLARE @sREPLACE_SPACE_COLUMN NVARCHAR(MAX)

	SELECT 
		@TYPE			= T.C.value('TYPE[1]', 'NVARCHAR(100)'),
		@sSOURCE_DB		= T.C.value('SOURCE_DB[1]', 'NVARCHAR(100)'),
		@sTARGET_DB		= T.C.value('TARGET_DB[1]', 'NVARCHAR(100)'),
		@sSOURCE_TABLE	= T.C.value('SOURCE_TABLE[1]', 'NVARCHAR(100)'),
		@sTARGET_TABLE	= T.C.value('TARGET_TABLE[1]', 'NVARCHAR(100)'),
		@sEXCLUDE_COLUMN= T.C.value('EXCLUDE_COLUMN[1]', 'NVARCHAR(300)'),
		@sORDER_COLUMN	= T.C.value('ORDER_COLUMN[1]', 'NVARCHAR(300)'),
		@sKEYVALUE		= T.C.value('KEYVALUE[1]', 'NVARCHAR(300)'),
		@sREPLACE_SPACE_COLUMN  = T.C.value('REPLACE_SPACE_COLUMN[1]', 'NVARCHAR(300)')
		FROM @pXML.nodes('/ROOT') T(C)

	IF (@sORDER_COLUMN IS NULL)
	BEGIN
		SET @sORDER_COLUMN = '1'
	END

	IF (@TYPE = 'GEN_TABLE_COLUMN')
	BEGIN
		SET @sSCRIPT = '
		DECLARE @strRtn NVARCHAR(MAX)
		DECLARE @sFilter NVARCHAR(MAX)
			
		SET @sFilter = ''msrepl_tran_version,'' + ''' + ISNULL(@sEXCLUDE_COLUMN,'') + '''
		SET @strRtn =(SELECT COLUMN_NAME  + '',''
				FROM '+ @sSOURCE_DB +'.INFORMATION_SCHEMA.COLUMNS
				WHERE TABLE_NAME='''+ @sSOURCE_TABLE + '''
				AND COLUMN_NAME NOT IN (SELECT Item FROM dbo.fnSplit(@sFilter,'',''))
				 FOR XML PATH(''''))
		SET @strRtn = SUBSTRING(@strRtn,1,LEN(@strRtn)-1)
		
		SELECT @strRtn
		'
		PRINT @sSCRIPT

		 INSERT INTO @tbl_SCRIPT	
		 EXEC sp_executesql @sSCRIPT
		 SET @sColumn = (SELECT TOP 1 rData FROM @tbl_SCRIPT)
		 DELETE FROM @tbl_SCRIPT
		SELECT @sColumn
	END
	IF (@TYPE  = 'GEN_TABLE_COLUMN_COMPARE')
	BEGIN
		SET @sSCRIPT = '
		DECLARE @strRtn NVARCHAR(MAX)
		DECLARE @sFilter NVARCHAR(MAX)
			
		SET @sFilter = ''msrepl_tran_version,'' + ''' + ISNULL(@sEXCLUDE_COLUMN,'') + '''
		SET @strRtn =(SELECT  ''ISNULL(c1.'' +  COLUMN_NAME  + '',0) != ISNULL(c2.'' +  COLUMN_NAME  + '',0) OR ''
				FROM '+ @sSOURCE_DB +'.INFORMATION_SCHEMA.COLUMNS
				WHERE TABLE_NAME='''+ @sSOURCE_TABLE + '''
				AND COLUMN_NAME NOT IN (SELECT Item FROM dbo.fnSplit(@sFilter,'',''))
				 FOR XML PATH(''''))
		SET @strRtn = SUBSTRING(@strRtn,1,LEN(@strRtn)-2)
		
		SELECT @strRtn
		'
		PRINT @sSCRIPT

		 INSERT INTO @tbl_SCRIPT	
		 EXEC sp_executesql @sSCRIPT
		 SET @sColumn = (SELECT TOP 1 rData FROM @tbl_SCRIPT)
	 
		 SELECT 'SELECT * FROM ' + @sSOURCE_TABLE +' c1 INNER JOIN ' + @sTARGET_TABLE + ' c2 ON c1.'+ @sKEYVALUE +' = c2.' + @sKEYVALUE + ' WHERE ' + @sColumn  AS rScript FOR XML PATH ('XML')

	END
END

 
GO
/****** Object:  StoredProcedure [dbo].[sp_COMPARE_CF_Z_UT_CRED]    Script Date: 5/17/2022 9:57:52 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	CREATE PROCEDURE [dbo].[sp_COMPARE_CF_Z_UT_CRED]
	(@sBatchDate NVARCHAR(8))
	AS
	/*
	EXEC MASTER..[sp_COMPARE_CF_Z_UT_CRED] '20220307'
	EXEC MASTER..[sp_COMPARE_CF_Z_UT_CRED] '20220308'
	EXEC MASTER..[sp_COMPARE_CF_Z_UT_CRED] '20220309'
	EXEC MASTER..[sp_COMPARE_CF_Z_UT_CRED] '20220310'
	EXEC MASTER..[sp_COMPARE_CF_Z_UT_CRED] '20220311'
	EXEC MASTER..[sp_COMPARE_CF_Z_UT_CRED] '20220312' 
	EXEC MASTER..[sp_COMPARE_CF_Z_UT_CRED] '20220314'
	EXEC MASTER..[sp_COMPARE_CF_Z_UT_CRED] '20220315'
	EXEC MASTER..[sp_COMPARE_CF_Z_UT_CRED] '20220317'
	EXEC MASTER..[sp_COMPARE_CF_Z_UT_CRED] '20220318'
	EXEC MASTER..[sp_COMPARE_CF_Z_UT_CRED] '20220319'

	EXEC MASTER..[sp_COMPARE_CF_Z_UT_CRED] '20220120'
	EXEC MASTER..[sp_COMPARE_CF_Z_UT_CRED] '20220121'
	EXEC MASTER..[sp_COMPARE_CF_Z_UT_CRED] '20220122'
	
	EXEC MASTER..[sp_COMPARE_CF_Z_UT_CRED] '20220124'
	EXEC MASTER..[sp_COMPARE_CF_Z_UT_CRED] '20220125'
	EXEC MASTER..[sp_COMPARE_CF_Z_UT_CRED] '20220126'
	EXEC MASTER..[sp_COMPARE_CF_Z_UT_CRED] '20220127'
	*/
	BEGIN
		DECLARE @sScript NVARCHAR(MAX)
		--CREATE TABLE TMP_DATA
		--(
		--	rData NVARCHAR(MAX)
		--)

		IF OBJECT_ID('tempdb..##tmp1') IS NOT NULL DROP TABLE ##tmp1
		IF OBJECT_ID('tempdb..##tmp2') IS NOT NULL DROP TABLE ##tmp2

		SET @sScript = '

		SET QUOTED_IDENTIFIER ON
		truncate table  master..TMP_DATA
  

		BULK INSERT master..TMP_DATA
		FROM ''\\uatvutdb02\migration\20220321\CIF\CF_Z_UT_CRED_'+ @sBatchDate +'.txt''
		WITH (  
		FIRSTROW = 2,
		DATAFILETYPE = ''char'',  
		FIELDTERMINATOR = '','',  
		ROWTERMINATOR = ''0x0A'',
		CODEPAGE=''65001''
		);  
		 
		SELECT ROW_NUMBER() OVER(ORDER BY rData ASC) AS RowID,* INTO ##tmp1 FROM master..TMP_DATA
		 
		SET QUOTED_IDENTIFIER ON
		truncate table  master..TMP_DATA
  
		BULK INSERT master..TMP_DATA
		FROM ''\\uatvutdb02\migration\20220321\IBS\CF_Z_UT_CRED_'+ @sBatchDate +'.txt''
		WITH (  
		FIRSTROW = 2,
		DATAFILETYPE = ''char'',  
		FIELDTERMINATOR = '','',  
		ROWTERMINATOR = ''0x0A'',
		CODEPAGE=''65001''
		);  
	
		SELECT ROW_NUMBER() OVER(ORDER BY rData ASC) AS RowID,* INTO ##tmp2 FROM master..TMP_DATA

		' 
		EXEC sp_executesql @sScript
		 

		IF OBJECT_ID('tempdb..#TMP1_RESULT') IS NOT NULL DROP TABLE #TMP1_RESULT
		SELECT 
			RTRIM(Substring(rData,2, 20)) AS CustomerID,
			RTRIM(Substring(rData,22, 50))  AS Name, 
			Substring(rData,352, 8) AS Relationship_ED,
			Substring(rData,360, 8) AS Retention_ED,
			Substring(rData,368, 8) AS Reactivation_ED 
			INTO #TMP1_RESULT
			FROM ##tmp1 WHERE LEFT(rData,1) = '6'

		IF OBJECT_ID('tempdb..#TMP2_RESULT') IS NOT NULL DROP TABLE #TMP2_RESULT
        SELECT RTRIM(RTRIM(Substring(rData,2, 5)) + RTRIM(Substring(rData,7, 30))) AS CustomerID,
            RTRIM(Substring(rData,37, 50)) AS Name,
            Substring(rData,87, 8) AS Relationship_ED,
            Substring(rData,95, 8) AS Retention_ED ,
            Substring(rData,103, 8) AS Reactivation_ED 
			INTO #TMP2_RESULT
			FROM ##tmp2 WHERE LEFT(rData,1) = '1'
 
		IF OBJECT_ID('tempdb..##TMP_RESULT') IS NOT NULL DROP TABLE ##TMP_RESULT

		SELECT RESULT.* INTO ##TMP_RESULT FROM (
		SELECT @sBatchDate AS FileDate,
			#TMP1_RESULT.CustomerID,  
			#TMP1_RESULT.Name,
			#TMP1_RESULT.Reactivation_ED,
			#TMP1_RESULT.Relationship_ED,
			#TMP1_RESULT.Retention_ED,

			#TMP2_RESULT.CustomerID AS NEW_CustomerID,  
			#TMP2_RESULT.Name AS NEW_Name,
			#TMP2_RESULT.Reactivation_ED AS NEW_Reactivation_ED,
			#TMP2_RESULT.Relationship_ED AS NEW_Relationship_ED,
			#TMP2_RESULT.Retention_ED AS NEW_Retention_ED
			FROM 
		#TMP1_RESULT INNER JOIN 
		#TMP2_RESULT ON #TMP1_RESULT.CustomerID = #TMP2_RESULT.CustomerID
		WHERE 
			(#TMP1_RESULT.Name != #TMP2_RESULT.Name OR #TMP1_RESULT.Reactivation_ED != #TMP2_RESULT.Reactivation_ED OR #TMP1_RESULT.Relationship_ED != #TMP2_RESULT.Relationship_ED OR #TMP1_RESULT.Retention_ED != #TMP2_RESULT.Retention_ED)
			--(  #TMP1_RESULT.Reactivation_ED != #TMP2_RESULT.Reactivation_ED OR #TMP1_RESULT.Relationship_ED != #TMP2_RESULT.Relationship_ED OR #TMP1_RESULT.Retention_ED != #TMP2_RESULT.Retention_ED)
		--UNION ALL
		--SELECT 'NOT INSIDE OLD FILE' AS DESCRIPTION,* FROM #TMP1_RESULT 
		--WHERE #TMP1_RESULT.CustomerID NOT IN (SELECT #TMP2_RESULT.CustomerID FROM #TMP2_RESULT)
		--UNION ALL
		--SELECT 'NOT INSIDE NEW FILE' AS DESCRIPTION,* FROM #TMP2_RESULT 
		--WHERE #TMP2_RESULT.CustomerID NOT IN (SELECT #TMP1_RESULT.CustomerID FROM #TMP1_RESULT)
		) RESULT



	 EXEC master.dbo.xp_cmdshell 'bcp "SELECT * FROM ##TMP_RESULT" queryout "D:\migration\20220321\Diff\TEMP.txt" -T -w -t, -S'
	 
	 DECLARE @sDate NVARCHAR(8)
	 SET @sDate = @sBatchDate
	  
	 DECLARE @command VARCHAR(4000)
 	 SET @command = 'powershell -Command "Get-Content D:\migration\20220321\Diff\TEMP.txt -Encoding Unicode | Set-Content -Encoding UTF8 D:\migration\20220321\Diff\'+ @sDate +'_DIFF.txt"';
	 EXEC xp_cmdshell @command;

	END
	
GO
/****** Object:  StoredProcedure [dbo].[sp_COMPARE_HT2EBFUND]    Script Date: 5/17/2022 9:57:52 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	CREATE PROCEDURE [dbo].[sp_COMPARE_HT2EBFUND]
	AS
	BEGIN
		--CREATE TABLE TMP_DATA
		--(
		--	rData NVARCHAR(MAX)
		--)
		IF OBJECT_ID('tempdb..#tmp1') IS NOT NULL DROP TABLE #tmp1
		IF OBJECT_ID('tempdb..#tmp2') IS NOT NULL DROP TABLE #tmp2

		SET QUOTED_IDENTIFIER ON
		truncate table  master..TMP_DATA
  

		BULK INSERT master..TMP_DATA
		FROM '\\uatvutdb02\migration\20210525\Compare\new\HT2EBFUND.txt'
		WITH (  
		FIRSTROW = 2,
		DATAFILETYPE = 'char',  
		FIELDTERMINATOR = ',',  
		ROWTERMINATOR = '0x0A',
		CODEPAGE='65001'
		);  
		 
		SELECT ROW_NUMBER() OVER(ORDER BY rData ASC) AS RowID,* INTO #tmp1 FROM master..TMP_DATA
		 
		SET QUOTED_IDENTIFIER ON
		truncate table  master..TMP_DATA
  
		BULK INSERT master..TMP_DATA
		FROM '\\uatvutdb02\migration\20210525\Compare\old2\HT2EBFUND.txt'
		WITH (  
		FIRSTROW = 2,
		DATAFILETYPE = 'char',  
		FIELDTERMINATOR = ',',  
		ROWTERMINATOR = '0x0A',
		CODEPAGE='65001'
		);  
	
		SELECT ROW_NUMBER() OVER(ORDER BY rData ASC) AS RowID,* INTO #tmp2 FROM master..TMP_DATA

		 SELECT * FROM #tmp1 c1 INNER JOIN #tmp2 c2 ON c1.RowID = c2.RowID
		 WHERE c1.rData != c2.rData

		 SELECT * FROM #tmp1 c1 INNER JOIN #tmp2 c2 ON c1.RowID = c2.RowID
		 WHERE c1.rData = c2.rData

		 SELECT 
			(SELECT COUNT(*) FROM #tmp1) AS rCount1,
			(SELECT COUNT(*) FROM #tmp2) AS rCount2
	END
	
GO
/****** Object:  StoredProcedure [dbo].[sp_COMPARE_UT2CIF]    Script Date: 5/17/2022 9:57:52 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	CREATE PROCEDURE [dbo].[sp_COMPARE_UT2CIF]
	AS
	BEGIN
		--CREATE TABLE TMP_DATA
		--(
		--	rData NVARCHAR(MAX)
		--)
		IF OBJECT_ID('tempdb..#tmp1') IS NOT NULL DROP TABLE #tmp1
		IF OBJECT_ID('tempdb..#tmp2') IS NOT NULL DROP TABLE #tmp2

		SET QUOTED_IDENTIFIER ON
		truncate table  master..TMP_DATA
  

		BULK INSERT master..TMP_DATA
		FROM '\\uatvutdb02\migration\20210525\Compare\new\UT2CIF_NEW.E25'
		WITH (  
		FIRSTROW = 2,
		DATAFILETYPE = 'char',  
		FIELDTERMINATOR = ',',  
		ROWTERMINATOR = '0x0A',
		CODEPAGE='65001'
		);  
		 
		SELECT ROW_NUMBER() OVER(ORDER BY rData ASC) AS RowID,* INTO #tmp1 FROM master..TMP_DATA
		 
		SET QUOTED_IDENTIFIER ON
		truncate table  master..TMP_DATA
  
		BULK INSERT master..TMP_DATA
		FROM '\\uatvutdb02\migration\20210525\Compare\old2\UT2CIF.E25'
		WITH (  
		FIRSTROW = 2,
		DATAFILETYPE = 'char',  
		FIELDTERMINATOR = ',',  
		ROWTERMINATOR = '0x0A',
		CODEPAGE='65001'
		);  
	
		SELECT ROW_NUMBER() OVER(ORDER BY rData ASC) AS RowID,* INTO #tmp2 FROM master..TMP_DATA

		 SELECT * FROM #tmp1 c1 INNER JOIN #tmp2 c2 ON c1.RowID = c2.RowID
		 WHERE c1.rData != c2.rData

		 SELECT * FROM #tmp1 c1 INNER JOIN #tmp2 c2 ON c1.RowID = c2.RowID
		 WHERE c1.rData = c2.rData

		 SELECT 
			(SELECT COUNT(*) FROM #tmp1) AS rCount1,
			(SELECT COUNT(*) FROM #tmp2) AS rCount2
	END
	
GO
/****** Object:  StoredProcedure [dbo].[sp_COMPARE_UT2CIF_CBP2_OLD_DATA]    Script Date: 5/17/2022 9:57:52 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 CREATE  PROCEDURE [dbo].[sp_COMPARE_UT2CIF_CBP2_OLD_DATA]
 AS
 BEGIN
		-- Record Count 
		SELECT
			(SELECT COUNT(*) FROM DSBDB..TB_UT2CIF_TEMP) AS OLD_TB_UT2CIF_TEMP_COUNT,
			(SELECT COUNT(*) FROM DSBDB..TB_UT2CIF_TEMP_CBP2) AS NEW_TB_UT2CIF_TEMP_COUNT,
			(SELECT COUNT(*) FROM DSBDB..DSBCIFTB) AS OLD_DSBCIFTB_COUNT,
			(SELECT COUNT(*) FROM DSBDB..DSBCIFTB_CBP2) AS NEW_DSBCIFTB_NEW_COUNT,
			(SELECT COUNT(*) FROM DSBDB..TB_UT2CIF_CHKCLOSE) AS OLD_TB_UT2CIF_CHKCLOSE_COUNT,
			(SELECT COUNT(*) FROM DSBDB..TB_UT2CIF_CHKCLOSE_CBP2) AS NEW_TB_UT2CIF_CHKCLOSE_NEW_COUNT,
			(SELECT COUNT(*) FROM DSBDB..TB_UT2CIF_CUSTID) AS OLD_TB_UT2CIF_CUSTID_COUNT,
			(SELECT COUNT(*) FROM DSBDB..TB_UT2CIF_CUSTID_CBP2) AS NEW_TB_UT2CIF_CUSTID_NEW_COUNT,
			(SELECT COUNT(*) FROM DSBDB..TB_UT2CIF) AS OLD_TB_UT2CIF_COUNT,
			(SELECT COUNT(*) FROM DSBDB..TB_UT2CIF_CBP2) AS NEW_TB_UT2CIF_NEW_COUNT,
			(SELECT COUNT(*) FROM DSBDB..TB_UT2CIF_SETTLEAC) AS OLD_TB_UT2CIF_SETTLEAC_COUNT,
			(SELECT COUNT(*) FROM DSBDB..TB_UT2CIF_SETTLEAC_CBP2) AS NEW_TB_UT2CIF_SETTLEAC_NEW_COUNT
		-- Raw Data Compare
			SELECT * FROM DSBDB..TB_UT2CIF_TEMP c1 INNER JOIN DSBDB..TB_UT2CIF_TEMP_CBP2 c2 
			ON c1.ACCOUNT = c2.ACCOUNT AND c1.FUNDCODE = c2.FUNDCODE WHERE 
				ISNULL(c1.BANKID,0) != ISNULL(c2.BANKID,0) OR 
				ISNULL(c1.FUNDNAME,0) != ISNULL(c2.FUNDNAME,0) OR 
				ISNULL(c1.FUNDCCY,0) != ISNULL(c2.FUNDCCY,0) OR 
				ISNULL(c1.PRICE,0) != ISNULL(c2.PRICE,0) OR 
				ISNULL(c1.PROCESSINGDATE,0) != ISNULL(c2.PROCESSINGDATE,0) OR 
				ISNULL(c1.UNITS,0) != ISNULL(c2.UNITS,0) OR 
				ISNULL(c1.MARKETVALUE,0) != ISNULL(c2.MARKETVALUE,0) OR 
				ISNULL(c1.PSUBUNIT,0) != ISNULL(c2.PSUBUNIT,0) OR 
				ISNULL(c1.PREDUNIT,0) != ISNULL(c2.PREDUNIT,0) OR 
				ISNULL(c1.LUMPIND,0) != ISNULL(c2.LUMPIND,0) OR 
				ISNULL(c1.RSPCOUNT,0) != ISNULL(c2.RSPCOUNT,0) OR 
				ISNULL(c1.RSPAMOUNT,0) != ISNULL(c2.RSPAMOUNT,0) OR 
				ISNULL(c1.FUNDCOUNT,0) != ISNULL(c2.FUNDCOUNT,0) OR 
				ISNULL(c1.ACOPENDATE,0) != ISNULL(c2.ACOPENDATE,0) OR 
				ISNULL(c1.ACOPENBRANCH,0) != ISNULL(c2.ACOPENBRANCH,0) OR 
				ISNULL(c1.ACCLOSEDATE,0) != ISNULL(c2.ACCLOSEDATE,0) OR 
				ISNULL(c1.AGENT,0) != ISNULL(c2.AGENT,0) OR 
				REPLACE(ISNULL(c1.SETTLEAC,0),' ','') != REPLACE(ISNULL(c2.SETTLEAC,0),' ','') OR 
				ISNULL(c1.ACSTATUS,0) != ISNULL(c2.ACSTATUS,0) OR 
				ISNULL(c1.NUMOFCUST,0) != ISNULL(c2.NUMOFCUST,0) OR 
				REPLACE(ISNULL(c1.CUSTID,0),' ','') != REPLACE(ISNULL(c2.CUSTID,0),' ','') OR 
				ISNULL(c1.CUSTFULLNAME,0) != ISNULL(c2.CUSTFULLNAME,0) OR 
				ISNULL(c1.PRICEDATE,0) != ISNULL(c2.PRICEDATE,0) OR 
				ISNULL(c1.AUTSUBAMT,0) != ISNULL(c2.AUTSUBAMT,0) OR 
				ISNULL(c1.AUTREDAMT,0) != ISNULL(c2.AUTREDAMT,0) OR 
				ISNULL(c1.PLEDGED,0) != ISNULL(c2.PLEDGED,0) OR 
				ISNULL(c1.PLEDPCENT,0) != ISNULL(c2.PLEDPCENT,0) OR 
				ISNULL(c1.UNITHOLD,0) != ISNULL(c2.UNITHOLD,0) OR 
				ISNULL(c1.ISSUEDATE,0) != ISNULL(c2.ISSUEDATE,0) OR 
				ISNULL(c1.MATURITYDATE,0) != ISNULL(c2.MATURITYDATE,0) OR 
				ISNULL(c1.ISSUENO,0) != ISNULL(c2.ISSUENO,0) OR 
				ISNULL(c1.SECURITYNO,0) != ISNULL(c2.SECURITYNO,0) OR 
				ISNULL(c1.PRODRISKRATE,0) != ISNULL(c2.PRODRISKRATE,0) OR 
				ISNULL(c1.LEHMAN,0) != ISNULL(c2.LEHMAN,0) OR 
				ISNULL(c1.DUMPFIELD,0) != ISNULL(c2.DUMPFIELD,0) OR ISNULL(c1.AddressCode,0) != ISNULL(c2.AddressCode,0)

	--SELECT * FROM DSBDB..TB_UT2CIF_TEMP c1  WHERE ACCOUNT = 'UT0087461001' AND FUNDCODE = 'XX'
	--UNION ALL
	--SELECT * FROM DSBDB..TB_UT2CIF_TEMP_CBP2 c2 WHERE ACCOUNT = 'UT0087461001' AND FUNDCODE = 'XX'        

		-- recent table record updated time
			IF OBJECT_ID('tempdb..#tmp_update_time') IS NOT NULL DROP TABLE #tmp_update_time
			SELECT OBJECT_NAME(OBJECT_ID) AS DatabaseName, last_user_update
			INTO #tmp_update_time
			FROM DSBDB.sys.dm_db_index_usage_stats
			WHERE database_id = DB_ID( 'DSBDB')
			ORDER BY  OBJECT_NAME(OBJECT_ID) 

			SELECT * FROM #tmp_update_time ORDER BY last_user_update DESC
			 
			/*
			DROP TABLE DSBCIFTB_NEW
			DROP TABLE TB_UT2CIF_CHKCLOSE_NEW
			DROP TABLE TB_UT2CIF_CUSTID_NEW
			DROP TABLE TB_UT2CIF_NEW
			DROP TABLE TB_UT2CIF_SETTLEAC_NEW
			DROP TABLE TB_UT2CIF_TEMP_NEW
			DROP PROCEDURE SP_UT2CIF_CHKCLOSE_NEW
			DROP PROCEDURE SP_UT2CIF_COPY_NEW
			DROP PROCEDURE SP_UT2CIF_CUSTID_NEW
			DROP PROCEDURE SP_UT2CIF_EXPORT_NEW
			DROP PROCEDURE SP_UT2CIF_INSERT_NEW
			DROP PROCEDURE SP_UT2CIF_LEHMAN_NEW
			DROP PROCEDURE SP_UT2CIF_UPDATE_NEW
			DROP PROCEDURE SP_UT2CIF_MAIN_NEW
			DROP PROCEDURE SP_UT2CIF_PRODUCT_RISK_NEW
			DROP PROCEDURE SP_UT2CIF_SETTLEAC_NEW

			*/
 END

GO
/****** Object:  StoredProcedure [dbo].[sp_COMPARE_UT2CIF_NEW_OLD_DATA]    Script Date: 5/17/2022 9:57:52 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


 CREATE  PROCEDURE [dbo].[sp_COMPARE_UT2CIF_NEW_OLD_DATA]
 AS
 BEGIN
		-- Record Count 
		SELECT
			(SELECT COUNT(*) FROM DSBDB..TB_UT2CIF_TEMP) AS OLD_TB_UT2CIF_TEMP_COUNT,
			(SELECT COUNT(*) FROM DSBDB..TB_UT2CIF_TEMP_NEW) AS NEW_TB_UT2CIF_TEMP_COUNT,
			(SELECT COUNT(*) FROM DSBDB..DSBCIFTB) AS OLD_DSBCIFTB_COUNT,
			(SELECT COUNT(*) FROM DSBDB..DSBCIFTB_NEW) AS NEW_DSBCIFTB_NEW_COUNT,
			(SELECT COUNT(*) FROM DSBDB..TB_UT2CIF_CHKCLOSE) AS OLD_TB_UT2CIF_CHKCLOSE_COUNT,
			(SELECT COUNT(*) FROM DSBDB..TB_UT2CIF_CHKCLOSE_NEW) AS NEW_TB_UT2CIF_CHKCLOSE_NEW_COUNT,
			(SELECT COUNT(*) FROM DSBDB..TB_UT2CIF_CUSTID) AS OLD_TB_UT2CIF_CUSTID_COUNT,
			(SELECT COUNT(*) FROM DSBDB..TB_UT2CIF_CUSTID_NEW) AS NEW_TB_UT2CIF_CUSTID_NEW_COUNT,
			(SELECT COUNT(*) FROM DSBDB..TB_UT2CIF) AS OLD_TB_UT2CIF_COUNT,
			(SELECT COUNT(*) FROM DSBDB..TB_UT2CIF_NEW) AS NEW_TB_UT2CIF_NEW_COUNT,
			(SELECT COUNT(*) FROM DSBDB..TB_UT2CIF_SETTLEAC) AS OLD_TB_UT2CIF_SETTLEAC_COUNT,
			(SELECT COUNT(*) FROM DSBDB..TB_UT2CIF_SETTLEAC_NEW) AS NEW_TB_UT2CIF_SETTLEAC_NEW_COUNT
		-- Raw Data Compare
			SELECT result.* FROM (
			SELECT c1.* FROM DSBDB..TB_UT2CIF_TEMP c1 INNER JOIN DSBDB..TB_UT2CIF_TEMP_NEW c2 
			ON c1.ACCOUNT = c2.ACCOUNT AND c1.FUNDCODE = c2.FUNDCODE WHERE ISNULL(c1.BANKID,0) != ISNULL(c2.BANKID,0) OR  ISNULL(c1.FUNDNAME,0) != ISNULL(c2.FUNDNAME,0) OR ISNULL(c1.FUNDCCY,0) != ISNULL(c2.FUNDCCY,0) OR ISNULL(c1.PRICE,0) != ISNULL(c2.PRICE,0) OR ISNULL(c1.PROCESSINGDATE,0) != ISNULL(c2.PROCESSINGDATE,0) OR ISNULL(c1.UNITS,0) != ISNULL(c2.UNITS,0) OR ISNULL(c1.MARKETVALUE,0) != ISNULL(c2.MARKETVALUE,0) OR ISNULL(c1.PSUBUNIT,0) != ISNULL(c2.PSUBUNIT,0) OR ISNULL(c1.PREDUNIT,0) != ISNULL(c2.PREDUNIT,0) OR ISNULL(c1.LUMPIND,0) != ISNULL(c2.LUMPIND,0) OR ISNULL(c1.RSPCOUNT,0) != ISNULL(c2.RSPCOUNT,0) OR ISNULL(c1.RSPAMOUNT,0) != ISNULL(c2.RSPAMOUNT,0) OR ISNULL(c1.FUNDCOUNT,0) != ISNULL(c2.FUNDCOUNT,0) OR ISNULL(c1.ACOPENDATE,0) != ISNULL(c2.ACOPENDATE,0) OR ISNULL(c1.ACOPENBRANCH,0) != ISNULL(c2.ACOPENBRANCH,0) OR ISNULL(c1.ACCLOSEDATE,0) != ISNULL(c2.ACCLOSEDATE,0) OR ISNULL(c1.AGENT,0) != ISNULL(c2.AGENT,0) OR ISNULL(c1.SETTLEAC,0) != ISNULL(c2.SETTLEAC,0) OR ISNULL(c1.ACSTATUS,0) != ISNULL(c2.ACSTATUS,0) OR ISNULL(c1.NUMOFCUST,0) != ISNULL(c2.NUMOFCUST,0) OR ISNULL(c1.CUSTID,0) != ISNULL(c2.CUSTID,0) OR ISNULL(c1.CUSTFULLNAME,0) != ISNULL(c2.CUSTFULLNAME,0) OR ISNULL(c1.PRICEDATE,0) != ISNULL(c2.PRICEDATE,0) OR ISNULL(c1.AUTSUBAMT,0) != ISNULL(c2.AUTSUBAMT,0) OR ISNULL(c1.AUTREDAMT,0) != ISNULL(c2.AUTREDAMT,0) OR ISNULL(c1.PLEDGED,0) != ISNULL(c2.PLEDGED,0) OR ISNULL(c1.PLEDPCENT,0) != ISNULL(c2.PLEDPCENT,0) OR ISNULL(c1.UNITHOLD,0) != ISNULL(c2.UNITHOLD,0) OR ISNULL(c1.ISSUEDATE,0) != ISNULL(c2.ISSUEDATE,0) OR ISNULL(c1.MATURITYDATE,0) != ISNULL(c2.MATURITYDATE,0) OR ISNULL(c1.ISSUENO,0) != ISNULL(c2.ISSUENO,0) OR ISNULL(c1.SECURITYNO,0) != ISNULL(c2.SECURITYNO,0) OR ISNULL(c1.PRODRISKRATE,0) != ISNULL(c2.PRODRISKRATE,0) OR ISNULL(c1.LEHMAN,0) != ISNULL(c2.LEHMAN,0) OR ISNULL(c1.DUMPFIELD,0) != ISNULL(c2.DUMPFIELD,0) OR ISNULL(c1.AddressCode,0) != ISNULL(c2.AddressCode,0)
			UNION ALL
			SELECT c2.* FROM DSBDB..TB_UT2CIF_TEMP c1 INNER JOIN DSBDB..TB_UT2CIF_TEMP_NEW c2 
			ON c1.ACCOUNT = c2.ACCOUNT AND c1.FUNDCODE = c2.FUNDCODE WHERE ISNULL(c1.BANKID,0) != ISNULL(c2.BANKID,0) OR  ISNULL(c1.FUNDNAME,0) != ISNULL(c2.FUNDNAME,0) OR ISNULL(c1.FUNDCCY,0) != ISNULL(c2.FUNDCCY,0) OR ISNULL(c1.PRICE,0) != ISNULL(c2.PRICE,0) OR ISNULL(c1.PROCESSINGDATE,0) != ISNULL(c2.PROCESSINGDATE,0) OR ISNULL(c1.UNITS,0) != ISNULL(c2.UNITS,0) OR ISNULL(c1.MARKETVALUE,0) != ISNULL(c2.MARKETVALUE,0) OR ISNULL(c1.PSUBUNIT,0) != ISNULL(c2.PSUBUNIT,0) OR ISNULL(c1.PREDUNIT,0) != ISNULL(c2.PREDUNIT,0) OR ISNULL(c1.LUMPIND,0) != ISNULL(c2.LUMPIND,0) OR ISNULL(c1.RSPCOUNT,0) != ISNULL(c2.RSPCOUNT,0) OR ISNULL(c1.RSPAMOUNT,0) != ISNULL(c2.RSPAMOUNT,0) OR ISNULL(c1.FUNDCOUNT,0) != ISNULL(c2.FUNDCOUNT,0) OR ISNULL(c1.ACOPENDATE,0) != ISNULL(c2.ACOPENDATE,0) OR ISNULL(c1.ACOPENBRANCH,0) != ISNULL(c2.ACOPENBRANCH,0) OR ISNULL(c1.ACCLOSEDATE,0) != ISNULL(c2.ACCLOSEDATE,0) OR ISNULL(c1.AGENT,0) != ISNULL(c2.AGENT,0) OR ISNULL(c1.SETTLEAC,0) != ISNULL(c2.SETTLEAC,0) OR ISNULL(c1.ACSTATUS,0) != ISNULL(c2.ACSTATUS,0) OR ISNULL(c1.NUMOFCUST,0) != ISNULL(c2.NUMOFCUST,0) OR ISNULL(c1.CUSTID,0) != ISNULL(c2.CUSTID,0) OR ISNULL(c1.CUSTFULLNAME,0) != ISNULL(c2.CUSTFULLNAME,0) OR ISNULL(c1.PRICEDATE,0) != ISNULL(c2.PRICEDATE,0) OR ISNULL(c1.AUTSUBAMT,0) != ISNULL(c2.AUTSUBAMT,0) OR ISNULL(c1.AUTREDAMT,0) != ISNULL(c2.AUTREDAMT,0) OR ISNULL(c1.PLEDGED,0) != ISNULL(c2.PLEDGED,0) OR ISNULL(c1.PLEDPCENT,0) != ISNULL(c2.PLEDPCENT,0) OR ISNULL(c1.UNITHOLD,0) != ISNULL(c2.UNITHOLD,0) OR ISNULL(c1.ISSUEDATE,0) != ISNULL(c2.ISSUEDATE,0) OR ISNULL(c1.MATURITYDATE,0) != ISNULL(c2.MATURITYDATE,0) OR ISNULL(c1.ISSUENO,0) != ISNULL(c2.ISSUENO,0) OR ISNULL(c1.SECURITYNO,0) != ISNULL(c2.SECURITYNO,0) OR ISNULL(c1.PRODRISKRATE,0) != ISNULL(c2.PRODRISKRATE,0) OR ISNULL(c1.LEHMAN,0) != ISNULL(c2.LEHMAN,0) OR ISNULL(c1.DUMPFIELD,0) != ISNULL(c2.DUMPFIELD,0) OR ISNULL(c1.AddressCode,0) != ISNULL(c2.AddressCode,0)
			) result
			ORDER BY ACCOUNT ,FUNDCODE

		-- recent table record updated time
			IF OBJECT_ID('tempdb..#tmp_update_time') IS NOT NULL DROP TABLE #tmp_update_time
			SELECT OBJECT_NAME(OBJECT_ID) AS DatabaseName, last_user_update
			INTO #tmp_update_time
			FROM DSBDB.sys.dm_db_index_usage_stats
			WHERE database_id = DB_ID( 'DSBDB')
			ORDER BY  OBJECT_NAME(OBJECT_ID) 

			SELECT * FROM #tmp_update_time ORDER BY last_user_update DESC
			 
			/*
			DROP TABLE DSBCIFTB_NEW
			DROP TABLE TB_UT2CIF_CHKCLOSE_NEW
			DROP TABLE TB_UT2CIF_CUSTID_NEW
			DROP TABLE TB_UT2CIF_NEW
			DROP TABLE TB_UT2CIF_SETTLEAC_NEW
			DROP TABLE TB_UT2CIF_TEMP_NEW
			DROP PROCEDURE SP_UT2CIF_CHKCLOSE_NEW
			DROP PROCEDURE SP_UT2CIF_COPY_NEW
			DROP PROCEDURE SP_UT2CIF_CUSTID_NEW
			DROP PROCEDURE SP_UT2CIF_EXPORT_NEW
			DROP PROCEDURE SP_UT2CIF_INSERT_NEW
			DROP PROCEDURE SP_UT2CIF_LEHMAN_NEW
			DROP PROCEDURE SP_UT2CIF_UPDATE_NEW
			DROP PROCEDURE SP_UT2CIF_MAIN_NEW
			DROP PROCEDURE SP_UT2CIF_PRODUCT_RISK_NEW
			DROP PROCEDURE SP_UT2CIF_SETTLEAC_NEW

			*/
 END

GO
/****** Object:  StoredProcedure [dbo].[sp_COMPARE_UTEBKDT]    Script Date: 5/17/2022 9:57:52 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	CREATE PROCEDURE [dbo].[sp_COMPARE_UTEBKDT]
	AS
	BEGIN
		--CREATE TABLE TMP_DATA
		--(
		--	rData NVARCHAR(MAX)
		--)
		IF OBJECT_ID('tempdb..#tmp1') IS NOT NULL DROP TABLE #tmp1
		IF OBJECT_ID('tempdb..#tmp2') IS NOT NULL DROP TABLE #tmp2

		SET QUOTED_IDENTIFIER ON
		truncate table  master..TMP_DATA
  

		BULK INSERT master..TMP_DATA
		FROM '\\uatvutdb02\migration\20210525\Compare\new\UTEBKDT.txt'
		WITH (  
		FIRSTROW = 2,
		DATAFILETYPE = 'char',  
		FIELDTERMINATOR = ',',  
		ROWTERMINATOR = '0x0A',
		CODEPAGE='65001'
		);  
		 
		SELECT ROW_NUMBER() OVER(ORDER BY rData ASC) AS RowID,* INTO #tmp1 FROM master..TMP_DATA
		 
		SET QUOTED_IDENTIFIER ON
		truncate table  master..TMP_DATA
  
		BULK INSERT master..TMP_DATA
		FROM '\\uatvutdb02\migration\20210525\Compare\old2\UTEBKDT.txt'
		WITH (  
		FIRSTROW = 2,
		DATAFILETYPE = 'char',  
		FIELDTERMINATOR = ',',  
		ROWTERMINATOR = '0x0A',
		CODEPAGE='65001'
		);  
	
		SELECT ROW_NUMBER() OVER(ORDER BY rData ASC) AS RowID,* INTO #tmp2 FROM master..TMP_DATA

		 SELECT * FROM #tmp1 c1 INNER JOIN #tmp2 c2 ON c1.RowID = c2.RowID
		 WHERE c1.rData != c2.rData

		 SELECT * FROM #tmp1 c1 INNER JOIN #tmp2 c2 ON c1.RowID = c2.RowID
		 WHERE c1.rData = c2.rData

		 SELECT 
			(SELECT COUNT(*) FROM #tmp1) AS rCount1,
			(SELECT COUNT(*) FROM #tmp2) AS rCount2
	END
	
GO
/****** Object:  StoredProcedure [dbo].[sp_COMPARE_UTEBKFD]    Script Date: 5/17/2022 9:57:52 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	CREATE PROCEDURE [dbo].[sp_COMPARE_UTEBKFD]
	AS
	BEGIN
		--CREATE TABLE TMP_DATA
		--(
		--	rData NVARCHAR(MAX)
		--)
		IF OBJECT_ID('tempdb..#tmp1') IS NOT NULL DROP TABLE #tmp1
		IF OBJECT_ID('tempdb..#tmp2') IS NOT NULL DROP TABLE #tmp2

		SET QUOTED_IDENTIFIER ON
		truncate table  master..TMP_DATA
  

		BULK INSERT master..TMP_DATA
		FROM '\\uatvutdb02\migration\20210525\Compare\new\UTEBKFD.txt'
		WITH (  
		FIRSTROW = 2,
		DATAFILETYPE = 'char',  
		FIELDTERMINATOR = ',',  
		ROWTERMINATOR = '0x0A',
		CODEPAGE='65001'
		);  
		 
		SELECT ROW_NUMBER() OVER(ORDER BY rData ASC) AS RowID,* INTO #tmp1 FROM master..TMP_DATA
		 
		SET QUOTED_IDENTIFIER ON
		truncate table  master..TMP_DATA
  
		BULK INSERT master..TMP_DATA
		FROM '\\uatvutdb02\migration\20210525\Compare\old2\UTEBKFD.txt'
		WITH (  
		FIRSTROW = 2,
		DATAFILETYPE = 'char',  
		FIELDTERMINATOR = ',',  
		ROWTERMINATOR = '0x0A',
		CODEPAGE='65001'
		);  
	
		SELECT ROW_NUMBER() OVER(ORDER BY rData ASC) AS RowID,* INTO #tmp2 FROM master..TMP_DATA

		 SELECT * FROM #tmp1 c1 INNER JOIN #tmp2 c2 ON c1.RowID = c2.RowID
		 WHERE c1.rData != c2.rData

		 SELECT * FROM #tmp1 c1 INNER JOIN #tmp2 c2 ON c1.RowID = c2.RowID
		 WHERE c1.rData = c2.rData

		 SELECT 
			(SELECT COUNT(*) FROM #tmp1) AS rCount1,
			(SELECT COUNT(*) FROM #tmp2) AS rCount2
	END
	
GO
/****** Object:  StoredProcedure [dbo].[sp_CompareFolderFileName]    Script Date: 5/17/2022 9:57:52 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[sp_CompareFolderFileName]
(
	@sSourcePath NVARCHAR(MAX),
	@sTargetPath NVARCHAR(MAX)
)
/*
	sp_CompareFolderFileName '\\uatvutdb02\migration\HItrust Enhancement\20201207_SARDRD20002_US_STOCK_CODE\SQL',
	'\\uatvutdb02\CoreBank_P2\SQL_UPDATE\BPSS'
*/
AS
BEGIN
	DECLARE @sSourceScript VARCHAR(4000)
	DECLARE @sTargetScript VARCHAR(4000)

	SET @sSourceScript = 'dir /A:-D /B "'+ @sSourcePath +'"';
	SET @sTargetScript = 'dir /A:-D /B "'+ @sTargetPath +'"';


	DECLARE @tbl_source_name TABLE
	(
		rData NVARCHAR(MAX)
	)

	DECLARE @tbl_target_name TABLE
	(
		rData NVARCHAR(MAX)
	)

	INSERT INTO @tbl_source_name
	EXEC xp_cmdshell @sSourceScript;

	INSERT INTO @tbl_target_name
	EXEC xp_cmdshell @sTargetScript;

	UPDATE @tbl_source_name SET rData = UPPER(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(rData,'BCMDB.',''),'BPSS.',''),'DSBDB.',''),'_NEW',''),'_OLD',''),'HITRUST.',''),'.sql',''))
	UPDATE @tbl_target_name SET rData = UPPER(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(rData,'BCMDB.',''),'BPSS.',''),'DSBDB.',''),'_NEW',''),'_OLD',''),'HITRUST.',''),'.sql',''))

	SELECT * FROM @tbl_source_name c1 INNER JOIN @tbl_target_name c2 ON c1.rData = c2.rData

	SELECT * FROM @tbl_source_name
	SELECT * FROM @tbl_target_name
END
GO
/****** Object:  StoredProcedure [dbo].[sp_DBMigration]    Script Date: 5/17/2022 9:57:52 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_DBMigration]
(
@pXML XML,
@pOutXML XML OUTPUT
)
AS
BEGIN
/*
------------------------------------------------------------------------
--GET COMPARE DETAIL WITH LINK SERVER
DECLARE @pRtnXML XML
EXEC [sp_DBMigration] '
<ROOT>
		<TYPE>GEN_COMPARE_WITH_LINKSRV</TYPE>
		<LinkSrv_Name>UATVUTDB02</LinkSrv_Name>
		<LinkSrv_DB_Name>DSBDB</LinkSrv_DB_Name>
		<Local_DB_Name>DSBDB_0606</Local_DB_Name>
</ROOT>',@pRtnXML OUTPUT
SELECT @pRtnXML
------------------------------------------------------------------------
--GEN FOREGIN KEY 
DECLARE @pRtnXML XML
EXEC [sp_DBMigration] '
<ROOT>
		<TYPE>GEN_FOREGIN_KEY_SCRIPT</TYPE>
		<Local_DB_Name>HITRUST</Local_DB_Name>
</ROOT>',@pRtnXML OUTPUT
SELECT @pRtnXML
------------------------------------------------------------------------
--GEN COLUMN UPDATE SCRIPT
DECLARE @pRtnXML XML
EXEC [sp_DBMigration] '
<ROOT>
		<TYPE>GEN_COLUMN_UPDATE_SCRIPT</TYPE>
		<OLD_DB_Name>DSBDB</OLD_DB_Name>
		<NEW_DB_Name>DSBDB_0606</NEW_DB_Name>
</ROOT>',@pRtnXML OUTPUT
SELECT @pRtnXML


DECLARE @pRtnXML XML
EXEC [sp_DBMigration] '
<ROOT>
		<TYPE>GEN_COLUMN_UPDATE_SCRIPT</TYPE>
		<OLD_DB_Name>HITRUST</OLD_DB_Name>
		<NEW_DB_Name>HITRUST_0606</NEW_DB_Name>
</ROOT>',@pRtnXML OUTPUT
SELECT @pRtnXML
------------------------------------------------------------------------
--GET COMPARE STORED PRCOEDURE
DECLARE @pRtnXML XML
EXEC [sp_DBMigration] '
<ROOT>
		<TYPE>GEN_COMPARE_STORED_PROCEDURE</TYPE>
		<OLD_DB_Name>HITRUST</OLD_DB_Name>
		<NEW_DB_Name>HITRUST_0606</NEW_DB_Name>
</ROOT>',@pRtnXML OUTPUT
SELECT @pRtnXML

DECLARE @pRtnXML XML
EXEC [sp_DBMigration] '
<ROOT>
		<TYPE>GEN_COMPARE_STORED_PROCEDURE_LINKSRV</TYPE>
		<OLD_DB_Name>BPSS</OLD_DB_Name>
		<NEW_DB_Name>BPSS</NEW_DB_Name>
		<LinkSrv_Name>UATVUTDBCB01</LinkSrv_Name>
		<ExportPath>C:\Temp\20210322\BPSS</ExportPath>
</ROOT>',@pRtnXML OUTPUT
SELECT @pRtnXML

DECLARE @pRtnXML XML
EXEC [sp_DBMigration] '
<ROOT>
		<TYPE>GEN_COMPARE_STORED_PROCEDURE</TYPE>
		<OLD_DB_Name>BCMDB</OLD_DB_Name>
		<NEW_DB_Name>BCMDB_0606</NEW_DB_Name>
</ROOT>',@pRtnXML OUTPUT
SELECT @pRtnXML

DECLARE @pRtnXML XML
EXEC [sp_DBMigration] '
<ROOT>
		<TYPE>GEN_COMPARE_STORED_PROCEDURE</TYPE>
		<OLD_DB_Name>BPSS</OLD_DB_Name>
		<NEW_DB_Name>BPSS_0606</NEW_DB_Name>
</ROOT>',@pRtnXML OUTPUT
SELECT @pRtnXML

---------

DECLARE @pRtnXML XML
EXEC [sp_DBMigration] '
<ROOT>
		<TYPE>EXECUTE_BATCH_SQL_FILE</TYPE>
		<ImportPath>D:\temp\2020Aug31\</ImportPath>
</ROOT>',@pRtnXML OUTPUT
SELECT @pRtnXML

DECLARE @pRtnXML XML
EXEC [sp_DBMigration] '
<ROOT>
		<TYPE>GEN_PREMISSION</TYPE>
		<USER>MVBREADONLY</USER>
		<Local_DB_Name>HITRUST_20200901</Local_DB_Name>
</ROOT>',@pRtnXML OUTPUT
SELECT @pRtnXML

DECLARE @pRtnXML XML
EXEC [sp_DBMigration] '
<ROOT>
		<TYPE>SEARCH_INCLUDE_COLUMN</TYPE>
		<SEARCH_COLUMN>ACNO</SEARCH_COLUMN>
		<Local_DB_Name>DSBDB</Local_DB_Name>
		<ExportPath>C:\temp\20200915_DSBDB</ExportPath>
</ROOT>',@pRtnXML OUTPUT
SELECT @pRtnXML
--------------------------------------------------
	--''P'',''V'',''FN''
	DECLARE @pRtnXML XML
	EXEC [sp_DBMigration] '
	<ROOT>
			<TYPE>GEN_SOURCE_CODE</TYPE>
			<Local_DB_Name>DSBDB</Local_DB_Name> 
			<FuncType>P</FuncType>
			<ExportPath>C:\temp\20210308\a</ExportPath>
	</ROOT>',@pRtnXML OUTPUT
	SELECT @pRtnXML

DECLARE @pRtnXML XML
EXEC [sp_DBMigration] '
<ROOT>
		<TYPE>GEN_SOURCE_CODE</TYPE>
		<Local_DB_Name>DSBDB</Local_DB_Name> 
		<FuncType>V</FuncType>
		<ExportPath>C:\temp\20210304\DSBDB\View</ExportPath>
</ROOT>',@pRtnXML OUTPUT
SELECT @pRtnXML

DECLARE @pRtnXML XML
EXEC [sp_DBMigration] '
<ROOT>
		<TYPE>GEN_SOURCE_CODE</TYPE>
		<Local_DB_Name>DSBDB</Local_DB_Name> 
		<FuncType>FN</FuncType>
		<ExportPath>C:\temp\20210304\DSBDB\Function</ExportPath>
</ROOT>',@pRtnXML OUTPUT
SELECT @pRtnXML

DECLARE @pRtnXML XML
EXEC [sp_DBMigration] '
<ROOT>
		<TYPE>GET_TABLE_CREATE_SCRIPT</TYPE>
		<ExportPath>C:\temp\20210304\BPSS\Tables</ExportPath>
		<SourceFile>C:\Temp\20210304\BPSS_DB.sql</SourceFile>
</ROOT>',@pRtnXML OUTPUT
SELECT @pRtnXML

	DROP TABLE db_temp
	CREATE TABLE db_temp
	(
	rData NVARCHAR(MAX)
	)

	--Copy & paste raw data to table
	-- SELECT rData FROM db_temp

    BULK INSERT db_temp
    FROM 'C:\Temp\20210304\BCMDB_DB.sql'  
	WITH (   
	FIRSTROW = 1,
     FieldTerminator = ',', RowTerminator= '\n', KEEPNULLS
    );  
	
	alter table db_temp add RowID BIGINT NOT NULL IDENTITY(1,1)

*/
  
exec sp_configure 'Ole Automation Procedures', 1
-- Configuration option 'Ole Automation Procedures' changed from 0 to 1. Run the RECONFIGURE statement to install.
 
reconfigure

	DECLARE @TYPE NVARCHAR(100)
	DECLARE @LinkSrv_DB_Name NVARCHAR(MAX)
	DECLARE @LinkSrv_Name NVARCHAR(MAX)
	DECLARE @Local_DB_Name NVARCHAR(MAX)
	DECLARE @OLD_DB_Name NVARCHAR(MAX)
	DECLARE @NEW_DB_Name NVARCHAR(MAX)
	DECLARE @sScript NVARCHAR(MAX)
	DECLARE @tbl_Name NVARCHAR(MAX)	
	DECLARE @sDBScript NVARCHAR(MAX)
	DECLARE @sExportPath NVARCHAR(MAX)
	DECLARE @sImportPath NVARCHAR(MAX)
	DECLARE @sSEARCH_COLUMN NVARCHAR(MAX)
	DECLARE @sUSER NVARCHAR(100)
	DECLARE @sFuncType NVARCHAR(3)
	DECLARE @sSourceFile NVARCHAR(300)

	SELECT 
		@TYPE			= T.C.value('TYPE[1]', 'NVARCHAR(100)'),
		@LinkSrv_DB_Name	= T.C.value('LinkSrv_DB_Name[1]', 'NVARCHAR(100)'),
		@LinkSrv_Name		= T.C.value('LinkSrv_Name[1]', 'NVARCHAR(100)'),
		@Local_DB_Name		= T.C.value('Local_DB_Name[1]', 'NVARCHAR(100)'),
		@OLD_DB_Name		= T.C.value('OLD_DB_Name[1]', 'NVARCHAR(100)'),
		@NEW_DB_Name		= T.C.value('NEW_DB_Name[1]', 'NVARCHAR(100)'),
		@sExportPath		= T.C.value('ExportPath[1]', 'NVARCHAR(200)'),
		@sImportPath		= T.C.value('ImportPath[1]', 'NVARCHAR(200)'),
		@sFuncType			= T.C.value('FuncType[1]', 'NVARCHAR(3)'),
		@sSourceFile		= T.C.value('SourceFile[1]', 'NVARCHAR(300)'),
		@sUSER				= T.C.value('USER[1]', 'NVARCHAR(200)'),
		@sSEARCH_COLUMN		= T.C.value('SEARCH_COLUMN[1]', 'NVARCHAR(200)')
		FROM @pXML.nodes('/ROOT') T(C)

	IF (@TYPE = 'GEN_COMPARE_WITH_LINKSRV')
	BEGIN
		SET @sDBScript =  @LinkSrv_Name +'.'+ @LinkSrv_DB_Name + '.dbo.'
	 
		SET @sScript = '

		IF OBJECT_ID(''tempdb..#tmp_SourceName'') IS NOT NULL DROP TABLE #tmp_SourceName
		IF OBJECT_ID(''tempdb..#tmp_TargetName'') IS NOT NULL DROP TABLE #tmp_TargetName

		SELECT t.name AS TableName ,c.* INTO #tmp_SourceName FROM
		'+ @Local_DB_Name +'.sys.columns c INNER JOIN 
		'+ @Local_DB_Name +'.sys.tables t ON c.object_id = t.object_id INNER JOIN 
		'+ @Local_DB_Name +'.sys.types ty ON c.system_type_id = ty.system_type_id
		WHERE t.name IS NOT NULL AND ty.name NOT IN ( ''sysname'',''dtproperties'') AND t.name NOT IN ( ''sysname'',''dtproperties'',''sysdiagrams'')
	
		SELECT t.name AS TableName ,c.* INTO #tmp_TargetName FROM
		'+ @LinkSrv_Name +'.'+ @LinkSrv_DB_Name +'.sys.columns c INNER JOIN 
		'+ @LinkSrv_Name +'.'+ @LinkSrv_DB_Name +'.sys.tables t ON c.object_id = t.object_id INNER JOIN 
		'+ @LinkSrv_Name +'.'+ @LinkSrv_DB_Name +'.sys.types ty ON c.system_type_id = ty.system_type_id
		WHERE t.name IS NOT NULL AND ty.name NOT IN ( ''sysname'',''dtproperties'') AND t.name NOT IN ( ''sysname'',''dtproperties'',''sysdiagrams'')
		

		SELECT ''COLUMN DIFF''
		SELECT c1.max_length AS OLD_Length1,c2.max_length AS NEW_Length2,c1.user_type_id AS OLD_ColType1,c2.user_type_id AS NEW_ColType2,* FROM #tmp_SourceName c1 INNER JOIN #tmp_TargetName c2 ON c1.name = c2.name AND c1.TableName = c2.TableName 
		WHERE c1.max_length !=  c2.max_length  OR c1.user_type_id != c2.user_type_id

		SELECT ''COLUMN NOT INSIDE''
	 
		SELECT c1.TableName ,''ALTER TABLE '' + c1.TableName + '' ADD '' + c1.name + '' '' + c3.name +
		(CASE WHEN c3.system_type_id = 40 OR c3.system_type_id = 52 OR c3.system_type_id = 56 OR c3.system_type_id = 61 OR c3.system_type_id = 104 THEN
			''''
		ELSE
			CASE WHEN c3.system_type_id = 106 THEN
				''('' + CONVERT(NVARCHAR,c1.precision)  +'','' + CONVERT(NVARCHAR,c1.scale)  +'')''
			ELSE
				CASE WHEN c3.system_type_id = 167 OR c3.system_type_id = 175 THEN
					''('' + CONVERT(NVARCHAR,c1.max_length)    +'')''
				ELSE
					CASE WHEN c3.system_type_id = 231 OR c3.system_type_id = 239 THEN	
						''('' + CONVERT(NVARCHAR,c1.max_length/2)    +'')''
					ELSE
						''''
					END
				END
			END
		END)
		AS rScript,c1.*
		FROM #tmp_SourceName c1 
		LEFT JOIN #tmp_TargetName c2 ON c1.TableName = c2.TableName  AND c1.name = c2.name
		INNER JOIN sys.types c3 ON c3.system_type_id = c1.system_type_id
		WHERE c2.name IS NULL   

		SELECT c2.* FROM #tmp_SourceName c1 LEFT JOIN #tmp_TargetName c2 ON c1.TableName = c2.TableName  AND c1.name = c2.name 
		WHERE c1.name IS NULL  


		SELECT ''TABLE NOT IN SOURCE''
		SELECT c1.* FROM #tmp_TargetName c1 WHERE c1.TableName NOT IN (SELECT c2.TableName FROM #tmp_SourceName c2)

		SELECT o.NAME,i.rowcnt FROM '+ @LinkSrv_Name +'.'+ @LinkSrv_DB_Name +'.sys.sysindexes AS i INNER JOIN '+ @LinkSrv_Name +'.'+ @LinkSrv_DB_Name +'.sys.sysobjects AS o ON i.id = o.id 
		WHERE i.indid < 2 AND o.NAME IN 
		(
		SELECT c1.TableName FROM #tmp_SourceName c1 INNER JOIN #tmp_TargetName c2 ON c1.name = c2.name AND c1.TableName = c2.TableName 
		WHERE c1.max_length !=  c2.max_length  OR c1.user_type_id != c2.user_type_id
		) ORDER BY i.rowcnt


		SELECT ''GEN CLONE SCRIPT(INCLUDE IDENTITY)''
		SELECT  ''
			SET IDENTITY_INSERT '' + name + '' ON
			INSERT INTO '' + name + ''('' + 
			SUBSTRING((SELECT  '','' + COLUMN_NAME FROM '+ @LinkSrv_Name +'.'+ @LinkSrv_DB_Name +'.INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME=name AND COLUMN_NAME NOT IN (''msrepl_tran_version'') FOR XML PATH('''')),2,10000)  +'')	SELECT '' + 
			SUBSTRING((SELECT  '','' + COLUMN_NAME FROM '+ @LinkSrv_Name +'.'+ @LinkSrv_DB_Name +'.INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME=name AND COLUMN_NAME NOT IN (''msrepl_tran_version'') FOR XML PATH('''')),2,10000)  +'' FROM '+@sDBScript +''' + name 
			+ '' 
			SET IDENTITY_INSERT '' + name + '' OFF''
			FROM '+ @LinkSrv_Name +'.'+ @LinkSrv_DB_Name +'.sys.objects WHERE type IN (''U'') AND name IN (SELECT o.name FROM '+ @LinkSrv_Name +'.'+ @LinkSrv_DB_Name +'.sys.objects o inner join '+ @LinkSrv_Name +'.'+ @LinkSrv_DB_Name +'.sys.columns c on o.object_id = c.object_id WHERE c.is_identity = 1)

		SELECT ''GEN CLONE SCRIPT(NOT INCLUDE IDENTITY)''
		SELECT  ''INSERT INTO '' + name + '' SELECT * FROM '+@sDBScript +''' + name FROM '+ @LinkSrv_Name +'.'+ @LinkSrv_DB_Name +'.sys.objects WHERE type IN (''U'') AND name NOT IN (SELECT o.name FROM '+ @LinkSrv_Name +'.'+ @LinkSrv_DB_Name +'.sys.objects o inner join '+ @LinkSrv_Name +'.'+ @LinkSrv_DB_Name +'.sys.columns c on o.object_id = c.object_id WHERE c.is_identity = 1)
	

		SELECT ''GEN CLONE SCRIPT(NOT INCLUDE IDENTITY)''
		SELECT  ''INSERT INTO '' + name + '' SELECT * FROM '+@sDBScript +''' + name FROM '+ @LinkSrv_Name +'.'+ @LinkSrv_DB_Name +'.sys.objects WHERE type IN (''U'') AND name NOT IN (SELECT o.name FROM '+ @LinkSrv_Name +'.'+ @LinkSrv_DB_Name +'.sys.objects o inner join '+ @LinkSrv_Name +'.'+ @LinkSrv_DB_Name +'.sys.columns c on o.object_id = c.object_id WHERE c.is_identity = 1)
		AND name IN 
		(SELECT o.NAME FROM '
		+ @LinkSrv_Name +'.'+ @LinkSrv_DB_Name +'.sys.sysindexes AS i INNER JOIN '+ @LinkSrv_Name +'.'+ @LinkSrv_DB_Name +'.sys.sysobjects AS o ON i.id = o.id INNER JOIN '
		+ @Local_DB_Name +'.sys.sysobjects AS o2 ON o.NAME = o2.NAME
		INNER JOIN '+ @Local_DB_Name +'.sys.sysindexes AS i2 ON i2.id = o2.id 
		WHERE i.indid < 2 AND i.rowcnt != i2.rowcnt AND i2.indid < 2 AND i2.rowcnt = 0)'

		PRINT @sScript
		EXEC sp_executesql @sScript
	END
	IF (@TYPE = 'SEARCH_INCLUDE_COLUMN')
	BEGIN
		SET @sDBScript =  @LinkSrv_Name +'.'+ @LinkSrv_DB_Name + '.dbo.'
	 
		SET @sScript = '
		DECLARE @sExportPath NVARCHAR(MAX)
		DECLARE @sSource_New NVARCHAR(MAX)
		DECLARE @OLE_New INT
		DECLARE @FileID_New INT
		DECLARE @File_Path_New NVARCHAR(MAX)
		DECLARE @New_tmp_file TABLE
		(
			RowID INT IDENTITY(1,1),
			rData NVARCHAR(MAX)
		)
		DECLARE @New_tmp_file_order TABLE
		(
			RowID INT,
			rData NVARCHAR(MAX)
		)
		DECLARE @tmp_Result TABLE
		(
			rTableName NVARCHAR(MAX),
			rData NVARCHAR(MAX)
		)
		DECLARE @rName NVARCHAR(100)
		DECLARE @var NVARCHAR(100)

		SET @var = '''+ @sSEARCH_COLUMN +'''
		
		SET @sExportPath = '''+ @sExportPath +'''

		IF OBJECT_ID(''tempdb..#tmp_SourceName'') IS NOT NULL DROP TABLE #tmp_SourceName
		IF OBJECT_ID(''tempdb..#tmp_Column'') IS NOT NULL DROP TABLE #tmp_Column

		SELECT t.name AS TableName ,c.* INTO #tmp_SourceName FROM
		'+ @Local_DB_Name +'.sys.columns c INNER JOIN 
		'+ @Local_DB_Name +'.sys.tables t ON c.object_id = t.object_id INNER JOIN 
		'+ @Local_DB_Name +'.sys.types ty ON c.system_type_id = ty.system_type_id
		WHERE t.name IS NOT NULL AND ty.name NOT IN ( ''sysname'',''dtproperties'') AND t.name NOT IN ( ''sysname'',''dtproperties'',''sysdiagrams'')
	
		SELECT c1.* INTO #tmp_Column FROM (
		SELECT 
			CASE 
			 WHEN o1.type = ''P''  THEN ''Stored Procedure''  
			 WHEN o1.type = ''V''  THEN ''View''  
			 WHEN o1.type = ''FN'' THEN ''Function''  ELSE ''Unknown''  
			 END AS ''ObjectType'', 
			o1.name as ''ObjectName''
		FROM '+ @Local_DB_Name +'.dbo.syscomments c1 JOIN '+ @Local_DB_Name +'.sys.objects o1 ON c1.id = o1.[object_id]  
		WHERE text LIKE ''%'' + @var + ''%''  AND o1.type IN (''V'',''P'',''FN'') AND 
			(o1.name NOT LIKE ''%2015%'' AND o1.name NOT LIKE ''%2016%'' AND o1.name NOT LIKE ''%2017%'' AND o1.name NOT LIKE ''%2018%'' 
			AND o1.name NOT LIKE ''%2019%'' AND o1.name NOT LIKE ''%2020%''AND o1.name NOT LIKE ''%2014%'' AND o1.name NOT LIKE ''%2013%''
			AND o1.name NOT LIKE ''%2012%'' AND o1.name NOT LIKE ''%2011%'' AND o1.name NOT LIKE ''%2010%'' AND o1.name NOT LIKE ''%2009%'')
		UNION  
		SELECT 
		''Table'' as ''ObjectType'',   
		 o1.name as ''ObjectName''
		FROM '+ @Local_DB_Name +'.sys.objects o1  
		 join '+ @Local_DB_Name +'.sys.columns sc  
		  on o1.object_id = sc.column_id  
		WHERE o1.type = ''U''  
		 and sc.name = @var  AND 
			(o1.name NOT LIKE ''%2015%'' AND o1.name NOT LIKE ''%2016%'' AND o1.name NOT LIKE ''%2017%'' AND o1.name NOT LIKE ''%2018%'' 
			AND o1.name NOT LIKE ''%2019%'' AND o1.name NOT LIKE ''%2020%''AND o1.name NOT LIKE ''%2014%'' AND o1.name NOT LIKE ''%2013%''
			AND o1.name NOT LIKE ''%2012%'' AND o1.name NOT LIKE ''%2011%'' AND o1.name NOT LIKE ''%2010%'' AND o1.name NOT LIKE ''%2009%'')
		UNION
		SELECT ''Table'' as ''Object Type'',t.name as ''Object Name''
		FROM '+ @Local_DB_Name +'.sys.columns c
			JOIN '+ @Local_DB_Name +'.sys.tables t ON c.object_id = t.object_id
		WHERE c.name LIKE ''%'' + @var + ''%'' AND 
			(t.name NOT LIKE ''%2015%'' AND t.name NOT LIKE ''%2016%'' AND t.name NOT LIKE ''%2017%'' AND t.name NOT LIKE ''%2018%'' 
			AND t.name NOT LIKE ''%2019%'' AND t.name NOT LIKE ''%2020%''AND t.name NOT LIKE ''%2014%'' AND t.name NOT LIKE ''%2013%''
			AND t.name NOT LIKE ''%2012%'' AND t.name NOT LIKE ''%2011%'' AND t.name NOT LIKE ''%2010%'' AND t.name NOT LIKE ''%2009%'')) c1 
		
		SELECT * FROM #tmp_Column
		
		DECLARE CUR_tmp_file CURSOR LOCAL FOR
			SELECT ObjectName FROM #tmp_Column WHERE ObjectType IN  (''Stored Procedure'',''Function'',''View'') AND ObjectType IS NOT NULL

		OPEN CUR_tmp_file
		FETCH NEXT FROM CUR_tmp_file INTO @rName
		WHILE( @@FETCH_STATUS = 0)
		BEGIN
			DELETE FROM @New_tmp_file
			DELETE FROM @New_tmp_file_order
			SET @sSource_New = ''''

			INSERT INTO @New_tmp_file(rData)
			EXEC master.dbo.sp_GenSPSourceCode '''+ @Local_DB_Name +''',@rName

			INSERT INTO @New_tmp_file_order(RowID,rData)
			SELECT row_number() OVER (ORDER BY RowID),rData FROM @New_tmp_file

			UPDATE @New_tmp_file_order SET rData = ''LINE NO:'' + CONVERT(NVARCHAR,RowID) + '' -- '' + rData

			SELECT @sSource_New = COALESCE(@sSource_New + '''', '''') + rData FROM @New_tmp_file_order WHERE rData LIKE ''%''+ @var +''%'' ORDER BY RowID

			SET @File_Path_New = @sExportPath + ''\'' + @rName + ''_SEARCH_COLUMN.txt''
			SET @OLE_New = 0
			SET @FileID_New = 0

			EXECUTE sp_OACreate ''Scripting.FileSystemObject'', @OLE_New OUT
			EXECUTE sp_OAMethod @OLE_New, ''OpenTextFile'', @FileID_New OUT, @File_Path_New, 8, 1
			EXECUTE sp_OAMethod @FileID_New, ''WriteLine'', Null, @sSource_New
			EXECUTE sp_OAMethod @FileID_New, ''Close'', Null, Null
			EXECUTE sp_OADestroy @FileID_New

			INSERT INTO @tmp_Result(rTableName,rData) VALUES (@rName,@sSource_New)

			FETCH NEXT FROM CUR_tmp_file INTO @rName
		END
		CLOSE CUR_tmp_file
		DEALLOCATE CUR_tmp_file

		SELECT * FROM @tmp_Result

		SELECT t.name AS TableName ,c.name, c.max_length,c.*  FROM
			'+ @Local_DB_Name +'.sys.columns c INNER JOIN 
			'+ @Local_DB_Name +'.sys.tables t ON c.object_id = t.object_id INNER JOIN 
			'+ @Local_DB_Name +'.sys.types ty ON c.system_type_id = ty.system_type_id
			WHERE t.name IS NOT NULL AND ty.name NOT IN ( ''sysname'',''dtproperties'') AND t.name NOT IN ( ''sysname'',''dtproperties'',''sysdiagrams'')
		AND t.name IN (
			SELECT ObjectName FROM #tmp_Column WHERE ObjectType = ''Table'' AND ObjectType IS NOT NULL)
			AND c.name LIKE ''%''+ @var +''%''
		'		
		
		PRINT @sScript
		EXEC sp_executesql @sScript
	END
	IF (@TYPE = 'GEN_FOREGIN_KEY_SCRIPT')
	BEGIN
		SET @sScript = '
				select ''ALTER TABLE '' + t.name + ''  NOCHECK CONSTRAINT '' + f.name  AS DISABLE_FOREGIN_KEY,
			''ALTER TABLE '' + t.name + ''  WITH CHECK CHECK CONSTRAINT '' + f.name AS ENABLE_FOREGIN_KEY
				from 
					'+  @Local_DB_Name +'.sys.foreign_key_columns as fk
				inner join 
					'+  @Local_DB_Name +'.sys.tables as t on fk.parent_object_id = t.object_id
				inner join 
					'+  @Local_DB_Name +'.sys.columns as c on fk.parent_object_id = c.object_id and fk.parent_column_id = c.column_id
				INNER JOIN 
					'+  @Local_DB_Name +'.sys.foreign_keys as f on f.parent_object_id = fk.parent_object_id
				GROUP BY 
				f.name,	
			t.name  '
		
		PRINT @sScript
		EXEC sp_executesql @sScript
	END
	IF (@TYPE = 'GEN_COMPARE_STORED_PROCEDURE')
	BEGIN
		SET @sScript = '
		DECLARE @sSource_Old NVARCHAR(MAX)
		DECLARE @sSource_New NVARCHAR(MAX)
		DECLARE @OLE_Old INT
		DECLARE @FileID_Old INT
		DECLARE @File_Path_Old NVARCHAR(MAX)
		DECLARE @OLE_New INT
		DECLARE @FileID_New INT
		DECLARE @File_Path_New NVARCHAR(MAX)

		DECLARE @Diff_tmp_file TABLE
		(
			RowID INT IDENTITY(1,1),
			rSPName NVARCHAR(MAX),
			rData NVARCHAR(MAX)
		)

		DECLARE @Add_tmp_file TABLE
		(
			RowID INT IDENTITY(1,1),
			rSPName NVARCHAR(MAX),
			rData NVARCHAR(MAX)
		)

		DECLARE @New_tmp_file TABLE
		(
			RowID INT IDENTITY(1,1),
			rData NVARCHAR(MAX)
		)

		DECLARE @Old_tmp_file TABLE
		(
			RowID INT IDENTITY(1,1),
			rData NVARCHAR(MAX)
		)
		DECLARE @rName NVARCHAR(100)
		DECLARE @sExportPath NVARCHAR(MAX)

		SET @sExportPath = '''+ @sExportPath +'''

		IF OBJECT_ID(''tempdb..#tmp_SourceName'') IS NOT NULL DROP TABLE #tmp_SourceName
		IF OBJECT_ID(''tempdb..#tmp_TargetName'') IS NOT NULL DROP TABLE #tmp_TargetName
		
		SELECT * INTO #tmp_SourceName FROM
		'+ @NEW_DB_Name +'.sys.objects WHERE type IN (''P'',''V'',''FN'')  AND is_ms_shipped=0 AND 
			(name NOT LIKE ''%2015%'' AND name NOT LIKE ''%2016%'' AND name NOT LIKE ''%2017%'' AND name NOT LIKE ''%2018%'' 
			AND name NOT LIKE ''%2019%'' AND name NOT LIKE ''%2020%''AND name NOT LIKE ''%2014%'' AND name NOT LIKE ''%2013%''
			AND name NOT LIKE ''%2012%'' AND name NOT LIKE ''%2011%'' AND name NOT LIKE ''%2010%'' AND name NOT LIKE ''%2009%'')
			AND name NOT IN (''sp_alterdiagram'',''sp_creatediagram'',''sp_dropdiagram'',''sp_helpdiagrams'',''sp_renamediagram'',''sp_upgraddiagrams'')
	
		SELECT * INTO #tmp_TargetName FROM
		'+ @OLD_DB_Name +'.sys.objects WHERE type IN (''P'',''V'',''FN'') AND is_ms_shipped=0
		
		SELECT ''STORED PROCEDURE DIFF''
		
		
		DECLARE CUR_tmp_file CURSOR LOCAL FOR
			SELECT c1.name FROM #tmp_SourceName c1 INNER JOIN #tmp_TargetName c2 ON c1.name = c2.name

		OPEN CUR_tmp_file
		FETCH NEXT FROM CUR_tmp_file INTO @rName
		WHILE( @@FETCH_STATUS = 0)
		BEGIN
			DELETE FROM @New_tmp_file
			DELETE FROM @Old_tmp_file

			INSERT INTO @New_tmp_file(rData)
			EXEC master.dbo.sp_GenSPSourceCode '''+ @NEW_DB_Name +''',@rName

			INSERT INTO @Old_tmp_file(rData)
			EXEC master.dbo.sp_GenSPSourceCode '''+ @OLD_DB_Name +''',@rName
			 
			DECLARE @sOld NVARCHAR(MAX)
			DECLARE @sNew NVARCHAR(MAX)

			DELETE FROM  @New_tmp_file WHERE RowID < (SELECT MIN(RowID) FROM @New_tmp_file WHERE rData LIKE ''%CREATE%'' )
			DELETE FROM  @Old_tmp_file WHERE RowID < (SELECT MIN(RowID) FROM @Old_tmp_file WHERE rData LIKE ''%CREATE%'' )

			SELECT @sOld = COALESCE(@sOld + '''', '''') + rData FROM @Old_tmp_file ORDER BY RowID
			SELECT @sNew = COALESCE(@sNew + '''', '''') + rData FROM @New_tmp_file ORDER BY RowID

			SET @sOld = REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(@sOld,CHAR(10),''''),CHAR(13),''''),CHAR(32),''''),CHAR(91),''''),CHAR(93),'''')
			SET @sNew = REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(@sNew,CHAR(10),''''),CHAR(13),''''),CHAR(32),''''),CHAR(91),''''),CHAR(93),'''')
			
			SET @sOld = (SELECT SUBSTRING(@sOld,CHARINDEX(@rName,@sOld,1),LEN(@sOld)))
			SET @sNew = (SELECT SUBSTRING(@sNew,CHARINDEX(@rName,@sNew,1),LEN(@sNew)))

			IF (@sOld != @sNew)
			BEGIN
				SET @sOld = REPLACE(REPLACE(@sOld,''CREATEPROCEDUREdbo.'',''''),''CREATEPROCEDURE'','''')
				SET @sNew = REPLACE(REPLACE(@sNew,''CREATEPROCEDUREdbo.'',''''),''CREATEPROCEDURE'','''')
				IF (@sOld != @sNew)
				BEGIN			
					SET @sSource_Old = ''''
					SET @sSource_New = ''''

					SELECT @sSource_Old = COALESCE(@sSource_Old + '''', '''') + rData FROM @Old_tmp_file ORDER BY RowID
					SELECT @sSource_New = COALESCE(@sSource_New + '''', '''') + rData FROM @New_tmp_file ORDER BY RowID

					SET @File_Path_Old = @sExportPath + ''\'' + @rName + ''_OLD''
					SET @File_Path_New = @sExportPath + ''\'' + @rName + ''_NEW''

					EXECUTE sp_OACreate ''Scripting.FileSystemObject'', @OLE_Old OUT
					EXECUTE sp_OAMethod @OLE_Old, ''OpenTextFile'', @FileID_Old OUT, @File_Path_Old, 8, 1
					EXECUTE sp_OAMethod @FileID_Old, ''WriteLine'', Null, @sSource_Old
					EXECUTE sp_OAMethod @FileID_Old, ''Close'', Null, Null
					EXECUTE sp_OADestroy @FileID_Old

					EXECUTE sp_OACreate ''Scripting.FileSystemObject'', @OLE_New OUT
					EXECUTE sp_OAMethod @OLE_New, ''OpenTextFile'', @FileID_New OUT, @File_Path_New, 8, 1
					EXECUTE sp_OAMethod @FileID_New, ''WriteLine'', Null, @sSource_New
					EXECUTE sp_OAMethod @FileID_New, ''Close'', Null, Null
					EXECUTE sp_OADestroy @FileID_New

					INSERT INTO @Diff_tmp_file (rSPName,rData)
					SELECT @rName, rData FROM @New_tmp_file ORDER BY RowID
				
					INSERT INTO @Diff_tmp_file (rSPName,rData) VALUES (@rName,''GO'')
					INSERT INTO @Add_tmp_file (rSPName,rData) VALUES (@rName,'' '')
				END
			END
			DELETE FROM @New_tmp_file
			DELETE FROM @Old_tmp_file

			FETCH NEXT FROM CUR_tmp_file INTO @rName
		END
		CLOSE CUR_tmp_file
		DEALLOCATE CUR_tmp_file

		SELECT * FROM @Diff_tmp_file ORDER BY RowID
		SELECT rSPName FROM @Diff_tmp_file GROUP BY rSPName


		DECLARE CUR_Add_tmp_file CURSOR LOCAL FOR
			SELECT c1.name FROM #tmp_SourceName c1 WHERE LTRIM(RTRIM(c1.name)) NOT IN (SELECT LTRIM(RTRIM(c2.name)) FROM #tmp_TargetName c2)

		OPEN CUR_Add_tmp_file
		FETCH NEXT FROM CUR_Add_tmp_file INTO @rName
		WHILE( @@FETCH_STATUS = 0)
		BEGIN 
			DELETE FROM @New_tmp_file

			INSERT INTO @New_tmp_file(rData)
			EXEC master.dbo.sp_GenSPSourceCode '''+ @NEW_DB_Name +''',@rName
			INSERT INTO @Add_tmp_file (rSPName,rData)
			SELECT @rName, rData FROM @New_tmp_file ORDER BY RowID

			INSERT INTO @Add_tmp_file (rSPName,rData) VALUES (@rName,''GO'')
			INSERT INTO @Add_tmp_file (rSPName,rData) VALUES (@rName,'' '')
 
			FETCH NEXT FROM CUR_Add_tmp_file INTO @rName
		END
		CLOSE CUR_Add_tmp_file
		DEALLOCATE CUR_Add_tmp_file

		SELECT * FROM @Add_tmp_file ORDER BY RowID
		SELECT c1.name FROM #tmp_SourceName c1 WHERE c1.name NOT IN (SELECT c2.name FROM #tmp_TargetName c2)'
		
		PRINT @sScript
		EXEC sp_executesql @sScript
	END

	IF (@TYPE = 'GET_TABLE_CREATE_SCRIPT')
	BEGIN
		SET @sScript = '
			DROP TABLE db_temp
			CREATE TABLE db_temp
			(
			rData NVARCHAR(MAX)
			)

			--Copy & paste raw data to table
			-- SELECT rData FROM db_temp

			BULK INSERT db_temp
			FROM '''+ @sSourceFile +'''  
			WITH (   
			FIRSTROW = 1,
			 FieldTerminator = '','', RowTerminator= ''\n'', KEEPNULLS
			);  
	 
			alter table db_temp add RowID BIGINT NOT NULL IDENTITY(1,1)
		'
		
		PRINT @sScript
		EXEC sp_executesql @sScript

		SET @sScript = '


		DECLARE @TableName  NVARCHAR(100)
		DECLARE @StartRow	INT
		DECLARE @EndRow		INT
		DECLARE @sSource NVARCHAR(MAX) 
		DECLARE @OLE INT
		DECLARE @FileID INT
		DECLARE @File_Path NVARCHAR(MAX) 
		DECLARE @sExportPath NVARCHAR(MAX)
		DECLARE @isExists INT

		SET @sExportPath = '''+ @sExportPath +'''

		IF OBJECT_ID(''tempdb..#tmp_db_temp'') IS NOT NULL DROP TABLE #tmp_db_temp
		SELECT  *,
		REPLACE(SUBSTRING(rData, CHARINDEX(''[dbo]'',rData) + 7, CHARINDEX('']('',rData) - (CHARINDEX(''[dbo]'',rData) +7)),'']('','''+ '' +''') AS TableName,
		RowID AS StartRow,
		ISNULL((SELECT MIN(RowID) - 1 FROM db_temp c2 WHERE rData LIKE ''%CREATE TABLE%'' AND c2.RowID > c1.RowID),(SELECT COUNT(*) FROM db_temp)) AS EndRow
		INTO #tmp_db_temp
		FROM db_temp c1 WHERE rData LIKE ''%CREATE TABLE%'' AND 
				(rData NOT LIKE ''%2015%'' AND rData NOT LIKE ''%2016%'' AND rData NOT LIKE ''%2017%'' AND rData NOT LIKE ''%2018%''
				AND rData NOT LIKE ''%2019%'' AND rData NOT LIKE ''%2020%'' AND rData NOT LIKE ''%2014%'' AND rData NOT LIKE ''%2013%''
				AND rData NOT LIKE ''%2012%'' AND rData NOT LIKE ''%2011%'' AND rData NOT LIKE ''%2010%'' AND rData NOT LIKE ''%2009%'')
 
 		DECLARE CUR_tmp_file CURSOR LOCAL FOR
			SELECT TableName,StartRow,EndRow FROM #tmp_db_temp 

		OPEN CUR_tmp_file
		FETCH NEXT FROM CUR_tmp_file INTO @TableName,@StartRow,@EndRow
		WHILE( @@FETCH_STATUS = 0)
		BEGIN 
			SET @sSource = '''' 
			SELECT @sSource = COALESCE(@sSource + '''', '''') + rData + CHAR(13) +CHAR(10) FROM db_temp c1 WHERE RowID BETWEEN @StartRow AND @EndRow ORDER BY RowID

			SET @OLE = 0
			SET @FileID = 0
			
			SET @File_Path = @sExportPath + ''\'' + @TableName + ''.sql''

			DECLARE @Command CHAR(1000)
			SET @Command = ''DIR "''+ @File_Path +''" /B''

			EXEC @isExists = XP_CMDSHELL @Command, NO_OUTPUT
			IF (@isExists = 1)
			BEGIN
				EXECUTE sp_OACreate ''Scripting.FileSystemObject'', @OLE OUT
				EXECUTE sp_OAMethod @OLE, ''OpenTextFile'', @FileID OUT, @File_Path, 8, 1
				EXECUTE sp_OAMethod @FileID, ''WriteLine'', Null, @sSource
				EXECUTE sp_OAMethod @FileID, ''Close'', Null, Null
				EXECUTE sp_OADestroy @FileID
			END
			FETCH NEXT FROM CUR_tmp_file INTO @TableName,@StartRow,@EndRow
		END
		CLOSE CUR_tmp_file
		DEALLOCATE CUR_tmp_file
		'

		PRINT @sScript
		EXEC sp_executesql @sScript
	END

	--''P'',''V'',''FN''

	IF (@TYPE = 'GEN_SOURCE_CODE')
	BEGIN
		SET @sScript = '
		SET NOCOUNT ON;
		DECLARE @rName NVARCHAR(200)
		DECLARE @OLE INT
		DECLARE @FileID INT
		DECLARE @File_Path NVARCHAR(MAX)
		DECLARE @sExportPath NVARCHAR(MAX)
		DECLARE @sSource NVARCHAR(MAX)
		DECLARE @isExists INT

		SET @sExportPath = '''+ @sExportPath +'''

		DECLARE @tmp_file TABLE
		(
			RowID INT IDENTITY(1,1),
			rData NVARCHAR(MAX)
		)

		IF OBJECT_ID(''tempdb..#tmp_SourceName'') IS NOT NULL DROP TABLE #tmp_SourceName

		SELECT * INTO #tmp_SourceName FROM ' + @Local_DB_Name +'.sys.objects WHERE type IN ('''+ @sFuncType +''')  AND is_ms_shipped=0 AND 
			(name NOT LIKE ''%2015%'' AND name NOT LIKE ''%2016%'' AND name NOT LIKE ''%2017%'' AND name NOT LIKE ''%2018%'' 
			AND name NOT LIKE ''%2019%'' AND name NOT LIKE ''%2020%''AND name NOT LIKE ''%2014%'' AND name NOT LIKE ''%2013%''
			AND name NOT LIKE ''%2012%'' AND name NOT LIKE ''%2011%'' AND name NOT LIKE ''%2010%'' AND name NOT LIKE ''%2009%'')
			AND name NOT IN (''sp_alterdiagram'',''sp_creatediagram'',''sp_dropdiagram'',''sp_helpdiagrams'',''sp_renamediagram'',''sp_upgraddiagrams'')
		ORDER BY name

		SELECT ''SOURCE CODE GENERATE''
		
		DECLARE CUR_tmp_file CURSOR LOCAL FOR
			SELECT name FROM #tmp_SourceName 

		OPEN CUR_tmp_file
		FETCH NEXT FROM CUR_tmp_file INTO @rName
		WHILE( @@FETCH_STATUS = 0)
		BEGIN
			DELETE FROM @tmp_file
			WAITFOR DELAY ''00:00:00:10''

			INSERT INTO @tmp_file(rData)
			EXEC master.dbo.sp_GenSPSourceCode '''+ @Local_DB_Name +''',@rName

			SET @sSource = ''''
			SELECT @sSource = COALESCE(@sSource + '''', '''') + rData FROM @tmp_file ORDER BY RowID

			SET @OLE = 0
			SET @FileID = 0
			
			SET @File_Path = @sExportPath + ''\'' + @rName  + ''.sql''
			
			DECLARE @Command CHAR(1000)
			SET @Command = ''DIR "''+ @File_Path +''" /B''

			EXEC @isExists = XP_CMDSHELL @Command, NO_OUTPUT
			IF (@isExists = 1)
			BEGIN
				
				EXECUTE sp_OACreate ''Scripting.FileSystemObject'', @OLE OUT
				EXECUTE sp_OAMethod @OLE, ''OpenTextFile'', @FileID OUT, @File_Path, 8, 1
				EXECUTE sp_OAMethod @FileID, ''WriteLine'', Null, @sSource
				EXECUTE sp_OAMethod @FileID, ''Close'', Null, Null
				EXECUTE sp_OADestroy @FileID
			END
			

			FETCH NEXT FROM CUR_tmp_file INTO @rName
		END
		CLOSE CUR_tmp_file
		DEALLOCATE CUR_tmp_file


		SELECT * FROM #tmp_SourceName

		'

		
		PRINT @sScript
		EXEC sp_executesql @sScript
	END
	IF (@TYPE = 'GEN_COMPARE_STORED_PROCEDURE_LINKSRV')
	BEGIN
		SET @sScript = '
		SET NOCOUNT ON;
		DECLARE @sSource_Old NVARCHAR(MAX)
		DECLARE @sSource_New NVARCHAR(MAX)
		DECLARE @OLE_Old INT
		DECLARE @FileID_Old INT
		DECLARE @File_Path_Old NVARCHAR(MAX)
		DECLARE @OLE_New INT
		DECLARE @FileID_New INT
		DECLARE @File_Path_New NVARCHAR(MAX)

		DECLARE @Diff_tmp_file TABLE
		(
			RowID INT IDENTITY(1,1),
			rSPName NVARCHAR(MAX),
			rData NVARCHAR(MAX)
		)

		DECLARE @Add_tmp_file TABLE
		(
			RowID INT IDENTITY(1,1),
			rSPName NVARCHAR(MAX),
			rData NVARCHAR(MAX)
		)

		DECLARE @New_tmp_file TABLE
		(
			RowID INT IDENTITY(1,1),
			rData NVARCHAR(MAX)
		)

		DECLARE @Old_tmp_file TABLE
		(
			RowID INT IDENTITY(1,1),
			rData NVARCHAR(MAX)
		)
		DECLARE @rName NVARCHAR(100)
		DECLARE @sExportPath NVARCHAR(MAX)

		SET @sExportPath = '''+ @sExportPath +'''

		IF OBJECT_ID(''tempdb..#tmp_SourceName'') IS NOT NULL DROP TABLE #tmp_SourceName
		IF OBJECT_ID(''tempdb..#tmp_TargetName'') IS NOT NULL DROP TABLE #tmp_TargetName
		
		SELECT * INTO #tmp_SourceName FROM
		'+ @LinkSrv_Name + '.' + @NEW_DB_Name +'.sys.objects WHERE type IN (''P'',''V'',''FN'')  AND is_ms_shipped=0 AND 
			(name NOT LIKE ''%2015%'' AND name NOT LIKE ''%2016%'' AND name NOT LIKE ''%2017%'' AND name NOT LIKE ''%2018%'' 
			AND name NOT LIKE ''%2019%'' AND name NOT LIKE ''%2020%''AND name NOT LIKE ''%2014%'' AND name NOT LIKE ''%2013%''
			AND name NOT LIKE ''%2012%'' AND name NOT LIKE ''%2011%'' AND name NOT LIKE ''%2010%'' AND name NOT LIKE ''%2009%'')
			AND name NOT IN (''sp_alterdiagram'',''sp_creatediagram'',''sp_dropdiagram'',''sp_helpdiagrams'',''sp_renamediagram'',''sp_upgraddiagrams'')
	
		SELECT * INTO #tmp_TargetName FROM
		'+ @OLD_DB_Name +'.sys.objects WHERE type IN (''P'',''V'',''FN'') AND is_ms_shipped=0
		
		SELECT ''STORED PROCEDURE DIFF''
		
		DECLARE CUR_tmp_file CURSOR LOCAL FOR
			SELECT c1.name FROM #tmp_SourceName c1 INNER JOIN #tmp_TargetName c2 ON c1.name = c2.name

		OPEN CUR_tmp_file
		FETCH NEXT FROM CUR_tmp_file INTO @rName
		WHILE( @@FETCH_STATUS = 0)
		BEGIN
			DELETE FROM @New_tmp_file
			DELETE FROM @Old_tmp_file

			INSERT INTO @New_tmp_file(rData)
			EXEC ['+ @LinkSrv_Name +'].master.dbo.sp_GenSPSourceCode '''+ @NEW_DB_Name +''',@rName

			INSERT INTO @Old_tmp_file(rData)
			EXEC master.dbo.sp_GenSPSourceCode '''+ @OLD_DB_Name +''',@rName
			 
			DECLARE @sOld NVARCHAR(MAX)
			DECLARE @sNew NVARCHAR(MAX)

			DELETE FROM  @New_tmp_file WHERE RowID < (SELECT MIN(RowID) FROM @New_tmp_file WHERE rData LIKE ''%CREATE%'' )
			DELETE FROM  @Old_tmp_file WHERE RowID < (SELECT MIN(RowID) FROM @Old_tmp_file WHERE rData LIKE ''%CREATE%'' )

			SELECT @sOld = COALESCE(@sOld + '''', '''') + rData FROM @Old_tmp_file ORDER BY RowID
			SELECT @sNew = COALESCE(@sNew + '''', '''') + rData FROM @New_tmp_file ORDER BY RowID

			SET @sOld = REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(@sOld,CHAR(10),''''),CHAR(13),''''),CHAR(32),''''),CHAR(91),''''),CHAR(93),'''')
			SET @sNew = REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(@sNew,CHAR(10),''''),CHAR(13),''''),CHAR(32),''''),CHAR(91),''''),CHAR(93),'''')
			
			SET @sOld = (SELECT SUBSTRING(@sOld,CHARINDEX(@rName,@sOld,1),LEN(@sOld)))
			SET @sNew = (SELECT SUBSTRING(@sNew,CHARINDEX(@rName,@sNew,1),LEN(@sNew)))

			IF (@sOld != @sNew)
			BEGIN
				SET @sOld = REPLACE(@sOld,''dbo.'','''')
				SET @sNew = REPLACE(@sNew,''dbo.'','''')

				SET @sOld = REPLACE(REPLACE(@sOld,''['',''''),'']'','''')
				SET @sNew = REPLACE(REPLACE(@sNew,''['',''''),'']'','''')
				SET @sOld = REPLACE(REPLACE(@sOld,''CREATEPROCEDUREdbo.'',''''),''CREATEPROCEDURE'','''')
				SET @sNew = REPLACE(REPLACE(@sNew,''CREATEPROCEDUREdbo.'',''''),''CREATEPROCEDURE'','''')
				IF (@sOld != @sNew)
				BEGIN			
					SET @sSource_Old = ''''
					SET @sSource_New = ''''

					SELECT @sSource_Old = COALESCE(@sSource_Old + '''', '''') + rData FROM @Old_tmp_file ORDER BY RowID
					SELECT @sSource_New = COALESCE(@sSource_New + '''', '''') + rData FROM @New_tmp_file ORDER BY RowID

					SET @File_Path_Old = @sExportPath + ''\'' + @rName + ''_OLD''
					SET @File_Path_New = @sExportPath + ''\'' + @rName + ''_NEW''

					SET @OLE_Old = 0
					SET @OLE_New = 0
					SET @FileID_Old = 0
					SET @FileID_New = 0

					
					EXECUTE sp_OACreate ''Scripting.FileSystemObject'', @OLE_Old OUT
					EXECUTE sp_OAMethod @OLE_Old, ''OpenTextFile'', @FileID_Old OUT, @File_Path_Old, 8, 1
					EXECUTE sp_OAMethod @FileID_Old, ''WriteLine'', Null, @sSource_Old
					EXECUTE sp_OAMethod @FileID_Old, ''Close'', Null, Null
					EXECUTE sp_OADestroy @FileID_Old

					EXECUTE sp_OACreate ''Scripting.FileSystemObject'', @OLE_New OUT
					EXECUTE sp_OAMethod @OLE_New, ''OpenTextFile'', @FileID_New OUT, @File_Path_New, 8, 1
					EXECUTE sp_OAMethod @FileID_New, ''WriteLine'', Null, @sSource_New
					EXECUTE sp_OAMethod @FileID_New, ''Close'', Null, Null
					EXECUTE sp_OADestroy @FileID_New
 
					INSERT INTO @Diff_tmp_file (rSPName,rData)
					SELECT @rName, rData FROM @New_tmp_file ORDER BY RowID
				
					INSERT INTO @Diff_tmp_file (rSPName,rData) VALUES (@rName,''GO'')
					INSERT INTO @Add_tmp_file (rSPName,rData) VALUES (@rName,'' '')
				END
			END

			DELETE FROM @New_tmp_file
			DELETE FROM @Old_tmp_file

			FETCH NEXT FROM CUR_tmp_file INTO @rName
		END
		CLOSE CUR_tmp_file
		DEALLOCATE CUR_tmp_file

		SELECT * FROM @Diff_tmp_file ORDER BY RowID
		SELECT rSPName FROM @Diff_tmp_file GROUP BY rSPName


		DECLARE CUR_Add_tmp_file CURSOR LOCAL FOR
			SELECT c1.name FROM #tmp_SourceName c1 WHERE LTRIM(RTRIM(c1.name)) NOT IN (SELECT LTRIM(RTRIM(c2.name)) FROM #tmp_TargetName c2)

		OPEN CUR_Add_tmp_file
		FETCH NEXT FROM CUR_Add_tmp_file INTO @rName
		WHILE( @@FETCH_STATUS = 0)
		BEGIN 
			DELETE FROM @New_tmp_file

			INSERT INTO @New_tmp_file(rData)
			EXEC '+ @LinkSrv_Name +'.master.dbo.sp_GenSPSourceCode '''+ @NEW_DB_Name +''',@rName
			INSERT INTO @Add_tmp_file (rSPName,rData)
			SELECT @rName, rData FROM @New_tmp_file ORDER BY RowID

			INSERT INTO @Add_tmp_file (rSPName,rData) VALUES (@rName,''GO'')
			INSERT INTO @Add_tmp_file (rSPName,rData) VALUES (@rName,'' '')
 
			FETCH NEXT FROM CUR_Add_tmp_file INTO @rName
		END
		CLOSE CUR_Add_tmp_file
		DEALLOCATE CUR_Add_tmp_file

		SELECT * FROM @Add_tmp_file ORDER BY RowID
		SELECT c1.name FROM #tmp_SourceName c1 WHERE c1.name NOT IN (SELECT c2.name FROM #tmp_TargetName c2)'
		
		PRINT @sScript
		EXEC sp_executesql @sScript
	END
	IF (@TYPE = 'EXECUTE_BATCH_SQL_FILE')
	BEGIN
		SET @sScript = '
			  DECLARE @BackupDirectory SYSNAME = '''+ @sImportPath +'''
			  DECLARE @pFilePath NVARCHAR(MAX)

			  SET @pFilePath =  '''+ @sImportPath +''' 

				DECLARE @sqlCommand VARCHAR(1000)
				DECLARE @JobName NVARCHAR(1000)

				DECLARE @tbl_Job TABLE
				(
					rData NVARCHAR(MAX)
				)
			  IF OBJECT_ID(''tempdb..#DirTree'') IS NOT NULL
				DROP TABLE #DirTree

			  CREATE TABLE #DirTree (
				Id int identity(1,1),
				SubDirectory nvarchar(255),
				Depth smallint,
				FileFlag bit,
				ParentDirectoryID int
			   )

			   INSERT INTO #DirTree (SubDirectory, Depth, FileFlag)
			   EXEC master..xp_dirtree @BackupDirectory, 10, 1

			   UPDATE #DirTree
			   SET ParentDirectoryID = (
				SELECT MAX(Id) FROM #DirTree d2
				WHERE Depth = d.Depth - 1 AND d2.Id < d.Id
			   )
			   FROM #DirTree d

			  DECLARE 
				@ID INT,
				@BackupFile VARCHAR(MAX),
				@Depth TINYINT,
				@FileFlag BIT,
				@ParentDirectoryID INT,
				@wkSubParentDirectoryID INT,
				@wkSubDirectory VARCHAR(MAX)

			  DECLARE @BackupFiles TABLE
			  (
				FileNamePath VARCHAR(MAX),
				TransLogFlag BIT,
				BackupFile VARCHAR(MAX),    
				DatabaseName VARCHAR(MAX)
			  )

			  DECLARE FileCursor CURSOR LOCAL FORWARD_ONLY FOR
			  SELECT * FROM #DirTree WHERE FileFlag = 1

			  OPEN FileCursor
			  FETCH NEXT FROM FileCursor INTO 
				@ID,
				@BackupFile,
				@Depth,
				@FileFlag,
				@ParentDirectoryID  

			  SET @wkSubParentDirectoryID = @ParentDirectoryID

			  WHILE @@FETCH_STATUS = 0
			  BEGIN
				--loop to generate path in reverse, starting with backup file then prefixing subfolders in a loop
				WHILE @wkSubParentDirectoryID IS NOT NULL
				BEGIN
				  SELECT @wkSubDirectory = SubDirectory, @wkSubParentDirectoryID = ParentDirectoryID 
				  FROM #DirTree 
				  WHERE ID = @wkSubParentDirectoryID

				  SELECT @BackupFile = @wkSubDirectory + ''\'' + @BackupFile
				END

				--no more subfolders in loop so now prefix the root backup folder
				SELECT @BackupFile = @BackupFile

				--put backupfile into a table and then later work out which ones are log and full backups  
				INSERT INTO @BackupFiles (FileNamePath) VALUES(@BackupFile)

				DELETE FROM @tbl_Job
				SET @sqlCommand = ''sqlcmd -i '' + @pFilePath + @BackupFile

				PRINT @sqlCommand
				INSERT INTO @tbl_Job(rData)
				EXEC master..xp_cmdshell @sqlCommand

				 IF (EXISTS(SELECT * FROM @tbl_Job WHERE rData LIKE ''%already exists%''))
				 BEGIN
					SET @JobName = (SELECT  SUBSTRING(rData,CHARINDEX('''''''',rData,0) + 1 ,LEN(rData) - (CHARINDEX('''''''',REVERSE(rData),0) + CHARINDEX('''''''',rData,0)))   FROM @tbl_Job WHERE rData LIKE ''%already exists%'')
					SELECT @JobName,@sqlCommand
			--		EXEC sp_delete_job @job_name =@JobName
			--		EXEC master..xp_cmdshell @sqlCommand
				 END
	
				FETCH NEXT FROM FileCursor INTO 
				  @ID,
				  @BackupFile,
				  @Depth,
				  @FileFlag,
				  @ParentDirectoryID 

				SET @wkSubParentDirectoryID = @ParentDirectoryID      
			  END

			  CLOSE FileCursor
			  DEALLOCATE FileCursor'

		PRINT @sScript
		EXEC sp_executesql @sScript

	END
	IF (@TYPE = 'GEN_COLUMN_UPDATE_SCRIPT')
	BEGIN
		SET @sScript = '

		IF OBJECT_ID(''tempdb..#tmp_SourceName'') IS NOT NULL DROP TABLE #tmp_SourceName
		IF OBJECT_ID(''tempdb..#tmp_TargetName'') IS NOT NULL DROP TABLE #tmp_TargetName

		SELECT t.name AS TableName ,c.* INTO #tmp_SourceName FROM
		'+ @NEW_DB_Name +'.sys.columns c INNER JOIN 
		'+ @NEW_DB_Name +'.sys.tables t ON c.object_id = t.object_id INNER JOIN 
		'+ @NEW_DB_Name +'.sys.types ty ON c.system_type_id = ty.system_type_id
		WHERE t.name IS NOT NULL AND ty.name NOT IN ( ''sysname'',''dtproperties'') AND t.name NOT IN ( ''sysname'',''dtproperties'',''sysdiagrams'')
	
		SELECT t.name AS TableName ,c.* INTO #tmp_TargetName FROM
		'+ @OLD_DB_Name +'.sys.columns c INNER JOIN 
		'+ @OLD_DB_Name +'.sys.tables t ON c.object_id = t.object_id INNER JOIN 
		'+ @OLD_DB_Name +'.sys.types ty ON c.system_type_id = ty.system_type_id
		WHERE t.name IS NOT NULL AND ty.name NOT IN ( ''sysname'',''dtproperties'') AND t.name NOT IN ( ''sysname'',''dtproperties'',''sysdiagrams'')
		
		SELECT ''COLUMN DIFF''
		SELECT c1.TableName,c1.name ,c1.system_type_id AS New_Column_Type,c1.max_length AS New_Column_length,
		c2.system_type_id AS Old_Column_Type,c2.max_length AS Old_Column_length ,type1.name,type2.DATA_TYPE,type2.CHARACTER_MAXIMUM_LENGTH,

		''ALTER TABLE '' + c1.TableName + '' ALTER COLUMN ''+ c1.name + '' ''  +   (CASE WHEN NUMERIC_PRECISION IS NOT NULL  THEN
			DATA_TYPE  + ''('' + CONVERT(NVARCHAR(MAX),NUMERIC_PRECISION) + '','' + CONVERT(NVARCHAR(MAX),ISNULL(NUMERIC_SCALE,0)) + '')''
				ELSE
					CASE WHEN CHARACTER_MAXIMUM_LENGTH IS NOT NULL THEN
						DATA_TYPE + ''('' + CONVERT(NVARCHAR(MAX),CHARACTER_MAXIMUM_LENGTH) + '')''
					ELSE
						DATA_TYPE  
					END
				END
			)

		FROM #tmp_SourceName c1 
			INNER JOIN #tmp_TargetName c2 ON c1.name = c2.name AND c1.TableName = c2.TableName 
			INNER JOIN sys.types type1 ON c1.system_type_id = type1.system_type_id
			LEFT JOIN '+ @NEW_DB_Name +'.INFORMATION_SCHEMA.COLUMNS type2 ON type2.TABLE_NAME = c1.TableName AND type2.COLUMN_NAME = c1.name
		WHERE c1.max_length !=  c2.max_length  OR c1.user_type_id != c2.user_type_id

		SELECT ''COLUMN NOT INSIDE''
		SELECT  c1.TableName,c1.name ,c1.system_type_id AS New_Column_Type,c1.max_length AS New_Column_length,
		c2.system_type_id AS Old_Column_Type,c2.max_length AS Old_Column_length ,
		''ALTER TABLE '' + c1.TableName + '' ADD '' + c1.name + '' '' +  (CASE WHEN NUMERIC_PRECISION IS NOT NULL  THEN
			DATA_TYPE  + ''('' + CONVERT(NVARCHAR(MAX),NUMERIC_PRECISION) + '','' + CONVERT(NVARCHAR(MAX),ISNULL(NUMERIC_SCALE,0)) + '')''
				ELSE
					CASE WHEN CHARACTER_MAXIMUM_LENGTH IS NOT NULL THEN
						DATA_TYPE + ''('' + CONVERT(NVARCHAR(MAX),CHARACTER_MAXIMUM_LENGTH) + '')''
					ELSE
						DATA_TYPE  
					END
				END
			)
		FROM #tmp_SourceName c1 
		LEFT JOIN #tmp_TargetName c2 ON c1.TableName = c2.TableName AND c1.name = c2.name 
		INNER JOIN sys.types type1 ON c1.system_type_id = type1.system_type_id
		LEFT JOIN '+ @NEW_DB_Name +'.INFORMATION_SCHEMA.COLUMNS type2 ON type2.TABLE_NAME = c1.TableName AND type2.COLUMN_NAME = c1.name
			WHERE c2.name IS NULL AND c1.TableName IN (SELECT c3.TableName FROM #tmp_TargetName c3)
		GROUP BY c1.TableName,c1.name ,c1.system_type_id,c1.max_length,c2.system_type_id,c2.max_length,NUMERIC_PRECISION,NUMERIC_SCALE,CHARACTER_MAXIMUM_LENGTH,DATA_TYPE

		SELECT ''TABLE NOT IN SOURCE''
		SELECT c1.* FROM #tmp_TargetName c1 WHERE c1.TableName NOT IN (SELECT c2.TableName FROM #tmp_SourceName c2)

		SELECT  ''ALTER INDEX ''+ i.[name] +'' ON ''+ t.[name] +''  DISABLE'' AS DisableIndex,
				''ALTER INDEX ''+ i.[name] +'' ON ''+ t.[name] +''  REBUILD'' AS EnableIndex,
				t.object_id, 
			i.[name] as index_name,
			substring(column_names, 1, len(column_names)-1) as [columns],
			schema_name(t.schema_id) + ''.'' + t.[name] as table_view
		FROM '+ @OLD_DB_Name +'.sys.objects t
		INNER JOIN '+ @OLD_DB_Name +'.sys.indexes i
			on t.object_id = i.object_id
		CROSS APPLY (SELECT col.[name] + '', ''
						FROM '+ @OLD_DB_Name +'.sys.index_columns ic
							INNER JOIN '+ @OLD_DB_Name +'.sys.columns col
								ON ic.object_id = col.object_id
								AND ic.column_id = col.column_id
						WHERE ic.object_id = t.object_id
							AND ic.index_id = i.index_id
								ORDER BY key_ordinal
								FOR XML PATH('''')) D (column_names)
		WHERE t.is_ms_shipped <> 1 AND i.is_unique = 0 AND t.[type] = ''U''
		AND EXISTS (SELECT * FROM #tmp_TargetName c1 WHERE c1.object_id = t.object_id )
		AND index_id > 0
		'
		PRINT @sScript
		EXEC sp_executesql @sScript
	END
	IF (@TYPE = 'GEN_PREMISSION')
	BEGIN
		select name as username,
			   create_date,
			   modify_date,
			   type_desc as type,
			   authentication_type_desc as authentication_type
		from sys.database_principals
		where type not in ('A', 'G', 'R', 'X')
			  and sid is not null
			  and name != 'guest'
		order by username;

		SET @sScript  = '
		SELECT '''+ @Local_DB_Name +''' AS DBName,
		  (
			dp.state_desc + '' '' +
			dp.permission_name collate latin1_general_cs_as + 
			'' ON '' + ''['' + s.name + '']'' + ''.'' + ''['' + o.name + '']'' +
			'' TO '' + ''['' + dpr.name + '']''
		  ) AS GRANT_STMT
		FROM  '+ @Local_DB_Name +'.sys.database_permissions AS dp
		  INNER JOIN '+ @Local_DB_Name +'.sys.objects AS o ON dp.major_id=o.object_id
		  INNER JOIN '+ @Local_DB_Name +'.sys.schemas AS s ON o.schema_id = s.schema_id
		  INNER JOIN '+ @Local_DB_Name +'.sys.database_principals AS dpr ON dp.grantee_principal_id=dpr.principal_id
		WHERE 1=1 AND dpr.name IN ('''+ @sUSER +''') ORDER BY dpr.name'
		
		PRINT @sScript
		EXEC sp_executesql @sScript
	END
END

 
GO
/****** Object:  StoredProcedure [dbo].[sp_DEBUG_CHECKING]    Script Date: 5/17/2022 9:57:52 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
CREATE PROCEDURE [dbo].[sp_DEBUG_CHECKING]
(
@pXML XML,
@pOutXML XML OUTPUT
)
AS
BEGIN
/*
------------------------------------------------------------------------
--GET COMPARE DETAIL WITH LINK SERVER
DECLARE @pRtnXML XML
EXEC master.dbo.[SP_DEBUG_CHECKING] '
<ROOT>
		<TYPE>COMPARE_TABLE_DATA</TYPE>
		<SOURCE_DB>DSBDB</SOURCE_DB>
		<TARGET_DB>DSBDB</TARGET_DB>
		<SOURCE_TABLE>TB_UT2CIF</SOURCE_TABLE>
		<TARGET_TABLE>TB_UT2CIF_CBP2</TARGET_TABLE>
		<EXCLUDE_COLUMN>CUSTID,SETTLEAC,PROCESSINGDATE</EXCLUDE_COLUMN>
		<REPLACE_SPACE_COLUMN>CUSTID,SETTLEAC</REPLACE_SPACE_COLUMN>
		<ORDER_COLUMN>ACCOUNT</ORDER_COLUMN>
</ROOT>',@pRtnXML OUTPUT
SELECT @pRtnXML

DECLARE @pRtnXML XML
EXEC master.dbo.[SP_DEBUG_CHECKING] '
<ROOT>
		<TYPE>COMPARE_TABLE_DATA</TYPE>
		<SOURCE_DB>DSBDB</SOURCE_DB>
		<TARGET_DB>DSBDB</TARGET_DB>
		<SOURCE_TABLE>TB_UT2CIF_CHKCLOSE</SOURCE_TABLE>
		<TARGET_TABLE>TB_UT2CIF_CHKCLOSE_CBP2</TARGET_TABLE>
		<EXCLUDE_COLUMN>CYCLEDATE,CUSTID</EXCLUDE_COLUMN>
</ROOT>',@pRtnXML OUTPUT
SELECT @pRtnXML

DECLARE @pRtnXML XML
EXEC master.dbo.[SP_DEBUG_CHECKING] '
<ROOT>
		<TYPE>COMPARE_TABLE_DATA</TYPE>
		<SOURCE_DB>DSBDB</SOURCE_DB>
		<TARGET_DB>DSBDB</TARGET_DB>
		<SOURCE_TABLE>TB_UT2CIF_SETTLEAC</SOURCE_TABLE>
		<TARGET_TABLE>TB_UT2CIF_SETTLEAC_CBP2</TARGET_TABLE>
		<EXCLUDE_COLUMN>CYCLEDATE</EXCLUDE_COLUMN>
</ROOT>',@pRtnXML OUTPUT
SELECT @pRtnXML

DECLARE @pRtnXML XML
EXEC master.dbo.[SP_DEBUG_CHECKING] '
<ROOT>
		<TYPE>COMPARE_TABLE_DATA</TYPE>
		<SOURCE_DB>DSBDB</SOURCE_DB>
		<TARGET_DB>DSBDB</TARGET_DB>
		<SOURCE_TABLE>TB_UT2CIF_TEMP</SOURCE_TABLE>
		<TARGET_TABLE>TB_UT2CIF_TEMP_CBP2</TARGET_TABLE>
		<EXCLUDE_COLUMN>CUSTID,SETTLEAC,PROCESSINGDATE</EXCLUDE_COLUMN>
		<REPLACE_SPACE_COLUMN>CUSTID,SETTLEAC</REPLACE_SPACE_COLUMN>
		<ORDER_COLUMN>ACCOUNT</ORDER_COLUMN>
</ROOT>',@pRtnXML OUTPUT
SELECT @pRtnXML
------------------------------------------------------------------------
*/
	DECLARE @tbl_SCRIPT TABLE
	(
		rData NVARCHAR(MAX)
	)
	DECLARE @TYPE NVARCHAR(100)
	DECLARE @sSOURCE_DB NVARCHAR(100)
	DECLARE @sTARGET_DB NVARCHAR(100)
	DECLARE @sSOURCE_TABLE NVARCHAR(100)
	DECLARE @sTARGET_TABLE NVARCHAR(100)
	DECLARE @sSCRIPT NVARCHAR(MAX)
	DECLARE @sColumn NVARCHAR(MAX)
	DECLARE @sFilter NVARCHAR(MAX)
	DECLARE @sEXCLUDE_COLUMN NVARCHAR(MAX)
	DECLARE @sORDER_COLUMN NVARCHAR(MAX)
	DECLARE @sREPLACE_SPACE_COLUMN NVARCHAR(MAX)

	SELECT 
		@TYPE			= T.C.value('TYPE[1]', 'NVARCHAR(100)'),
		@sSOURCE_DB		= T.C.value('SOURCE_DB[1]', 'NVARCHAR(100)'),
		@sTARGET_DB		= T.C.value('TARGET_DB[1]', 'NVARCHAR(100)'),
		@sSOURCE_TABLE	= T.C.value('SOURCE_TABLE[1]', 'NVARCHAR(100)'),
		@sTARGET_TABLE	= T.C.value('TARGET_TABLE[1]', 'NVARCHAR(100)'),
		@sEXCLUDE_COLUMN= T.C.value('EXCLUDE_COLUMN[1]', 'NVARCHAR(300)'),
		@sORDER_COLUMN	= T.C.value('ORDER_COLUMN[1]', 'NVARCHAR(300)'),
		@sREPLACE_SPACE_COLUMN  = T.C.value('REPLACE_SPACE_COLUMN[1]', 'NVARCHAR(300)')
		FROM @pXML.nodes('/ROOT') T(C)

	IF (@sORDER_COLUMN IS NULL)
	BEGIN
		SET @sORDER_COLUMN = '1'
	END

	IF (@TYPE = 'COMPARE_TABLE_DATA')
	BEGIN
		SET @sSCRIPT = '
		DECLARE @strRtn NVARCHAR(MAX)
		DECLARE @sFilter NVARCHAR(MAX)
			
		SET @sFilter = ''msrepl_tran_version,'' + ''' + ISNULL(@sEXCLUDE_COLUMN,'') + '''
		SET @strRtn =(SELECT COLUMN_NAME  + '',''
				FROM '+ @sSOURCE_DB +'.INFORMATION_SCHEMA.COLUMNS
				WHERE TABLE_NAME='''+ @sSOURCE_TABLE + '''
				AND COLUMN_NAME NOT IN (SELECT Item FROM dbo.fnSplit(@sFilter,'',''))
				 FOR XML PATH(''''))
		SET @strRtn = SUBSTRING(@strRtn,1,LEN(@strRtn)-1)
		
		SELECT @strRtn
		'
		PRINT @sSCRIPT

		 INSERT INTO @tbl_SCRIPT	
		 EXEC sp_executesql @sSCRIPT
		 SET @sColumn = (SELECT TOP 1 rData FROM @tbl_SCRIPT)
		 DELETE FROM @tbl_SCRIPT
		 
		 SET @sFilter = (SELECT ' ISNULL(c1.' + Item + ',0) = ISNULL(c2.' + Item + ',0) AND' FROM dbo.fnSplit(@sColumn,',') FOR XML PATH(''))
		 SET @sFilter = SUBSTRING(@sFilter,1,LEN(@sFilter)-3)

		 IF (@sREPLACE_SPACE_COLUMN IS NOT NULL)
		 BEGIN
			SET @sFilter = @sFilter + (SELECT ' AND REPLACE(ISNULL(c1.' + Item + ',''''),'' '','''') = REPLACE(ISNULL(c2.' + Item + ',''''),'' '','''')' FROM dbo.fnSplit(@sREPLACE_SPACE_COLUMN,',') FOR XML PATH(''))
		 END

		SET @sSCRIPT = '
				IF OBJECT_ID(''tempdb..#tmp_c1'') IS NOT NULL DROP TABLE #tmp_c1
				IF OBJECT_ID(''tempdb..#tmp_c2'') IS NOT NULL DROP TABLE #tmp_c2
				SELECT * INTO #tmp_c1 FROM ' + @sSOURCE_DB + '.dbo.' + @sSOURCE_TABLE + '
				SELECT * INTO #tmp_c2 FROM ' + @sTARGET_DB + '.dbo.' + @sTARGET_TABLE + '
		
				SELECT * FROM #tmp_c1 c1 WHERE NOT EXISTS (
				SELECT c2.* FROM #tmp_c2 c2 WHERE ' + @sFilter + ') ORDER BY '+ @sORDER_COLUMN +'


				IF OBJECT_ID(''tempdb..#tmp_c1'') IS NOT NULL DROP TABLE #tmp_c1
				IF OBJECT_ID(''tempdb..#tmp_c2'') IS NOT NULL DROP TABLE #tmp_c2
				'
		PRINT @sSCRIPT

		EXEC sp_executesql @sSCRIPT

		SET @sSCRIPT = '
				IF OBJECT_ID(''tempdb..#tmp_c1'') IS NOT NULL DROP TABLE #tmp_c1
				IF OBJECT_ID(''tempdb..#tmp_c2'') IS NOT NULL DROP TABLE #tmp_c2
				SELECT * INTO #tmp_c1 FROM ' + @sSOURCE_DB + '.dbo.' + @sSOURCE_TABLE + '
				SELECT * INTO #tmp_c2 FROM ' + @sTARGET_DB + '.dbo.' + @sTARGET_TABLE + '
		
				SELECT * FROM #tmp_c2  c2 WHERE NOT EXISTS (
				SELECT c1.* FROM #tmp_c1 c1 WHERE ' + @sFilter + ') ORDER BY '+ @sORDER_COLUMN +'

				IF OBJECT_ID(''tempdb..#tmp_c1'') IS NOT NULL DROP TABLE #tmp_c1
				IF OBJECT_ID(''tempdb..#tmp_c2'') IS NOT NULL DROP TABLE #tmp_c2
				'

		EXEC sp_executesql @sSCRIPT
		 
		SET @sSCRIPT = 'SELECT o.NAME, i.rowcnt , i2.rowcnt 
				FROM '+ @sSOURCE_DB +'.dbo.sysindexes AS i 
					INNER JOIN '+ @sSOURCE_DB +'.dbo.sysobjects AS o ON i.id = o.id 
					INNER JOIN '+ @sTARGET_DB +'.dbo.sysobjects AS o2 ON o2.NAME = o.NAME
					INNER JOIN '+ @sTARGET_DB +'.dbo.sysindexes AS i2 ON i2.id = o2.id 
					WHERE o2.NAME = '''+ @sTARGET_TABLE +''' AND i2.indid < 2  AND i.indid < 2 
					ORDER BY o.NAME'

		EXEC sp_executesql @sSCRIPT
	END
END

 
GO
/****** Object:  StoredProcedure [dbo].[sp_FileDateConvert]    Script Date: 5/17/2022 9:57:52 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_FileDateConvert]
(
@pXML XML,
@pOutXML XML OUTPUT
)
AS
/*
------------------------------------------------------------------------
--GET COMPARE DETAIL WITH LINK SERVER
DECLARE @pRtnXML XML
EXEC [sp_FileDateConvert] '
<ROOT>
		<TYPE>CONVERT_DATE</TYPE>
		<FROM_LOC>C:\TEMP\FROMFILE</FROM_LOC>
		<TO_LOC>C:\TEMP\TOFILE</TO_LOC>
		<FILE_NAME>ABC.X99</FILE_NAME>
</ROOT>',@pRtnXML OUTPUT
SELECT @pRtnXML


DECLARE @pRtnXML XML
EXEC [sp_FileDateConvert] '
<ROOT>
		<TYPE>REPLACE_BY_POSITION</TYPE>
		<FROM_LOC>C:\UTBATCH\DSB\CSS2UT2RBMM_UTBAL_IBS\</FROM_LOC>
		<TO_LOC>D:\migration\20210726\TOFILE\</TO_LOC>
		<FROM_FILE_NAME>DAH13A - Copy.txt</FROM_FILE_NAME>
		<TO_FILE_NAME>DAH13A - Copy.txt_XDD</TO_FILE_NAME>
		<FROM_DATE>2021/02/22</FROM_DATE>
		<TO_DATE>2021/04/11</TO_DATE>
		<KEYINFO>
			<FIRSTROWKEY>0</FIRSTROWKEY>
			<FR_REP_POS>13</FR_REP_POS>
		</KEYINFO>
</ROOT>',@pRtnXML OUTPUT
SELECT @pRtnXML
*/
BEGIN
	EXEC sp_configure 'Ole Automation Procedures', 1
	-- Configuration option 'Ole Automation Procedures' changed from 0 to 1. Run the RECONFIGURE statement to install.
	RECONFIGURE
	DECLARE @sScript NVARCHAR(MAX)
	DECLARE @sScript_DATE NVARCHAR(MAX)
	DECLARE @TYPE NVARCHAR(100)
	DECLARE @TO_LOC NVARCHAR(200)
	DECLARE @FROM_LOC NVARCHAR(200)
	DECLARE @FROM_FILE_NAME NVARCHAR(200)
	DECLARE @TO_FILE_NAME NVARCHAR(200)
	DECLARE @FROM_DATE DATETIME
	DECLARE @TO_DATE DATETIME
	DECLARE @FROM_DATE_FORMAT_XDD NVARCHAR(30)
	DECLARE @FROM_DATE_FORMAT_YYYYMMDD NVARCHAR(8)
	DECLARE @FROM_DATE_FORMAT_YYYYMM NVARCHAR(6)
	DECLARE @FROM_DATE_FORMAT_MM NVARCHAR(6)
	DECLARE @TO_DATE_FORMAT_XDD NVARCHAR(30)
	DECLARE @TO_DATE_FORMAT_YYYYMMDD NVARCHAR(8)
	DECLARE @TO_DATE_FORMAT_YYYYMM NVARCHAR(6)
	DECLARE @TO_DATE_FORMAT_MM NVARCHAR(6)
	DECLARE @FIRSTROWKEY NVARCHAR(10)
	DECLARE @FR_REP_POS INT

	SELECT 
		@TYPE			= T.C.value('TYPE[1]', 'NVARCHAR(100)'),
		@FROM_LOC		= T.C.value('FROM_LOC[1]', 'NVARCHAR(200)'),
		@TO_LOC			= T.C.value('TO_LOC[1]', 'NVARCHAR(200)'),
		@FROM_FILE_NAME	= T.C.value('FROM_FILE_NAME[1]', 'NVARCHAR(200)'),
		@TO_FILE_NAME	= T.C.value('TO_FILE_NAME[1]', 'NVARCHAR(200)'),
		@FROM_DATE		= T.C.value('FROM_DATE[1]', 'DATETIME'),
		@TO_DATE		= T.C.value('TO_DATE[1]', 'DATETIME')
		FROM @pXML.nodes('/ROOT') T(C)

	SELECT 
		@FIRSTROWKEY			= T.C.value('FIRSTROWKEY[1]', 'NVARCHAR(10)'),
		@FR_REP_POS		= T.C.value('FR_REP_POS[1]', 'INT') 
		FROM @pXML.nodes('/ROOT/KEYINFO') T(C)

	SET @TO_DATE_FORMAT_MM =  RIGHT('0' + CONVERT(NVARCHAR(MAX),MONTH(@TO_DATE)),2)
	SET @TO_DATE_FORMAT_XDD = CONVERT(NVARCHAR,CHAR(64 + MONTH(@TO_DATE))) +  RIGHT('0' + CONVERT(NVARCHAR(MAX),DAY(@TO_DATE)),2)
	SET @TO_DATE_FORMAT_YYYYMM = LEFT(CONVERT(NVARCHAR(MAX),@TO_DATE,112),6)
	SET @TO_DATE_FORMAT_YYYYMMDD = CONVERT(NVARCHAR(MAX),@TO_DATE,112)
	SET @FROM_DATE_FORMAT_MM =  RIGHT('0' + CONVERT(NVARCHAR(MAX),MONTH(@FROM_DATE)),2)
	SET @FROM_DATE_FORMAT_XDD = CONVERT(NVARCHAR,CHAR(64 + MONTH(@FROM_DATE))) +  RIGHT('0' + CONVERT(NVARCHAR(MAX),DAY(@FROM_DATE)),2)
	SET @FROM_DATE_FORMAT_YYYYMM = LEFT(CONVERT(NVARCHAR(MAX),@FROM_DATE,112),6)
	SET @FROM_DATE_FORMAT_YYYYMMDD = CONVERT(NVARCHAR(MAX),@FROM_DATE,112)

	IF (@FROM_DATE IS NOT NULL)
	BEGIN
		SET @FROM_FILE_NAME = REPLACE(@FROM_FILE_NAME,'[YYYYMMDD]',@FROM_DATE_FORMAT_YYYYMMDD)  --1
		SET @FROM_FILE_NAME = REPLACE(@FROM_FILE_NAME,'[YYYYMM]',@FROM_DATE_FORMAT_YYYYMM)	--2
		SET @FROM_FILE_NAME = REPLACE(@FROM_FILE_NAME,'[XDD]',@FROM_DATE_FORMAT_XDD)			--3
		SET @FROM_FILE_NAME = REPLACE(@FROM_FILE_NAME,'[MM]',@FROM_DATE_FORMAT_MM)			--3
	END

	IF (@TO_DATE IS NOT NULL)
	BEGIN	
		SET @TO_FILE_NAME = REPLACE(@TO_FILE_NAME,'[YYYYMMDD]',@TO_DATE_FORMAT_YYYYMMDD)	--1
		SET @TO_FILE_NAME = REPLACE(@TO_FILE_NAME,'[YYYYMM]',@TO_DATE_FORMAT_YYYYMM)		--2
		SET @TO_FILE_NAME = REPLACE(@TO_FILE_NAME,'[XDD]',@TO_DATE_FORMAT_XDD)			--3
		SET @TO_FILE_NAME = REPLACE(@TO_FILE_NAME,'[MM]',@TO_DATE_FORMAT_MM)		--2
	END

	SET @FROM_LOC = @FROM_LOC + @FROM_FILE_NAME
	SET @TO_LOC = @TO_LOC + @TO_FILE_NAME

	SELECT @TO_DATE_FORMAT_XDD,@TO_DATE_FORMAT_YYYYMM,@TO_DATE_FORMAT_YYYYMMDD,@FROM_DATE,@TO_DATE,@FROM_LOC,@TO_LOC
	
	IF (@TYPE = 'REPLACE_BY_POSITION')
	BEGIN
		SET @sScript_DATE = 'UPDATE #TMP_DATA SET rData = REPLACE(rData, SUBSTRING(rData,'+ CONVERT(NVARCHAR,@FR_REP_POS) +',8)  ,'''+ @TO_DATE_FORMAT_YYYYMMDD + ''')
							WHERE LEFT(rData,1) = ''' + @FIRSTROWKEY + ''''
	END
	IF (@TYPE = 'REPLACE_BY_DATEVALUE')
	BEGIN
		SET @sScript_DATE = 'UPDATE #TMP_DATA SET rData = REPLACE(rData,'''+ @FROM_DATE_FORMAT_YYYYMMDD + ''','''+ @TO_DATE_FORMAT_YYYYMMDD + ''' )
							WHERE LEFT(rData,1) = ''' + @FIRSTROWKEY + ''''
	END
	 
	 --ROWTERMINATOR = ''0x0A'',

	SET @sScript = '
	DECLARE @sSource NVARCHAR(MAX)
	DECLARE @OLE INT
	DECLARE @FileID INT
	DECLARE @File_Path NVARCHAR(MAX)
	DECLARE @isExists INT

	SET @File_Path = '''+ @TO_LOC +'''

	EXEC master.dbo.xp_fileexist '''+ @TO_LOC +''', 
	@isExists OUTPUT
	
	IF (@isExists = 1)
	BEGIN
		EXEC xp_cmdshell ''DEL '+ @TO_LOC +'''
	END

	IF OBJECT_ID(''tempdb..#TMP_DATA'') IS NOT NULL DROP TABLE #TMP_DATA
	CREATE TABLE #TMP_DATA
	(
		rData NVARCHAR(MAX) ,
		ID INT IDENTITY(1,1)   
	)

	BULK INSERT #TMP_DATA 
	FROM '''+ @FROM_LOC +'''  
	WITH (  
	DATAFILETYPE = ''char'',  
	FIELDTERMINATOR = '','',  
	ROWTERMINATOR = ''0x0A'',
	CODEPAGE=''65001'' ,  
	FORMATFILE = ''C:\TEMP\FILE_OUTPUT\FILE_DATE_FORMAT.xml''
	);  
	  
		' + @sScript_DATE + '

	SELECT @sSource = COALESCE(@sSource + CHAR(13), '''') + rData FROM #TMP_DATA ORDER BY ID
	 
	EXECUTE sp_OACreate ''Scripting.FileSystemObject'', @OLE OUT
	EXECUTE sp_OAMethod @OLE, ''OpenTextFile'', @FileID OUT, @File_Path, 8, 1
	EXECUTE sp_OAMethod @FileID, ''WriteLine'', Null, @sSource
	EXECUTE sp_OAMethod @FileID, ''Close'', Null, Null
	EXECUTE sp_OADestroy @FileID

	'
	
	PRINT @sScript
	EXEC sp_executesql @sScript

	PRINT 'START'
END
GO
/****** Object:  StoredProcedure [dbo].[sp_FileDateConvert_BATCH]    Script Date: 5/17/2022 9:57:52 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_FileDateConvert_BATCH]
AS
/*

PBMM
\\sitvpbdsrv03\ConnectDirect\CDDownload\IBS2PBMM\FXFORWARD.TXT
\\sitvpbdsrv03\ConnectDirect\CDDownload\IBS2PBMM\HLRA103.TXT
\\sitvpbdsrv03\ConnectDirect\CDDownload\PBMMSOD

RBMM
\\sitvpbdsrv03\ConnectDirect\CDDownload\RBMMSOD
\\sitvpbdsrv03\ConnectDirect\CDDownload\RBMMSOD\CMFIL013.MM
\\sitvpbdsrv03\ConnectDirect\CDDownload\IBS2RBMM\CMCIC025R_MM.TXT
\\sitvpbdsrv03\ConnectDirect\CDDownload\IBS2RBMM\CMQFO132.MM
\\sitvpbdsrv03\ConnectDirect\CDDownload\IBS2RBMM\CMFIL033.MM
\\sitvpbdsrv03\ConnectDirect\CDDownload\IBS2RBMM\CMFIC015.MM
\\sitvpbdsrv03\ConnectDirect\CDDownload\IBS2RBMM\CMCSCOL_MM.TXT

CREATE TABLE mstFileDateConvert
(
	fdc_Code INT IDENTITY(1,1) PRIMARY KEY,
	fdc_Type NVARCHAR(200),
	fdc_FROM_LOC NVARCHAR(200),
	fdc_TO_LOC NVARCHAR(200),
	fdc_FROM_FILE_NAME NVARCHAR(200),
	fdc_TO_FILE_NAME NVARCHAR(200),
	fdc_FIRSTROWKEY NVARCHAR(10),
	fdc_FR_REP_POS	INT,
	fdc_Get_Batch_Date_SQL NVARCHAR(300),
	fdc_IsCheckLast BIT,
	fdc_IsCheckLastPrefix NVARCHAR(200),
	fdc_status BIT
)

CREATE TABLE eErrorLog
(
	RowID INT NOT NULL IDENTITY(1,1) PRIMARY KEY,
	ErrDate DATETIME NOT NULL DEFAULT GETDATE(),
	ErrInfo XML 
)


SELECT * FROM mstFileDateConvert

*/
BEGIN
	DECLARE @fdc_Code INT
	DECLARE @fdc_Type NVARCHAR(200)
	DECLARE @fdc_FROM_LOC NVARCHAR(200)
	DECLARE @fdc_TO_LOC NVARCHAR(200)
	DECLARE @fdc_FROM_FILE_NAME NVARCHAR(200)
	DECLARE @fdc_TO_FILE_NAME NVARCHAR(200)
	DECLARE @fdc_FIRSTROWKEY NVARCHAR(10)
	DECLARE @fdc_FR_REP_POS	INT
	DECLARE @fdc_Get_Batch_Date_SQL NVARCHAR(300)
	DECLARE @fdc_IsCheckLast BIT
	DECLARE @fdc_IsCheckLastPrefix NVARCHAR(200)
	DECLARE @fdc_status BIT
	DECLARE @CUR_STATUS INT
	DECLARE @sScript_Dir NVARCHAR(1000)

	DECLARE @pXML XML
	DECLARE @pRtnXML XML

	DECLARE @Date NVARCHAR(10)

	DECLARE @tmp_Script TABLE
	(
		command NVARCHAR(MAX)
	)

	DECLARE @tmp_FileName TABLE
	(
		fName NVARCHAR(MAX),
		depth BIT,
		Isfile BIT
	)

	DECLARE @tmp_LastUpdateFile TABLE
	(
		fName NVARCHAR(MAX),
		ModifiedDate DATETIME
	)
	 
	SET @CUR_STATUS = 0
	 DECLARE FDC_CUR CURSOR LOCAL FOR
		SELECT [fdc_Code]
		  ,[fdc_Type]
		  ,[fdc_FROM_LOC]
		  ,[fdc_TO_LOC]
		  ,[fdc_FROM_FILE_NAME]
		  ,[fdc_TO_FILE_NAME]
		  ,[fdc_FIRSTROWKEY]
		  ,[fdc_FR_REP_POS]
		  ,[fdc_Get_Batch_Date_SQL]
		  ,[fdc_IsCheckLast]
		  ,[fdc_IsCheckLastPrefix]
		  ,[fdc_status] FROM mstFileDateConvert WHERE fdc_status = 1

      OPEN FDC_CUR
      FETCH NEXT FROM FDC_CUR INTO @fdc_Code
		  ,@fdc_Type,@fdc_FROM_LOC,@fdc_TO_LOC
		  ,@fdc_FROM_FILE_NAME,@fdc_TO_FILE_NAME,@fdc_FIRSTROWKEY
		  ,@fdc_FR_REP_POS,@fdc_Get_Batch_Date_SQL,@fdc_IsCheckLast
		  ,@fdc_IsCheckLastPrefix,@fdc_status

	  WHILE (@CUR_STATUS = 0)
      BEGIN
			BEGIN TRY
				DELETE FROM @tmp_Script
				DELETE FROM @tmp_FileName
				DELETE FROM @tmp_LastUpdateFile
				--SELECT @fdc_Code
				--  ,@fdc_Type,@fdc_FROM_LOC,@fdc_TO_LOC
				--  ,@fdc_FROM_FILE_NAME,@fdc_TO_FILE_NAME,@fdc_FIRSTROWKEY
				--  ,@fdc_FR_REP_POS,@fdc_Get_Batch_Date_SQL,@fdc_IsCheckLast
				--  ,@fdc_IsCheckLastPrefix,@fdc_status
			
				--Get file Batch Date
				IF (@fdc_Get_Batch_Date_SQL IS NOT NULL AND RTRIM(@fdc_Get_Batch_Date_SQL) != '')
				BEGIN
					DECLARE @tmp_dt TABLE
					(
						dtValue NVARCHAR(20)
					)
					INSERT INTO @tmp_dt
					EXECUTE(@fdc_Get_Batch_Date_SQL)

					IF (EXISTS(SELECT * FROM @tmp_dt WHERE ISDATE(dtValue)= 1))
					BEGIN
						SET @Date  = (SELECT TOP 1 dtValue FROM @tmp_dt)
					END
				END

				--If file is need to check modified date 
				IF (@fdc_IsCheckLast = 1)
				BEGIN
					SET @sScript_Dir = 'DIR ' + @fdc_FROM_LOC + @fdc_IsCheckLastPrefix + '*.*'

					INSERT INTO @tmp_Script(command)
					EXEC master..xp_cmdshell @sScript_Dir

					INSERT INTO @tmp_FileName
					EXEC xp_dirtree @fdc_FROM_LOC, 1, 1

					--SELECT * FROM @tmp_Script
					INSERT INTO @tmp_LastUpdateFile (fName,ModifiedDate)
					SELECT c1.fName, CONVERT(DATETIME,LEFT(command,20)) FROM @tmp_FileName c1 
					INNER JOIN @tmp_Script c2 ON CHARINDEX(c1.fName,c2.command,1) >= 1 WHERE Isfile = 1
					--********GET Last Update File Name***************************************
					SET @fdc_FROM_FILE_NAME = (SELECT TOP 1 fName FROM @tmp_LastUpdateFile ORDER BY ModifiedDate DESC)

					SELECT @fdc_FROM_FILE_NAME
					--************************************************************************
				END

				SET @pXML = '
				<ROOT>
						<TYPE>'+ @fdc_Type +'</TYPE>
						<FROM_LOC>'+ @fdc_FROM_LOC +'</FROM_LOC>
						<TO_LOC>'+ @fdc_TO_LOC +'</TO_LOC>
						<FROM_FILE_NAME>'+ @fdc_FROM_FILE_NAME +'</FROM_FILE_NAME>
						<TO_FILE_NAME>'+ @fdc_TO_FILE_NAME +'</TO_FILE_NAME>
						<TO_DATE>'+ @Date +'</TO_DATE>
						<KEYINFO><FIRSTROWKEY>'+ @fdc_FIRSTROWKEY +'</FIRSTROWKEY><FR_REP_POS>'+ CONVERT(NVARCHAR,@fdc_FR_REP_POS) +'</FR_REP_POS></KEYINFO>
				</ROOT>'
				EXEC [sp_FileDateConvert] @pXML,@pRtnXML OUTPUT


			END TRY
			BEGIN CATCH
				SELECT 'REPORT ERROR'
				INSERT INTO eErrorLog(ErrInfo)
				SELECT (SELECT
					@fdc_FROM_FILE_NAME AS FileName,
					ERROR_NUMBER() AS ErrorNumber,
					ERROR_STATE() AS ErrorState,
					ERROR_SEVERITY() AS ErrorSeverity,
					ERROR_PROCEDURE() AS ErrorProcedure,
					ERROR_LINE() AS ErrorLine,
					ERROR_MESSAGE() AS ErrorMessage FOR XML PATH('XML')) AS ERR
			END CATCH

		  FETCH NEXT FROM FDC_CUR INTO @fdc_Code
			  ,@fdc_Type,@fdc_FROM_LOC,@fdc_TO_LOC
			  ,@fdc_FROM_FILE_NAME,@fdc_TO_FILE_NAME,@fdc_FIRSTROWKEY
			  ,@fdc_FR_REP_POS,@fdc_Get_Batch_Date_SQL,@fdc_IsCheckLast
			  ,@fdc_IsCheckLastPrefix,@fdc_status

            SELECT @CUR_STATUS = @@FETCH_STATUS

      END
      CLOSE FDC_CUR
      DEALLOCATE FDC_CUR

	  
	----FXFORWARD.TXT
	--SET @pXML = '
	--<ROOT>
	--		<TYPE>REPLACE_BY_POSITION</TYPE>
	--		<FROM_LOC>\\sitvpbdsrv03\ConnectDirect\CDDownload\IBS2PBMM\</FROM_LOC>
	--		<TO_LOC>C:\TEMP\FILE_OUTPUT\</TO_LOC>
	--		<FROM_FILE_NAME>FXFORWARD.TXT</FROM_FILE_NAME>
	--		<TO_FILE_NAME>FXFORWARD.TXT</TO_FILE_NAME>
	--		<TO_DATE>'+ @Date +'</TO_DATE>
	--		<KEYINFO><FIRSTROWKEY>0</FIRSTROWKEY><FR_REP_POS>13</FR_REP_POS></KEYINFO>
	--</ROOT>'
	--EXEC [sp_FileDateConvert] @pXML,@pRtnXML OUTPUT
	--SELECT @pRtnXML



END
GO
/****** Object:  StoredProcedure [dbo].[sp_FileFormatValidation]    Script Date: 5/17/2022 9:57:52 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_FileFormatValidation]
(
@pXML XML,
@pOutXML XML OUTPUT
)
AS
/*
DECLARE @pInXML XML
DECLARE @pOutXML XML

SET @pInXML = '<ROOT><TYPE></TYPE><FILENAME>C:\\UTBATCH\\DSB\\EG_STOCK_INFO.txt</FILENAME></ROOT>'

EXEC sp_FileFormatValidation @pInXML , @pOutXML OUTPUT

SELECT @pOutXML
*/
BEGIN
	DECLARE @OLEResult INT
	DECLARE @FS INT
	DECLARE @FileID INT
	DECLARE @TYPE NVARCHAR(100)
	DECLARE @Message VARCHAR (8000)
	DECLARE @FileName NVARCHAR(MAX)
	DECLARE @sScript NVARCHAR(MAX)

	DECLARE @tmp_Column TABLE
	(
		ColumnName NVARCHAR(100),
		ColumnType NVARCHAR(10),
		ColumnLength INT
	)

	SELECT 
		@TYPE			= T.C.value('TYPE[1]', 'NVARCHAR(100)'),
		@FileName		= T.C.value('FILENAME[1]', 'NVARCHAR(1000)')
		FROM @pXML.nodes('/ROOT') T(C)
		
		

		EXECUTE @OLEResult = sp_OACreate 'Scripting.FileSystemObject', @FS OUT
		IF @OLEResult <> 0
		BEGIN
		PRINT 'Scripting.FileSystemObject'
		PRINT 'Error code: ' + CONVERT (VARCHAR, @OLEResult)
		END

		EXECUTE sp_OASetProperty             @FS,    'Type',             2                           --1 = binary, 2 = text
		EXECUTE sp_OASetProperty             @FS,    'Mode',             1                           --0 = not set, 1 read, 2 write, 3 read/write
		EXECUTE sp_OASetProperty             @FS,    'Charset',          'UTF-8'                     --'ISO-8859-1'
		EXECUTE sp_OASetProperty             @FS,    'LineSeparator',    'adLF'
		SELECT @FileName

		EXEC @OLEResult = sp_OAMethod @FS, 'OpenTextFile', @FileID OUT, @FileName
		IF @OLEResult <> 0
		BEGIN
		PRINT 'OpenTextFile'
		PRINT 'Error code: ' + CONVERT (VARCHAR, @OLEResult)
		END

		EXECUTE @OLEResult = sp_OAMethod @FileID, 'ReadLine', @Message OUT
		WHILE @OLEResult >= 0
		BEGIN
			PRINT @Message

			EXECUTE @OLEResult = sp_OAMethod @FileID, 'ReadLine', @Message OUT
		END

		EXECUTE sp_OAMethod  @FileID , 'Close'
END
GO
/****** Object:  StoredProcedure [dbo].[sp_FilePathCompare]    Script Date: 5/17/2022 9:57:52 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[sp_FilePathCompare]
(
@pXML XML,
@pOutXML XML OUTPUT
)
AS
/*

DECLARE @pXML XML

EXEC sp_FilePathCompare '
<ROOT>
		<TYPE>COMPARE_TABLE_DATA</TYPE>
		<SOURCE_DB>DSBDB</SOURCE_DB>
		<TARGET_DB>DSBDB</TARGET_DB>
		<SOURCE_TABLE>TB_UT2CIF</SOURCE_TABLE>
		<TARGET_TABLE>TB_UT2CIF_CBP2</TARGET_TABLE>
		<EXCLUDE_COLUMN>CUSTID,SETTLEAC,PROCESSINGDATE</EXCLUDE_COLUMN>
		<REPLACE_SPACE_COLUMN>CUSTID,SETTLEAC</REPLACE_SPACE_COLUMN>
		<ORDER_COLUMN>ACCOUNT</ORDER_COLUMN>
</ROOT>', @pXML OUTPUT

SELECT @pXML

*/
BEGIN

	DECLARE @TYPE NVARCHAR(100)
	DECLARE @sSourcePath NVARCHAR(1000)
	DECLARE @sTargetPath NVARCHAR(1000)
	DECLARE @sFileType NVARCHAR(100)

	DECLARE @tbl_Source_File TABLE
	(
		RowID INT NOT NULL IDENTITY(1,1),
		FileFolder NVARCHAR(1000),
		FilePath NVARCHAR(1000),
		FileName NVARCHAR(300),
		FileData NVARCHAR(MAX)
	)

	DECLARE @tbl_Target_File TABLE
	(
		RowID INT NOT NULL IDENTITY(1,1),
		FileFolder NVARCHAR(1000),
		FilePath NVARCHAR(1000),
		FileName NVARCHAR(300),
		FileData NVARCHAR(MAX)
	)

	SELECT 
		@TYPE			= T.C.value('TYPE[1]', 'NVARCHAR(100)'),
		@sSourcePath	= T.C.value('SourcePath[1]', 'NVARCHAR(100)'),
		@sTargetPath		= T.C.value('TargetPath[1]', 'NVARCHAR(100)'),
		@sFileType		= T.C.value('FileType[1]', 'NVARCHAR(100)')
		FROM @pXML.nodes('/ROOT') T(C)


	EXEC Master.dbo.xp_DirTree 'c:\utbatch',1,1

	DECLARE @tbl_Script TABLE
	(
		outputLine NVARCHAR(MAX)
	)

	INSERT INTO @tbl_Script
	EXEC xp_cmdshell 'dir /C/A/S "C:\utbatch\"';

	IF OBJECT_ID('tempdb..#tmp_Script') IS NOT NULL DROP TABLE #tmp_Script
	SELECT * INTO #tmp_Script FROM @tbl_Script WHERE outputLine LIKE ' Directory of %' 
	AND outputLine NOT LIKE '%Backup%'
	AND outputLine NOT LIKE '%\Back up\%'
	AND outputLine NOT LIKE '%Directory of C:\utbatch\DSB\CB_COL013COL014_Output\COL013_COL014_ARCHIVE\%'
	AND outputLine NOT LIKE '%Directory of C:\utbatch\DSB\UT2RTGL_OLD\%'
	AND outputLine NOT LIKE '%OLD%'

	
	 SELECT 'md ' + REPLACE(REPLACE(outputLine,'Directory of ',''),' C:\utbatch',' C:\UTBATCH_LOGFILE_BACKUP') FROM #tmp_Script ORDER BY outputLine
	  
	  SELECT 'COPY ' + REPLACE(outputLine,'Directory of ','') + '\*.dat '  + REPLACE(REPLACE(outputLine,'Directory of ',''),' C:\utbatch',' D:\UTBATCH_LOGFILE_BACKUP') FROM #tmp_Script ORDER BY outputLine 



	DECLARE @Path nvarchar(500) = 'C:\utbatch\' --Change the path

	DECLARE @FindFile TABLE 
	 (FileNames nvarchar(500)
	  ,depth int
	  ,isFile int)

	INSERT INTO @FindFile 
	EXEC xp_DirTree @Path,1,1

	SELECT FileNames from @FindFile where isFile=1


END
GO
/****** Object:  StoredProcedure [dbo].[sp_GenFolderPermissionList]    Script Date: 5/17/2022 9:57:52 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
CREATE PROCEDURE [dbo].[sp_GenFolderPermissionList]
(
@pXML XML,
@pOutXML XML OUTPUT
)
AS
/*
DECLARE @pRtnXML XML
EXEC [sp_GenFolderPermissionList] '
<ROOT>
		<TYPE>INIT</TYPE>
</ROOT>',@pRtnXML OUTPUT
SELECT @pRtnXML


DECLARE @pRtnXML XML
EXEC [sp_GenFolderPermissionList] '
<ROOT>
		<TYPE>GET_USER_LIST</TYPE>
		<ExportPath>e:\CDUpload\temp\20200925\</ExportPath> 
</ROOT>',@pRtnXML OUTPUT
SELECT @pRtnXML


DECLARE @pRtnXML XML
EXEC [sp_GenFolderPermissionList] '
<ROOT>
		<TYPE>GET_USER_LIST</TYPE>
		<ExportPath>e:\CDUpload\temp\20200928\</ExportPath> 
</ROOT>',@pRtnXML OUTPUT
SELECT @pRtnXML



*/
BEGIN
	DECLARE @TYPE NVARCHAR(100)
	DECLARE @LinkSrv_DB_Name NVARCHAR(MAX)
	DECLARE @LinkSrv_Name NVARCHAR(MAX)
	DECLARE @Local_DB_Name NVARCHAR(MAX)
	DECLARE @OLD_DB_Name NVARCHAR(MAX)
	DECLARE @NEW_DB_Name NVARCHAR(MAX)
	DECLARE @sScript NVARCHAR(MAX)
	DECLARE @tbl_Name NVARCHAR(MAX)	
	DECLARE @sDBScript NVARCHAR(MAX)
	DECLARE @sExportPath NVARCHAR(MAX)
	DECLARE @sImportPath NVARCHAR(MAX)
	DECLARE @sSEARCH_COLUMN NVARCHAR(MAX)
	DECLARE @sUSER NVARCHAR(100)
	DECLARE @sUser_or_grp	NVARCHAR(MAX)
	DECLARE @sExec_command	VARCHAR(1000)
	DECLARE @sSource_Data NVARCHAR(MAX)

	DECLARE @tbl_Data TABLE
	(
		rData NVARCHAR(MAX)
	)

	SELECT 
		@TYPE			= T.C.value('TYPE[1]', 'NVARCHAR(100)'),
		@sExportPath		= T.C.value('ExportPath[1]', 'NVARCHAR(200)'),
		@sUSER				= T.C.value('USER[1]', 'NVARCHAR(200)')
		FROM @pXML.nodes('/ROOT') T(C)


	IF (@TYPE = 'INIT')
	BEGIN
		--DROP TABLE mstSystemFolderPermission
		--CREATE TABLE mstSystemFolderPermission 
		--(
		--RowID INT NOT NULL IDENTITY(1,1),
		--ServerDir			NVARCHAR(100),
		--InheritanceFlags	NVARCHAR(100),
		--FolderOwner				NVARCHAR(100),
		--IdentityReference	NVARCHAR(300),
		--FolderPath				NVARCHAR(100),
		--FileSystemRights	NVARCHAR(100),
		--AccessControlType	NVARCHAR(100),
		--PropagationFlags	NVARCHAR(100)
		--)


		--INSERT INTO mstSystemFolderPermission([ServerDir],[InheritanceFlags],[FolderOwner],[IdentityReference],[FolderPath],[FileSystemRights],[AccessControlType],[PropagationFlags])
		--SELECT 'DB_C',* FROM OPENROWSET ('Microsoft.ACE.OLEDB.16.0', 'Text;Database=e:\CDUpload\temp\sharefolder; ', 'SELECT * FROM file_C.csv')
		--INSERT INTO mstSystemFolderPermission([ServerDir],[InheritanceFlags],[FolderOwner],[IdentityReference],[FolderPath],[FileSystemRights],[AccessControlType],[PropagationFlags])
		--SELECT 'DB_D',* FROM OPENROWSET ('Microsoft.ACE.OLEDB.16.0', 'Text;Database=e:\CDUpload\temp\sharefolder; ', 'SELECT * FROM file_D.csv')
		--INSERT INTO mstSystemFolderPermission([ServerDir],[InheritanceFlags],[FolderOwner],[IdentityReference],[FolderPath],[FileSystemRights],[AccessControlType],[PropagationFlags])
		--SELECT 'DB_E',* FROM OPENROWSET ('Microsoft.ACE.OLEDB.16.0', 'Text;Database=e:\CDUpload\temp\sharefolder; ', 'SELECT * FROM file_E.csv')
		--INSERT INTO mstSystemFolderPermission([ServerDir],[InheritanceFlags],[FolderOwner],[IdentityReference],[FolderPath],[FileSystemRights],[AccessControlType],[PropagationFlags])
		--SELECT 'RPT_C',* FROM OPENROWSET ('Microsoft.ACE.OLEDB.16.0', 'Text;Database=e:\CDUpload\temp\sharefolder; ', 'SELECT * FROM file_C_RPT.csv')
		PRINT 'INIT'
	END
	IF (@TYPE = 'GET_USER_LIST')
	BEGIN
		DECLARE @tbl_command TABLE
		(
			user_or_grp NVARCHAR(MAX),
			command NVARCHAR(MAX)
		)

		DECLARE @tbl_Permission_Detail TABLE
		(
			user_or_grp NVARCHAR(MAX),
			permission_detail NVARCHAR(MAX)
		)


		INSERT INTO @tbl_command (user_or_grp,command)
		--SELECT REPLACE(SUBSTRING(IdentityReference,CHARINDEX('\',IdentityReference),100),'\',''),  'net1.exe user ' +   REPLACE(SUBSTRING(IdentityReference,CHARINDEX('\',IdentityReference),100),'\','') + ' /domain > '+ @sExportPath + REPLACE(SUBSTRING(IdentityReference,CHARINDEX('\',IdentityReference),100),'\','') + '.txt' 
		SELECT REPLACE(SUBSTRING(IdentityReference,CHARINDEX('\',IdentityReference),100),'\',''),  'net1.exe user ' +   REPLACE(SUBSTRING(IdentityReference,CHARINDEX('\',IdentityReference),100),'\','') + ' /domain ' 
		FROM mstSystemFolderPermission
		WHERE LEFT(  REPLACE(SUBSTRING(IdentityReference,CHARINDEX('\',IdentityReference),100),'\',''),1) != '_'
		GROUP BY IdentityReference
		UNION ALL
		--SELECT REPLACE(SUBSTRING(IdentityReference,CHARINDEX('\',IdentityReference),100),'\',''),  'net1.exe group ' +   REPLACE(SUBSTRING(IdentityReference,CHARINDEX('\',IdentityReference),100),'\','') + ' /domain > ' + @sExportPath + REPLACE(SUBSTRING(IdentityReference,CHARINDEX('\',IdentityReference),100),'\','') + '.txt' 
		SELECT REPLACE(SUBSTRING(IdentityReference,CHARINDEX('\',IdentityReference),100),'\',''),  'net1.exe group "' +   REPLACE(SUBSTRING(IdentityReference,CHARINDEX('\',IdentityReference),100),'\','') + '" /domain ' 
		FROM mstSystemFolderPermission
		--WHERE LEFT(  REPLACE(SUBSTRING(IdentityReference,CHARINDEX('\',IdentityReference),100),'\',''),1) = '_'  
		--	OR IdentityReference LIKE '%Wealth Management Division%'
		--	OR IdentityReference LIKE '%Human Resources (SQD)%'
		GROUP BY IdentityReference

		DECLARE CUR_tmp_file CURSOR LOCAL FOR
			SELECT user_or_grp,command FROM @tbl_command

		OPEN CUR_tmp_file
		FETCH NEXT FROM CUR_tmp_file INTO @sUser_or_grp,@sExec_command
		WHILE( @@FETCH_STATUS = 0)
		BEGIN
			DELETE FROM @tbl_Data
			INSERT INTO @tbl_Data(rData)
			EXEC xp_cmdshell @sExec_command;  
			DELETE FROM @tbl_Data WHERE rData IS NULL OR rData LIKE '%The request will be processed at a domain controller for domain corp.dahsing.com%'
			SET @sSource_Data = ''
			IF (EXISTS(SELECT * FROM @tbl_Data WHERE rData LIKE '%The user name could not be found.%' OR rData LIKE '%The group name could not be found.%'))
			BEGIN
				PRINT 'FAIL'
			END
			ELSE
			BEGIN
				IF (EXISTS(SELECT * FROM @tbl_Data WHERE rData LIKE '%User name%' ))
				BEGIN
					SELECT @sSource_Data = COALESCE(@sSource_Data + '' +CHAR(13)+CHAR(10), ' ' +CHAR(13)+CHAR(10)) + rData FROM @tbl_Data  
					INSERT INTO @tbl_Permission_Detail(user_or_grp,permission_detail) VALUES (@sUser_or_grp,@sSource_Data)
				END
				ELSE
				BEGIN
					IF (EXISTS(SELECT * FROM @tbl_Data WHERE rData LIKE '%Group name%'))
					BEGIN
						SELECT @sSource_Data = COALESCE(@sSource_Data + '' +CHAR(13)+CHAR(10), ' ' +CHAR(13)+CHAR(10)) + rData FROM @tbl_Data  
						INSERT INTO @tbl_Permission_Detail(user_or_grp,permission_detail) VALUES (@sUser_or_grp,@sSource_Data)
					END
				END
			END
			FETCH NEXT FROM CUR_tmp_file INTO @sUser_or_grp,@sExec_command
		END
		CLOSE CUR_tmp_file
		DEALLOCATE CUR_tmp_file

		SELECT * FROM @tbl_Permission_Detail ORDER BY user_or_grp

		IF (@sUSER IS NULL)
		BEGIN
			SELECT c1.*,c2.permission_detail FROM mstSystemFolderPermission c1 INNER JOIN @tbl_Permission_Detail c2 ON REPLACE(SUBSTRING(IdentityReference,CHARINDEX('\',IdentityReference),100),'\','') = user_or_grp 
			ORDER BY ServerDir,FolderPath
		END
		ELSE
		BEGIN
			SELECT c1.*,c2.permission_detail FROM mstSystemFolderPermission c1 
				INNER JOIN @tbl_Permission_Detail c2 ON REPLACE(SUBSTRING(IdentityReference,CHARINDEX('\',IdentityReference),100),'\','') = user_or_grp 
				WHERE c2.permission_detail LIKE '%'+ @sUSER + '%'
				ORDER BY ServerDir,FolderPath
			 
		END
	
	END

END
GO
/****** Object:  StoredProcedure [dbo].[sp_GenGITCommand]    Script Date: 5/17/2022 9:57:52 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_GenGITCommand]
(@BranchName NVARCHAR(100))
AS
BEGIN
/*
	sp_GenGITCommand 'ENH20210430_SARDRD20002_US_STOCK_CODE'
*/
	PRINT '
	git fetch origin 
	git pull origin 
	git checkout -b '+ @BranchName +'

	git add .
	git commit -am "'+ @BranchName +'"
	git push
	git push --set-upstream origin '+ @BranchName +'

	git branch -d '+ @BranchName +'
	git remote -v'

END










































GO
/****** Object:  StoredProcedure [dbo].[sp_GenSPSourceCode]    Script Date: 5/17/2022 9:57:52 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_GenSPSourceCode] 
(
@DB NVARCHAR(100),
@spName NVARCHAR(100)
)
AS
BEGIN
	DECLARE @sScript NVARCHAR(MAX)
	SET @sScript = 'EXEC ' + @DB +'.dbo.sp_HelpTEXT '+ @spName +''
	EXEC sp_executesql @sScript
END
GO
/****** Object:  StoredProcedure [dbo].[sp_GenSWIFTImport]    Script Date: 5/17/2022 9:57:52 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_GenSWIFTImport]
AS
BEGIN

SELECT 'select * from bpss..TB_SWIFT_template where SWIFT_Code in ( '''+SWIFT_Code +''')'  FROM OPENROWSET ('Microsoft.ACE.OLEDB.16.0', 'Excel 12.0;Database=\\uatvutdb02\migration\SWIFT_CODE_TEMPLATE\swift_code.xlsx; ', [Sheet1$])
SELECT 'delete from bpss..TB_SWIFT_template where swift_code = '''+SWIFT_Code +''''  FROM OPENROWSET ('Microsoft.ACE.OLEDB.16.0', 'Excel 12.0;Database=\\uatvutdb02\migration\SWIFT_CODE_TEMPLATE\swift_code.xlsx; ', [Sheet1$])


SELECT 
'insert into bpss..TB_SWIFT_template(SWIFT_Code, Message_Type, Sender, Receiver, FINCopy, F21, F50K_Acc, F50K_Addr, F52A, F52D, F56A_Party_Id, F56A_Id_Code, F57A_Party_Id, F57A_Id_Code, F57D_Party_Id, F57D_Addr, F58D_Party_Id, 
                         F58D_Addr, F59A_Acc, F59A_Addr, F70, F71A, F72_L1_Code, F72_L1_Narrative, F72_L2_Code, F72_L2_Narrative) values(' +
'''' + ISNULL(SWIFT_Code,'') +''',' + 
'''' + ISNULL(Message_Type,'') +''',' + 
'''' + ISNULL(Sender,'')  +''',' + 
'''' + ISNULL(Receiver,'') +''',' + 
'''' + ISNULL(FINCopy,'') +''',' + 
'''' + ISNULL(F21,'') +''',' + 
'''' + ISNULL(F50K_Acc,'') +''',' + 
'''' + ISNULL(F50K_Addr,'') +''',' + 
'''' + ISNULL(F52A,'') +''',' + 
'''' + ISNULL(F52D,'') +''',' + 
'''' + ISNULL(F56A_Party_Id,'') +''',' + 
'''' + ISNULL(F56A_Id_Code,'') +''',' +  
'''' + ISNULL(F57A_Party_Id,'') +''',' +  
'''' + ISNULL(F57A_Id_Code,'') +''',' +  
'''' + ISNULL(F57D_Party_Id,'') +''',' +  
'''' + ISNULL(F57D_Addr,'') +''',' +  
'''' + ISNULL(F58D_Party_Id,'') +''',' +  
'''' + ISNULL(F58D_Addr,'') +''',' +  
'''' + ISNULL(F59A_Acc,'') +''',' +  
'''' + ISNULL(F59A_Addr,'') +''',' +  
'''' + ISNULL(F70,'') +''',' +  
'''' + ISNULL(F71A,'') +''',' +  
'''' + ISNULL(F72_L1_Code,'') +''',' +  
'''' + ISNULL(F72_L1_Narrative,'') +''',' +  
'''' + ISNULL(F72_L2_Code,'') +''',' +  
'''' + ISNULL(F72_L2_Narrative,'') +''')'   FROM OPENROWSET ('Microsoft.ACE.OLEDB.16.0', 'Excel 12.0;Database=\\uatvutdb02\migration\SWIFT_CODE_TEMPLATE\swift_code.xlsx; ', [Sheet1$])


END
GO
/****** Object:  StoredProcedure [dbo].[sp_Global_Log]    Script Date: 5/17/2022 9:57:52 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[sp_Global_Log]
(
@pXML XML
)
AS
/*
CREATE TABLE TB_GLOBAL_LOG
(
	tl_rowId BIGINT NOT NULL IDENTITY(1,1),
	tl_method NVARCHAR(10) NOT NULL,
	tl_function NVARCHAR(70) NOT NULL,
	tl_keyvalue NVARCHAR(50) NOT NULL,
	tl_date	DATETIME NOT NULL DEFAULT GETDATE(),
	tl_log_data XML
)

EXEC sp_Global_Log '<XML><TYPE>BULK_REDEEM</TYPE><METHOD>UPD</METHOD><FUNDKEY>925</FUNDKEY><COMPANYKEY>3</COMPANYKEY><UPDATE_BY>07504</UPDATE_BY></XML>'

*/
BEGIN
	DECLARE @TYPE NVARCHAR(100)
	DECLARE @METHOD NVARCHAR(30)
	DECLARE @LogXML XML

	DECLARE @FUNDKEY INT
	DECLARE @COMPANYKEY INT
	DECLARE @UPDATE_BY VARCHAR(10)
	SELECT 
		@TYPE			= T.C.value('TYPE[1]', 'NVARCHAR(100)'),
		@METHOD			= T.C.value('METHOD[1]', 'NVARCHAR(30)'),
		@FUNDKEY		= T.C.value('FUNDKEY[1]', 'INT'),
		@COMPANYKEY		= T.C.value('COMPANYKEY[1]', 'INT'),
		@UPDATE_BY		= T.C.value('UPDATE_BY[1]', 'NVARCHAR(10)')
		FROM @pXML.nodes('/XML') T(C) 
	IF (@TYPE = 'BULK_REDEEM')
	BEGIN
		--SET @LogXML = (SELECT * FROM bpss.dbo.TB_BULK_REDEEM_INSTR WHERE FUNDKEY = @FUNDKEY AND COMPANYKEY = @COMPANYKEY FOR XML PATH('XML'))
		INSERT INTO bpss.dbo.TB_BULK_REDEEM_INSTR_LOG(COMPANYKEY, FUNDKEY, Redemption_Method, Handling_Fee_Pct, Min_Handle_Fee, Redemp_Price, STATUS, Stock_Code, Stamp_Duty, base_unit_of_board, Ccass_ID, Other_Fee, 
                         Stock_Deposit_Date, Ccass_Charge_Flag, Deposit_Charge_Flag, Handling_Fee_Flag, Stock_Deposit_Status, Stock_Deposit_Batch_Run, Global_Board_pre_note, Global_Odd_pre_note, Global_Cash_pre_note, 
                         Option_Board_Board_pre_note, Option_Board_Cash_pre_note, Option_Share_Board_pre_note, Option_Share_Cash_pre_note, Remarks, UPDATE_DATE, UPDDATE_BY, BATCH_RUNDATE, CHANGESTAMP, 
                         APPROVER, APPROVALDATE, exchange_rate, BondNote_Flag, conversion_price, cash_ccy, lot, orderdate, effectivedate, Redemp_status, SMS_Sent,AUTH_BY,AUTH_DATE,IS_AUTH_APPROVED, LOG_DATETIME, LOG_METHOD, LOG_UPDATE_BY)
		SELECT *,GETDATE(),@METHOD,@UPDATE_BY FROM bpss.dbo.TB_BULK_REDEEM_INSTR WHERE FUNDKEY = @FUNDKEY AND COMPANYKEY = @COMPANYKEY
		
		UPDATE TB_BULK_REDEEM_INSTR SET UPDATE_DATE = GETDATE() WHERE FUNDKEY = @FUNDKEY AND COMPANYKEY = @COMPANYKEY
	END
	--IF (@TYPE = 'BULK_REDEEM_SEARCH')
	--BEGIN
	--	--select * from TB_GLOBAL_LOG where tl_log_data.exist('/XML/FUNDKEY[ . = 55]') = 1
	--	SELECT ''
	--END

END





GO
/****** Object:  StoredProcedure [dbo].[sp_HITRUST_DB_STRUCTURE]    Script Date: 5/17/2022 9:57:52 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_HITRUST_DB_STRUCTURE]
AS
BEGIN
	PRINT 'DB STRUCTURE'

	--	"ACCOUNTNO"		=hitrust..MXPORTFOLIOTB.SSNO,
	--"PORTFOLNO"		=hitrust..MXPORTFOLIOTB.PORTFOLIONO,

	--CONTRACT

			---****************[SP_CommissionReport]


	--hitrust..MXCTRACTTB
	--LEFT OUTER JOIN hitrust..MXACCOUNTTB (nolock) 
	--	ON hitrust..MXCTRACTTB.ACCTKEY=hitrust..MXACCOUNTTB.ACCTKEY
	--INNER JOIN hitrust..MXPORTFOLIOTB (nolock) 
	--	ON hitrust..MXPORTFOLIOTB.PORTFOLIOKEY=hitrust..MXACCOUNTTB.PORTFOLIOKEY
	--/* Added by Evi 2002/11/07  for multi-company - Start */ 
	--inner join tbcurrcompany  (nolock) 
 --               on hitrust..MXPORTFOLIOTB.company = tbcurrcompany.companykey
	--/* Added by Evi 2002/11/07  for multi-company - End */
	--INNER JOIN hitrust..MXPROFILETB (nolock) 
	--	ON hitrust..MXPROFILETB.PROFILEKEY=hitrust..MXPORTFOLIOTB.PROFILEKEY



  --HITRUST..MXCTRACTTB                           TB_CTRACT
  --INNER      JOIN HITRUST..MXCOMPANYTB          TB_COMP               ON TB_COMP.COMPANYKEY            = TB_CTRACT.COMPANY
  --INNER      JOIN HITRUST..MXTRANSACTIONTB      TB_TRANS              ON TB_TRANS.TRANSACTIONKEY        = TB_CTRACT.CTRACTKEY
  --INNER      JOIN HITRUST..MXACCOUNTTB          TB_ACC                ON TB_ACC.ACCTKEY                 = TB_CTRACT.ACCTKEY

  --MXTRANFINSTB
  -- HITRUST..MXTRANFINSTB         TB_TXFINS             ON TB_TXFINS.TRANSACTIONKEY       = TB_CTRACT.CTRACTKEY

  --MXTRANCODETB
  --HITRUST..MXTRANCODETB         TB_TXCODE             ON TB_CTRACT.TRANCODEKEY          = TB_TXCODE.TRANCODEKEY

  --MXCTRACTSUBTYPETB  SUB CONTRACT TYPE
  -- LEFT OUTER JOIN HITRUST..MXCTRACTSUBTYPETB    TB_CTSUBTYPE          ON TB_CTSUBTYPE.CTRACTSUBTYPEKEY  = TB_CTRACT.CTRACTSUBTYPE

  --FUND HOUSE
  --AND (@FundHouseName = 'ALL' or  UPPER(Left(TB_FHPROF.NAME, len(@FundHouseName))) = @FundHouseName )
  --LEFT OUTER JOIN HITRUST..MXPROFILETB          TB_FHPROF   


  -- AND ISNULL(TB_CTSUBTYPEDESC.DESCRIPTION,'?') <> 'TFRIN Transfer In'




	--SELECT * FROM hitrust.dbo.MXCTRACTTB
		-- CSNO
			---- select ud.charfield from hitrust.dbo.MXCTRACTTB c (nolock) 
			--			inner join hitrust..mxuserdefinedfieldtb ud (nolock)  on ud.xrefkey = c.ctractkey
			--			inner join hitrust..mxuserdefinedfieldtypetb udf (nolock)  on udf.userdefinedfieldtypekey = ud.userdefinedfieldtypekey
			--			where (udf.deleted = 0) and (rtrim(udf.charfieldname) = 'Agent Code') and (hitrust..MXCTRACTTB.ctractkey = c.ctractkey)
			--or
				--isnull(
				--	(SELECT TOP 1 hitrust..MXAGENTTB.AGENTNAME                  	
				--		 FROM hitrust..MXAGENTTB (nolock) 
				--			INNER JOIN hitrust..MXCOMMSPLITTB  (nolock)
				--				ON hitrust..MXAGENTTB.AGENTKEY=hitrust..MXCOMMSPLITTB.AGENTKEY
				--		WHERE  hitrust..MXCOMMSPLITTB.CTRACTKEY =hitrust..MXCTRACTTB.CTRACTKEY			
				--		--	AND hitrust..MXCOMMSPLITTB.COMMPERCENT=100  	-- DVP02001 KC 2002-03-13 
				--		ORDER BY hitrust..MXCOMMSPLITTB.COMMPERCENT DESC      	-- DVP02001 KC 2002-03-13 
				--	   ),				
				--	   (SELECT hitrust..MXAGENTTB.AGENTNAME
				--		 FROM hitrust..MXAGENTTB (nolock)
				--		 WHERE hitrust..MXAGENTTB.AGENTKEY=hitrust..MXCTRACTTB.AGENTKEY
				--	   )
				--	)
		--CSCOMM
			--(SELECT TOP 1 hitrust..MXCOMMSPLITTB.COMMPERCENT		-- DVP02001 KC 2002-03-13 get the largest COMMPERCENT record
			--	 FROM hitrust..MXCOMMSPLITTB (nolock) 
			--	 WHERE hitrust..MXCOMMSPLITTB.CTRACTKEY=hitrust..MXCTRACTTB.CTRACTKEY
			--	--	AND hitrust..MXCOMMSPLITTB.COMMPERCENT=100	
			--	 ORDER BY hitrust..MXCOMMSPLITTB.COMMPERCENT DESC		-- DVP02001 KC 2002-03-13 
			--)
		--Sub-Agent Code
				--isnull(
				--		-- if not null
				--		(select ud.charfield from hitrust.dbo.MXCTRACTTB c (nolock) 
				--		inner join hitrust..mxuserdefinedfieldtb ud (nolock)  on ud.xrefkey = c.ctractkey
				--		inner join hitrust..mxuserdefinedfieldtypetb udf (nolock)  on udf.userdefinedfieldtypekey = ud.userdefinedfieldtypekey	
				--		where (udf.deleted = 0) and (rtrim(udf.charfieldname) = 'Sub-Agent Code') and (hitrust..MXCTRACTTB.ctractkey = c.ctractkey) ) , 
				--		-- if null
				--		(
				--		case when 2 >  (SELECT count(*) FROM hitrust..MXAGENTTB  (nolock) 
				--			INNER JOIN hitrust..MXCOMMSPLITTB  (nolock) 
				--			ON hitrust..MXAGENTTB.AGENTKEY=hitrust..MXCOMMSPLITTB.AGENTKEY
				--			WHERE  hitrust..MXCOMMSPLITTB.CTRACTKEY =hitrust..MXCTRACTTB.CTRACTKEY)
				--			then	-- no RMNO as only zero or one MXCOMMSPLITTB record
				--				NULL   
				--			else	-- get RMNO from smallest comm.percentage
				--			ISNULL (
				--	 		(SELECT TOP 1 hitrust..MXAGENTTB.AGENTNAME			-- DVP02001 KC 2002-03-13 
				--				FROM hitrust..MXAGENTTB  (nolock) 
				--				INNER JOIN hitrust..MXCOMMSPLITTB  (nolock) 
				--					ON hitrust..MXAGENTTB.AGENTKEY=hitrust..MXCOMMSPLITTB.AGENTKEY
				--			WHERE  hitrust..MXCOMMSPLITTB.CTRACTKEY =hitrust..MXCTRACTTB.CTRACTKEY			
				--			ORDER BY hitrust..MXCOMMSPLITTB.COMMPERCENT ASC		-- DVP02001 KC 2002-03-13 
				--			),
				--			(SELECT hitrust..MXAGENTTB.AGENTNAME
				--				FROM hitrust..MXAGENTTB (nolock) 
				--				WHERE hitrust..MXAGENTTB.AGENTKEY=hitrust..MXCTRACTTB.AGENTKEY
				--			)
				--		)
				--		end		
				--		) -- end if null
				--	)
		--PRICEDDATE
					--case when hitrust..MXFUNDTB.Bearershare = 1 				-- User has "tick" the checkbox "Bearer Shares" in the fund master setup.
					--and ltrim(rtrim(MXTRANCODEDESC.DESCRIPTION)) = 'Subscriptions' 	-- [hitrust.dbo.DSBTRANSACTIONVIEWVW.TranType] --> and the trantype = 'Subscription'
					--and ( ltrim(rtrim(MXSUBTYPEDESC.DESCRIPTION)) <> 'TFRIN Transfer In'	-- [hitrust.dbo.DSBTRANSACTIONVIEWVW.TranSubType]--> and SUBTYPE subscription other than "transfer-in"                                          
					--	OR ltrim(rtrim(MXSUBTYPEDESC.DESCRIPTION)) is null )
					--then							 					
					--	hitrust..MXCTRACTTB.EFFDATE					-- then use the Effective Date in contract to be the Priced Date
					--else 
					--	hitrust..MXCTRACTTB.PRICEDDATE
					--end,
		--SETTLEDDT
				--hitrust..MXCTRACTTB.SETLDATE,
		--DEALSTATUS
				--(SELECT hitrust..MXLANGDESCTB.DESCRIPTION
				-- FROM hitrust..MXLANGDESCTB  (nolock) 
				-- 	INNER JOIN hitrust..MXCTSTATUSTB (nolock) 
				--		ON hitrust..MXCTSTATUSTB.DESCID=hitrust..MXLANGDESCTB.DESCKEY
				-- WHERE hitrust..MXLANGDESCTB.LANGUAGEKEY=1
				--	AND hitrust..MXCTSTATUSTB.CTSTATUSKEY=hitrust..MXCTRACTTB.CTSTATUSKEY),
		--COMMSSION 
				--=CASE 	(SELECT UPPER(LEFT(hitrust..MXLANGDESCTB.DESCRIPTION,4))  
				--	 FROM hitrust..MXLANGDESCTB  (nolock) 	
				--		INNER JOIN hitrust..MXCTRACTSUBTYPETB (nolock) 
				--			ON hitrust..MXCTRACTSUBTYPETB.DESCID=hitrust..MXLANGDESCTB.DESCKEY
				--	 WHERE hitrust..MXLANGDESCTB.LANGUAGEKEY=1
				--		AND hitrust..MXCTRACTSUBTYPETB.CTRACTSUBTYPEKEY=hitrust..MXCTRACTTB.CTRACTSUBTYPE
				--	)
				--WHEN 'DISC' THEN
				--	ROUND(ISNULL(hitrust..MXTRANSACTIONTB.TAXRATE,0) * ISNULL(hitrust..MXTRANFINSTB.NET,0) /100,2)
				--ELSE
				--	ISNULL(hitrust..MXTRANFINSTB.COMMISSION,0) + ISNULL(hitrust..MXTRANFINSTB.Tax,0)	
				--END
		--LOADINGRT
				--=CASE 
				--WHEN ISNULL(hitrust..MXCTRACTTB.PRICEDISCOUNTRATE,0) > 0 THEN
				--	ISNULL(hitrust..MXTRANSACTIONTB.LOADINGRATE,0)+ISNULL(hitrust..MXCTRACTTB.PRICEDISCOUNTRATE,0)
				--ELSE
				--	ISNULL(hitrust..MXTRANSACTIONTB.LOADINGRATE,0)
				--END
		--FRONTENDLO
				--=CASE (SELECT UPPER(LEFT(hitrust..MXLANGDESCTB.DESCRIPTION,4))
				--	 FROM hitrust..MXLANGDESCTB (nolock) 
				--		INNER JOIN hitrust..MXCTRACTSUBTYPETB (nolock) 
				--			ON hitrust..MXCTRACTSUBTYPETB.DESCID=hitrust..MXLANGDESCTB.DESCKEY
				--	 WHERE hitrust..MXLANGDESCTB.LANGUAGEKEY=1
				--		AND hitrust..MXCTRACTSUBTYPETB.CTRACTSUBTYPEKEY=hitrust..MXCTRACTTB.CTRACTSUBTYPE
				--	)
				--WHEN 'DISC' THEN
				--	ROUND(ISNULL(hitrust..MXTRANSACTIONTB.LOADINGRATE,0) * ISNULL( hitrust..MXTRANFINSTB.NET,0) /100,2)					
				--ELSE
				--	CASE 
				--	WHEN ISNULL(hitrust..MXCTRACTTB.PRICEDISCOUNTRATE,0) > 0 THEN
				--		ROUND((ISNULL(hitrust..MXTRANSACTIONTB.LOADINGRATE,0)+ISNULL(hitrust..MXCTRACTTB.PRICEDISCOUNTRATE,0)) * ISNULL(hitrust..MXTRANFINSTB.NET,0) /100 ,2)					
				--	ELSE
				--		ISNULL(hitrust..MXTRANFINSTB.LOADAMT,0)						
				--	END
				--END









		--CSCustMasterTB

		--CSGranTotalTB
			--CSCustMasterTB INNER JOIN
			   --CSGranTotalTB ON 
			   --CSCustMasterTB.STMTSeqNum = CSGranTotalTB.STMTSeqNum


		--CSCustMasterTB INNER JOIN
		   --hitrust.dbo.DSBTRANSACTIONVIEWVW ON 
		   --dsbdb.dbo.CSCustMasterTB.PortNum = hitrust.dbo.DSBTRANSACTIONVIEWVW.ClientNumber

		-- **************
		--Dividend
				-- hitrust.dbo.MXINCOMEDISTTB.CAPITAL 						AS TempDividendRate, 

				--hitrust.dbo.MXPROFILETB.NAME 						AS TempFundHouseName, 

				--hitrust.dbo.MXPORTFOLIOTB.PORTFOLIONAME 				AS TempCustomerName,
     			--hitrust.dbo.MXPORTFOLIOTB.PORTFOLIONO 					AS TempAccountNo, 

				--hitrust.dbo.MXCTRACTTB.NOUNIT 						AS TempDividendUnits, 
				 --hitrust.dbo.MXCTRACTTB.PRICE 						AS TempReinvestmentPrice, 
				 --hitrust.dbo.MXPAYMENTTB.PAYMENTAMOUNT 					AS TempDividendAmount,
				 --hitrust.dbo.MXINCOMETB.INCOMEAMOUNT					AS TempTotalDistribution,

		--Income
		--MXINCOMETB
				-- hitrust.dbo.MXINCOMETB 
				-- INNER JOIN hitrust.dbo.MXACCOUNTTB with (nolock) ON  hitrust.dbo.MXINCOMETB.ACCTKEY = hitrust.dbo.MXACCOUNTTB.ACCTKEY


		--MXUNITCLASSTB
				--hitrust.dbo.MXUNITCLASSTB.UNITCLASSKEY = hitrust.dbo.MXACCOUNTTB.UNITCLASSKEY

		--MXINCSCHEDTB
				--hitrust.dbo.MXINCSCHEDTB  with (nolock) ON  hitrust.dbo.MXINCOMETB.INCSCHEDKEY = hitrust.dbo.MXINCSCHEDTB.INCSCHEDKEY AND hitrust.dbo.MXINCSCHEDTB.DELETED = 0 -

				--  	CONVERT(varchar(20), hitrust.dbo.MXINCSCHEDTB.EXDATE, 101) 		AS TempExDividendDate, 
				--CONVERT(varchar(20), hitrust.dbo.MXINCSCHEDTB.PAYMENTDATE, 101) 	AS TempReinvestmentDate, 		-- TempReinvestmentDate is the Distribution Payment Date
				--CONVERT(varchar(20), hitrust.dbo.MXINCSCHEDTB.PROCESSEDDATE, 101)  	AS TempPaymentDate, 


		--MXINCOMEDISTTB
				-- hitrust.dbo.MXINCOMETB.INCSCHEDKEY = hitrust.dbo.MXINCOMEDISTTB.INCSCHEDKEY

		-- X contract
				-- MXCTRACTTB.INCOMEKEY = hitrust.dbo.MXINCOMETB.INCOMEKEY

		-- MXPAYMENTTB
				-- .MXPAYMENTTB.PAYMENTAMOUNT 					AS TempDividendAmount,
				-- hitrust.dbo.MXPAYMENTTB.INCOMEKEY = hitrust.dbo.MXINCOMETB.INCOMEKEY

		-- MXPORTSETTLEINSTTB
				--  hitrust.dbo.MXPORTSETTLEINSTTB.PORTFOLIOKEY  =  hitrust.dbo.MXPORTFOLIOTB.PORTFOLIOKEY

		-- MXSETTLEACTB
					-- MXSETTLEACTB.ACNO 						AS TempSettlementAC, 
				-- hitrust.dbo.MXSETTLEACTB.SETTLEACKEY = hitrust.dbo.MXPORTSETTLEINSTTB.SETTLEACCOUNT




	--***Re investment
	--UPPER(RTRIM(LTRIM(hitrust.dbo.MXCTRACTTB.REFERENCE))) = 'REINVESTMENT'
		--	(UPPER(RTRIM(LTRIM(hitrust.dbo.MXLANGDESCTB.DESCRIPTION))) = 'PRICED' OR UPPER(RTRIM(LTRIM(hitrust.dbo.MXLANGDESCTB.DESCRIPTION))) = 'SETTLED/REGISTERED' )

			-- MXCTRACTTB.TRANCODEKEY
					--UPPER(RTRIM(LTRIM(A.DESCRIPTION))) = 'SUBSCRIPTIONS'
			-- hitrust.dbo.MXCTRACTSUBTYPETB.DESCID 
					-- UPPER(RTRIM(LTRIM(B.DESCRIPTION))) = 'TFRIN TRANSFER IN'


	-- FUND HOUSE
			-- MXPROFILETB
			--	hitrust.dbo.MXPROFILETB.PROFILEKEY = hitrust.dbo.MXFUNDTB.PROFILEKEY

	-- MXPORTFOLIOTB Customer
			-- hitrust.dbo.MXACCOUNTTB.PORTFOLIOKEY = hitrust.dbo.MXPORTFOLIOTB.PORTFOLIOKEY

	-- hitrust.dbo.MXCTSTATUSTB 
			-- hitrust.dbo.MXCTRACTTB.CTSTATUSKEY  =  hitrust.dbo.MXCTSTATUSTB.CTSTATUSKEY
			-- (UPPER(RTRIM(LTRIM(hitrust.dbo.MXLANGDESCTB.DESCRIPTION))) = 'PRICED' OR UPPER(RTRIM(LTRIM(hitrust.dbo.MXLANGDESCTB.DESCRIPTION))) = 'SETTLED/REGISTERED' )

	-- hitrust.dbo.MXTRANCODETB
			-- hitrust.dbo.MXCTRACTTB.TRANCODEKEY = hitrust.dbo.MXTRANCODETB.TRANCODEKEY
				-- UPPER(RTRIM(LTRIM(A.DESCRIPTION))) = 'SUBSCRIPTIONS'

	--hitrust.dbo.MXCTRACTSUBTYPETB
			-- hitrust.dbo.MXCTRACTTB.CTRACTSUBTYPE = hitrust.dbo.MXCTRACTSUBTYPETB.CTRACTSUBTYPEKEY
				-- UPPER(RTRIM(LTRIM(B.DESCRIPTION))) = 'TFRIN TRANSFER IN'



	--BPSS.dbo.TB_BOND_MASTER.MATURITY_DT
END
GO
/****** Object:  StoredProcedure [dbo].[sp_JobMonitoring]    Script Date: 5/17/2022 9:57:52 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
CREATE PROCEDURE [dbo].[sp_JobMonitoring]
(
@pXML XML,
@pOutXML XML OUTPUT
)
AS
/*
CREATE TABLE mstJobMonitoringFileList
(
	jmnfl_Code INT NOT NULL IDENTITY(1,1) PRIMARY KEY,
	jmn_JobName	NVARCHAR(200) NOT NULL,
    jmnfl_FileName	NVARCHAR(100) NOT NULL,
    jmnfl_FilePath	NVARCHAR(200) NOT NULL,
    jmnfl_IsCheckDate	BIT NOT NULL DEFAULT 0,
    jmnfl_CheckDate_Prefix NVARCHAR(100) NOT NULL DEFAULT '',
    jmnfl_DayDeduct	INT NOT NULL DEFAULT 0
)

SELECT * FROM mstJobMonitoring WHERE jmn_JobName = 'JOB_UT_DAY_Combine'

SELECT * FROM eJobMonitoringLog

DECLARE @pRtnXML XML
EXEC sp_JobMonitoring '
<ROOT>
		<TYPE>CHECK_FILE_DATE</TYPE>
		<jmn_JobName>JOB_UT_DAY_Combine_BCM</jmn_JobName>
</ROOT>',@pRtnXML OUTPUT
SELECT @pRtnXML


DECLARE @pRtnXML XML
EXEC sp_JobMonitoring '
<ROOT>
		<TYPE>CHECK_FILE_DATE</TYPE>
		<jmn_JobName>JOB_RTGL_DSB</jmn_JobName>
</ROOT>',@pRtnXML OUTPUT
SELECT @pRtnXML

DELETE FROM eJobMonitoringLog WHERE jmn_Code = 42

SELECT * FROM eJobMonitoringLog WHERE jmn_Code = 31

SELECT * FROM mstJobMonitoring
DECLARE @pRtnXML XML
EXEC sp_JobMonitoring '
<ROOT>
		<TYPE>GENERATE_SCHEDULE</TYPE>
</ROOT>',@pRtnXML OUTPUT
SELECT @pRtnXML



DECLARE @pRtnXML XML
EXEC sp_JobMonitoring '<ROOT><TYPE>UPD_JOB_SCHEDULE</TYPE><jmn_JobName>JOB_RTGL_DSB</jmn_JobName></ROOT>',@pRtnXML OUTPUT

SELECT @pRtnXML


****THIS JOB IS NOT STABLE FOR EXECUTION TIME IS TRIGGER BY EVERY MINUTE ***

INSERT INTO mstJobMonitoring(jmn_Type,jmn_LogFilePath,jmn_JobName)  SELECT 'NORMAL','C:\TEMP\LOG\','JOB_AUTO_SETTLE_DSB'
INSERT INTO mstJobMonitoring(jmn_Type,jmn_LogFilePath,jmn_JobName)  SELECT 'NORMAL','C:\TEMP\LOG\','JOB_BCM_ConnectDirect'
INSERT INTO mstJobMonitoring(jmn_Type,jmn_LogFilePath,jmn_JobName)  SELECT 'NORMAL','C:\TEMP\LOG\','JOB_CAL_NEWUPPERLIMIT_and_UPLOAD - 06:50 pm'
INSERT INTO mstJobMonitoring(jmn_Type,jmn_LogFilePath,jmn_JobName)  SELECT 'NORMAL','C:\TEMP\LOG\','JOB_CBD17010_EXP_UT_PBMM_excel_to_corpsrv'
INSERT INTO mstJobMonitoring(jmn_Type,jmn_LogFilePath,jmn_JobName)  SELECT 'NORMAL','C:\TEMP\LOG\','JOB_CBIBS_COL013COL014_OUTPUT'
INSERT INTO mstJobMonitoring(jmn_Type,jmn_LogFilePath,jmn_JobName)  SELECT 'NORMAL','C:\TEMP\LOG\','JOB_CSCustMasterGen_BCM'
INSERT INTO mstJobMonitoring(jmn_Type,jmn_LogFilePath,jmn_JobName)  SELECT 'NORMAL','C:\TEMP\LOG\','JOB_CSCustMasterGen_DSB'
INSERT INTO mstJobMonitoring(jmn_Type,jmn_LogFilePath,jmn_JobName)  SELECT 'NORMAL','C:\TEMP\LOG\','JOB_CSS_DAY_FM_DSB'
INSERT INTO mstJobMonitoring(jmn_Type,jmn_LogFilePath,jmn_JobName)  SELECT 'NORMAL','C:\TEMP\LOG\','JOB_EXPORT_BCMCIFNO'
INSERT INTO mstJobMonitoring(jmn_Type,jmn_LogFilePath,jmn_JobName)  SELECT 'NORMAL','C:\TEMP\LOG\','JOB_EXPORT_CFZDMEXC_DSB'
INSERT INTO mstJobMonitoring(jmn_Type,jmn_LogFilePath,jmn_JobName)  SELECT 'NORMAL','C:\TEMP\LOG\','JOB_GEN_CPIA_BCM'
INSERT INTO mstJobMonitoring(jmn_Type,jmn_LogFilePath,jmn_JobName)  SELECT 'NORMAL','C:\TEMP\LOG\','JOB_GEN_Pledge_BCM'
INSERT INTO mstJobMonitoring(jmn_Type,jmn_LogFilePath,jmn_JobName)  SELECT 'NORMAL','C:\TEMP\LOG\','JOB_HC85_DSB'
INSERT INTO mstJobMonitoring(jmn_Type,jmn_LogFilePath,jmn_JobName)  SELECT 'NORMAL','C:\TEMP\LOG\','JOB_Import_CFZPBCU_FTP'
INSERT INTO mstJobMonitoring(jmn_Type,jmn_LogFilePath,jmn_JobName)  SELECT 'NORMAL','C:\TEMP\LOG\','JOB_Import_CFZPBCU_PRE_UTSTMT'
INSERT INTO mstJobMonitoring(jmn_Type,jmn_LogFilePath,jmn_JobName)  SELECT 'NORMAL','C:\TEMP\LOG\','JOB_Import_CFZXXCU'
INSERT INTO mstJobMonitoring(jmn_Type,jmn_LogFilePath,jmn_JobName)  SELECT 'NORMAL','C:\TEMP\LOG\','JOB_OPTOUT_CF_Z_UT_CFPRVCY'
INSERT INTO mstJobMonitoring(jmn_Type,jmn_LogFilePath,jmn_JobName)  SELECT 'NORMAL','C:\TEMP\LOG\','JOB_OPTOUT_CF2UT_CFPRVCY'
INSERT INTO mstJobMonitoring(jmn_Type,jmn_LogFilePath,jmn_JobName)  SELECT 'NORMAL','C:\TEMP\LOG\','JOB_RECREATE_CSPORTOWNERSTB_BCM'
INSERT INTO mstJobMonitoring(jmn_Type,jmn_LogFilePath,jmn_JobName)  SELECT 'NORMAL','C:\TEMP\LOG\','JOB_RECREATE_CSPORTOWNERSTB_DSB'
INSERT INTO mstJobMonitoring(jmn_Type,jmn_LogFilePath,jmn_JobName)  SELECT 'NORMAL','C:\TEMP\LOG\','JOB_RTGL_BCM'
INSERT INTO mstJobMonitoring(jmn_Type,jmn_LogFilePath,jmn_JobName)  SELECT 'NORMAL','C:\TEMP\LOG\','JOB_RTGL_DSB'
INSERT INTO mstJobMonitoring(jmn_Type,jmn_LogFilePath,jmn_JobName)  SELECT 'NORMAL','C:\TEMP\LOG\','JOB_UT_DAY_Combine'
INSERT INTO mstJobMonitoring(jmn_Type,jmn_LogFilePath,jmn_JobName)  SELECT 'NORMAL','C:\TEMP\LOG\','JOB_UT_FLOAT_LIST'
INSERT INTO mstJobMonitoring(jmn_Type,jmn_LogFilePath,jmn_JobName)  SELECT 'NORMAL','C:\TEMP\LOG\','JOB_UT_FLOAT_LIST_2DMS'
INSERT INTO mstJobMonitoring(jmn_Type,jmn_LogFilePath,jmn_JobName)  SELECT 'NORMAL','C:\TEMP\LOG\','JOB_UT_RB_Payroll'
INSERT INTO mstJobMonitoring(jmn_Type,jmn_LogFilePath,jmn_JobName)  SELECT 'NORMAL','C:\TEMP\LOG\','JOB_UT_RB_YouPoint'
INSERT INTO mstJobMonitoring(jmn_Type,jmn_LogFilePath,jmn_JobName)  SELECT 'NORMAL','C:\TEMP\LOG\','JOB_UT2CIF_BCM'
INSERT INTO mstJobMonitoring(jmn_Type,jmn_LogFilePath,jmn_JobName)  SELECT 'NORMAL','C:\TEMP\LOG\','JOB_UT2CIF_DSB'
INSERT INTO mstJobMonitoring(jmn_Type,jmn_LogFilePath,jmn_JobName)  SELECT 'NORMAL','C:\TEMP\LOG\','JOB_UT2COD_DSB'

DECLARE @pRtnXML XML
EXEC sp_JobMonitoring '<ROOT><TYPE>UPD_JOB_SCHEDULE</TYPE><jmn_JobName>JOB_BCM_ConnectDirect</jmn_JobName></ROOT>',@pRtnXML OUTPUT
EXEC sp_JobMonitoring '<ROOT><TYPE>UPD_JOB_SCHEDULE</TYPE><jmn_JobName>JOB_CAL_NEWUPPERLIMIT_and_UPLOAD - 06:50 pm</jmn_JobName></ROOT>',@pRtnXML OUTPUT
EXEC sp_JobMonitoring '<ROOT><TYPE>UPD_JOB_SCHEDULE</TYPE><jmn_JobName>JOB_CBD17010_EXP_UT_PBMM_excel_to_corpsrv</jmn_JobName></ROOT>',@pRtnXML OUTPUT
EXEC sp_JobMonitoring '<ROOT><TYPE>UPD_JOB_SCHEDULE</TYPE><jmn_JobName>JOB_CBIBS_COL013COL014_OUTPUT</jmn_JobName></ROOT>',@pRtnXML OUTPUT
EXEC sp_JobMonitoring '<ROOT><TYPE>UPD_JOB_SCHEDULE</TYPE><jmn_JobName>JOB_CSCustMasterGen_BCM</jmn_JobName></ROOT>',@pRtnXML OUTPUT
EXEC sp_JobMonitoring '<ROOT><TYPE>UPD_JOB_SCHEDULE</TYPE><jmn_JobName>JOB_CSCustMasterGen_DSB</jmn_JobName></ROOT>',@pRtnXML OUTPUT
EXEC sp_JobMonitoring '<ROOT><TYPE>UPD_JOB_SCHEDULE</TYPE><jmn_JobName>JOB_CSS_DAY_FM_DSB</jmn_JobName></ROOT>',@pRtnXML OUTPUT
EXEC sp_JobMonitoring '<ROOT><TYPE>UPD_JOB_SCHEDULE</TYPE><jmn_JobName>JOB_EXPORT_BCMCIFNO</jmn_JobName></ROOT>',@pRtnXML OUTPUT
EXEC sp_JobMonitoring '<ROOT><TYPE>UPD_JOB_SCHEDULE</TYPE><jmn_JobName>JOB_EXPORT_CFZDMEXC_DSB</jmn_JobName></ROOT>',@pRtnXML OUTPUT
EXEC sp_JobMonitoring '<ROOT><TYPE>UPD_JOB_SCHEDULE</TYPE><jmn_JobName>JOB_GEN_CPIA_BCM</jmn_JobName></ROOT>',@pRtnXML OUTPUT
EXEC sp_JobMonitoring '<ROOT><TYPE>UPD_JOB_SCHEDULE</TYPE><jmn_JobName>JOB_GEN_Pledge_BCM</jmn_JobName></ROOT>',@pRtnXML OUTPUT
EXEC sp_JobMonitoring '<ROOT><TYPE>UPD_JOB_SCHEDULE</TYPE><jmn_JobName>JOB_HC85_DSB</jmn_JobName></ROOT>',@pRtnXML OUTPUT
EXEC sp_JobMonitoring '<ROOT><TYPE>UPD_JOB_SCHEDULE</TYPE><jmn_JobName>JOB_Import_CFZPBCU_FTP</jmn_JobName></ROOT>',@pRtnXML OUTPUT
EXEC sp_JobMonitoring '<ROOT><TYPE>UPD_JOB_SCHEDULE</TYPE><jmn_JobName>JOB_Import_CFZPBCU_PRE_UTSTMT</jmn_JobName></ROOT>',@pRtnXML OUTPUT
EXEC sp_JobMonitoring '<ROOT><TYPE>UPD_JOB_SCHEDULE</TYPE><jmn_JobName>JOB_Import_CFZXXCU</jmn_JobName></ROOT>',@pRtnXML OUTPUT
EXEC sp_JobMonitoring '<ROOT><TYPE>UPD_JOB_SCHEDULE</TYPE><jmn_JobName>JOB_OPTOUT_CF_Z_UT_CFPRVCY</jmn_JobName></ROOT>',@pRtnXML OUTPUT
EXEC sp_JobMonitoring '<ROOT><TYPE>UPD_JOB_SCHEDULE</TYPE><jmn_JobName>JOB_OPTOUT_CF2UT_CFPRVCY</jmn_JobName></ROOT>',@pRtnXML OUTPUT
EXEC sp_JobMonitoring '<ROOT><TYPE>UPD_JOB_SCHEDULE</TYPE><jmn_JobName>JOB_RECREATE_CSPORTOWNERSTB_BCM</jmn_JobName></ROOT>',@pRtnXML OUTPUT
EXEC sp_JobMonitoring '<ROOT><TYPE>UPD_JOB_SCHEDULE</TYPE><jmn_JobName>JOB_RECREATE_CSPORTOWNERSTB_DSB</jmn_JobName></ROOT>',@pRtnXML OUTPUT
EXEC sp_JobMonitoring '<ROOT><TYPE>UPD_JOB_SCHEDULE</TYPE><jmn_JobName>JOB_RTGL_BCM</jmn_JobName></ROOT>',@pRtnXML OUTPUT
EXEC sp_JobMonitoring '<ROOT><TYPE>UPD_JOB_SCHEDULE</TYPE><jmn_JobName>JOB_RTGL_DSB</jmn_JobName></ROOT>',@pRtnXML OUTPUT
EXEC sp_JobMonitoring '<ROOT><TYPE>UPD_JOB_SCHEDULE</TYPE><jmn_JobName>JOB_UT_DAY_Combine</jmn_JobName></ROOT>',@pRtnXML OUTPUT
EXEC sp_JobMonitoring '<ROOT><TYPE>UPD_JOB_SCHEDULE</TYPE><jmn_JobName>JOB_UT_FLOAT_LIST</jmn_JobName></ROOT>',@pRtnXML OUTPUT
EXEC sp_JobMonitoring '<ROOT><TYPE>UPD_JOB_SCHEDULE</TYPE><jmn_JobName>JOB_UT_FLOAT_LIST_2DMS</jmn_JobName></ROOT>',@pRtnXML OUTPUT
EXEC sp_JobMonitoring '<ROOT><TYPE>UPD_JOB_SCHEDULE</TYPE><jmn_JobName>JOB_UT_RB_Payroll</jmn_JobName></ROOT>',@pRtnXML OUTPUT
EXEC sp_JobMonitoring '<ROOT><TYPE>UPD_JOB_SCHEDULE</TYPE><jmn_JobName>JOB_UT_RB_YouPoint</jmn_JobName></ROOT>',@pRtnXML OUTPUT
EXEC sp_JobMonitoring '<ROOT><TYPE>UPD_JOB_SCHEDULE</TYPE><jmn_JobName>JOB_UT2CIF_BCM</jmn_JobName></ROOT>',@pRtnXML OUTPUT
EXEC sp_JobMonitoring '<ROOT><TYPE>UPD_JOB_SCHEDULE</TYPE><jmn_JobName>JOB_UT2CIF_DSB</jmn_JobName></ROOT>',@pRtnXML OUTPUT
EXEC sp_JobMonitoring '<ROOT><TYPE>UPD_JOB_SCHEDULE</TYPE><jmn_JobName>JOB_UT2COD_DSB</jmn_JobName></ROOT>',@pRtnXML OUTPUT

DECLARE @pRtnXML XML
EXEC sp_JobMonitoring '<ROOT><TYPE>CHECK_FILE_DATE</TYPE><jmn_JobName>JOB_UT_DAY_Combine_BCM</jmn_JobName></ROOT>',@pRtnXML OUTPUT

CREATE TABLE eJobMonitoringFileTemp
(
	rData NVARCHAR(MAX)
)
*/
BEGIN
	SET DATEFIRST 1;
	EXEC sp_configure 'Ole Automation Procedures', 1
	DECLARE @TYPE NVARCHAR(100)
	DECLARE @jmn_Code INT
	DECLARE @jmn_Type NVARCHAR(20) 
	DECLARE @jmn_JobName NVARCHAR(200) 
	DECLARE @jmn_ExportFileList XML
	DECLARE @jmn_ImportFileList XML
	DECLARE @jmn_FileExecDate XML
	DECLARE @jmn_LogFilePath NVARCHAR(500) 
	DECLARE @jmn_IsHolidayCheck BIT
	DECLARE @jmn_IsHolidayAfterDateCheck BIT
	DECLARE @IsCheckFileCount BIT
	DECLARE @jmn_Est_Imp_Minute INT
	DECLARE @sScript NVARCHAR(MAX)
	DECLARE @sErrSource NVARCHAR(MAX)
	DECLARE @iTodayDay INT
	DECLARE @bIsRunChecking BIT
	DECLARE @iTime_value INT
	DECLARE @Day_value_by_EveryMonth NVARCHAR(30)

	DECLARE @FORMAT_MDD NVARCHAR(30)
	DECLARE @FORMAT_YYYYMMDD NVARCHAR(8)
	DECLARE @FORMAT_YYYYMM NVARCHAR(6)
	DECLARE @FORMAT_MM NVARCHAR(6)
	DECLARE @FORMAT_YYMMDD NVARCHAR(6)
	DECLARE @CUR_STATUS INT
	DECLARE @CUR_TIME_STATUS INT
	DECLARE @iCurTime INT
	DECLARE @sCurTime NVARCHAR(4)
	DECLARE @dtCurDate DATETIME
	DECLARE @dtToday DATETIME
	DECLARE @bIsDeductDate BIT

	DECLARE @jms_Code INT
	DECLARE @jml_Time INT

	DECLARE @tbl_ExportFileList_XML XML
	DECLARE @tbl_ExportFileList TABLE
	(
		FileName	NVARCHAR(100),
		FilePath	NVARCHAR(300),
		IsCheckDate	BIT,
		CheckDate_Prefix	NVARCHAR(100),
		DayDeduct	INT,
		IsCheckFileCount BIT
	)
	DECLARE @FileName	NVARCHAR(100)
	DECLARE @FilePath	NVARCHAR(300)
	DECLARE @IsCheckDate	BIT
	DECLARE @CheckDate_Prefix	NVARCHAR(100)
	DECLARE @DayDeduct	INT
	DECLARE @sScript_Dir NVARCHAR(3000)
 
	DECLARE @sFreq			NVARCHAR(100)
	DECLARE @iDay_value		INT 
	DECLARE @bIsRun			BIT

	DECLARE @tbl_Script TABLE
	(
		command NVARCHAR(MAX)
	)

	DECLARE @tbl_FileName TABLE
	(
		fName NVARCHAR(MAX),
		depth BIT,
		Isfile BIT
	)

	DECLARE @tbl_LastUpdateFile TABLE
	(
		fName NVARCHAR(MAX),
		ModifiedDate DATETIME
	)

	DECLARE @tbl_DateItemList_XML XML
	DECLARE @tbl_DateItemList TABLE
	(
		Freq			NVARCHAR(20),
		Day_value		INT,
		Time_value		INT,
		Day_value_by_EveryMonth NVARCHAR(30)
	)

	DECLARE @tbl_ErrList TABLE
	(
		FName NVARCHAR(100),
		ErrMsg	NVARCHAR(200)
	)

	SELECT 
		@TYPE			= T.C.value('TYPE[1]', 'NVARCHAR(100)'),
		@jmn_JobName			= T.C.value('jmn_JobName[1]', 'NVARCHAR(100)')
		FROM @pXML.nodes('/ROOT') T(C)

	SET @jmn_Code = (SELECT jmn_Code FROM mstJobMonitoring WHERE jmn_JobName = @jmn_JobName)

	SET @CUR_STATUS = 0
	SET @CUR_TIME_STATUS = 0
	SET @dtToday =  (SELECT CONVERT(NVARCHAR,GETDATE(),111))
	SET @bIsRunChecking = 0

	IF (@jmn_Code IS NOT NULL)
	BEGIN
		SELECT 
			@jmn_Type = jmn_Type,
			@jmn_JobName = jmn_JobName,
			@jmn_ExportFileList = jmn_ExportFileList,
			@jmn_ImportFileList = jmn_ImportFileList,
			@jmn_FileExecDate = jmn_FileExecDate,
			@jmn_LogFilePath = jmn_LogFilePath,
			@jmn_IsHolidayCheck = jmn_IsHolidayCheck,
			@jmn_Est_Imp_Minute = jmn_Est_Imp_Minute
		FROM mstJobMonitoring WHERE jmn_Code = @jmn_Code
	END

	IF (@TYPE = 'GENERATE_SCHEDULE')
	BEGIN
		
		DECLARE SCHEDULE_CUR CURSOR LOCAL FOR
			SELECT c1.jmn_Code,jmn_JobName,Freq,Day_value,Time_value,jmn_Est_Imp_Minute FROM [vwJobTodayExecutionTime]  c1

		OPEN SCHEDULE_CUR
		FETCH NEXT FROM SCHEDULE_CUR INTO @jmn_Code,@jmn_JobName,@sFreq,@iDay_value,@iTime_value,@jmn_Est_Imp_Minute
					 
		SELECT @CUR_STATUS = @@FETCH_STATUS
		WHILE (@CUR_STATUS = 0)
		BEGIN 
			IF (@iTime_value + @jmn_Est_Imp_Minute >= 2400)
			BEGIN
				SET @iCurTime  = (@iTime_value + @jmn_Est_Imp_Minute) - 2400
				SET @bIsDeductDate = 1
			END
			ELSE
			BEGIN
				SET  @iCurTime  = (@iTime_value + @jmn_Est_Imp_Minute)
				SET @bIsDeductDate = 0
			END

			SET @sCurTime = RIGHT('0000' + CONVERT(NVARCHAR,@iCurTime),4)

			IF (@bIsDeductDate = 1)
			BEGIN
				SET @dtCurDate  = DATEADD(DAY, 1,(SELECT DATEADD(MINUTE,CONVERT(INT,RIGHT(@sCurTime,2)),DATEADD(HOUR,CONVERT(INT,LEFT(@sCurTime,2)), CONVERT(NVARCHAR,GETDATE(),111)))))
			END
			ELSE
			BEGIN
				SET @dtCurDate  = (SELECT DATEADD(MINUTE,CONVERT(INT,RIGHT(@sCurTime,2)),DATEADD(HOUR,CONVERT(INT,LEFT(@sCurTime,2)), CONVERT(NVARCHAR,GETDATE(),111))))
			END
		--ALTER TABLE mstJobMonitoring ADD jmn_IsHolidayAfterDateCheck BIT NOT NULL DEFAULT 0
			SELECT 
				@jmn_IsHolidayCheck = jmn_IsHolidayCheck,
				@jmn_IsHolidayAfterDateCheck = jmn_IsHolidayAfterDateCheck
			FROM mstJobMonitoring WHERE jmn_Code = @jmn_Code
			
			IF (@jmn_IsHolidayCheck = 1 AND EXISTS(SELECT * FROM HITRUST..MXHOLIDAYTB WHERE  CONVERT(NVARCHAR,HOLIDAY,111)  =  CONVERT(NVARCHAR,GETDATE(),111)))
			BEGIN
				SET @bIsRun  = 0
			END
			ELSE IF (@jmn_IsHolidayAfterDateCheck = 1 AND EXISTS(SELECT * FROM HITRUST..MXHOLIDAYTB WHERE  CONVERT(NVARCHAR,HOLIDAY,111)  =  CONVERT(NVARCHAR,DATEADD(DAY,-1,GETDATE()),111)))
			BEGIN
				SET @bIsRun  = 0
			END
			ELSE
			BEGIN
				SET @bIsRun  = 1
			END

			IF (@bIsRun = 1)
			BEGIN
				IF (NOT EXISTS(SELECT * FROM eJobMonitoringSchedule WHERE jmn_Code = @jmn_Code AND jms_Date = @dtCurDate))
				BEGIN
					INSERT INTO eJobMonitoringSchedule(jmn_Code,jms_Date) VALUES (@jmn_Code, @dtCurDate)
				END
			END

			FETCH NEXT FROM SCHEDULE_CUR INTO @jmn_Code,@jmn_JobName,@sFreq,@iDay_value,@iTime_value,@jmn_Est_Imp_Minute
			SELECT @CUR_STATUS = @@FETCH_STATUS
		END
		CLOSE SCHEDULE_CUR
		DEALLOCATE SCHEDULE_CUR
	END
	--UPDATE MONITORING JOB SCHEDULE 
	--It will looking for the current job schedule settings and convert to XML to be stored in jmn_FileExecDate.
	IF (@TYPE = 'UPD_JOB_SCHEDULE')
	BEGIN
		PRINT 'UPD_JOB_SCHEDULE'
		DECLARE @sFrequency NVARCHAR(20)
		DECLARE @sInterval NVARCHAR(100)
		DECLARE @sTime NVARCHAR(20)

		DECLARE TIME_CUR CURSOR LOCAL FOR
		SELECT Frequency,Interval,Time FROM vwJobScheduleDetail WHERE LEFT(Time,5) != 'Every' AND JobName = @jmn_JobName AND enabled = 1 

		OPEN TIME_CUR
		FETCH NEXT FROM TIME_CUR INTO @sFrequency,@sInterval,@sTime

		--Current schdule may have several frequency type or one day more than on execution time
		SELECT @CUR_TIME_STATUS = @@FETCH_STATUS

		WHILE (@CUR_TIME_STATUS = 0)
		BEGIN
			IF (@sFrequency = 'Weekly')
			BEGIN
				PRINT 'Weekly' 
				INSERT INTO @tbl_DateItemList(Freq,Day_value,Time_value)
				SELECT 
				'WEEKLY',
				(CASE WHEN Item = 'Mon' THEN
					1
				ELSE
					CASE WHEN Item = 'Tue' THEN
						2
					ELSE
						CASE WHEN Item = 'Wed' THEN
							3
						ELSE
							CASE WHEN Item = 'Thu' THEN
								4
							ELSE
								CASE WHEN Item = 'Fri' THEN
									5
								ELSE
									CASE WHEN Item = 'Sat' THEN
										6
									ELSE
										7
									END
								END
							END
						END
					END
				END ) AS rDay, LEFT(REPLACE(@sTime,':',''),4) FROM dbo.fnSplit(@sInterval,' ') WHERE Item != ''
			END
			IF (@sFrequency = 'Daily')
			BEGIN
				PRINT 'Daily'
				INSERT INTO @tbl_DateItemList(Freq,Time_value)
				SELECT 
				'DAILY', LEFT(REPLACE(@sTime,':',''),4)  
			END
			IF (@sFrequency = 'Monthly')
			BEGIN
				PRINT 'Monthly'
				INSERT INTO @tbl_DateItemList(Freq,Day_value,Time_value)
				SELECT 
				'MONTHLY',CONVERT(INT,REPLACE(@sInterval,'Day ','')), LEFT(REPLACE(@sTime,':',''),4)  
			END
			-- Special frequency type
			IF (@sFrequency LIKE 'Every%Months')
			BEGIN
				PRINT 'Every%Months'
				INSERT INTO @tbl_DateItemList(Freq,Day_value_by_EveryMonth,Time_value)
				SELECT 
				@sFrequency, @sInterval, LEFT(REPLACE(@sTime,':',''),4)  
			END

			FETCH NEXT FROM TIME_CUR INTO @sFrequency,@sInterval,@sTime
			SELECT @CUR_TIME_STATUS = @@FETCH_STATUS
		END
		CLOSE TIME_CUR
		DEALLOCATE TIME_CUR

		SET @tbl_DateItemList_XML = (SELECT * FROM @tbl_DateItemList FOR XML PATH('DATEITEM'),ROOT('XML'))
		IF (@tbl_DateItemList_XML IS NOT NULL)
		BEGIN
			UPDATE mstJobMonitoring SET jmn_FileExecDate = @tbl_DateItemList_XML WHERE jmn_Code = @jmn_Code
			PRINT 'UPDATED JOB SCHEDULE'
		END
	END
	--***Check Schedule job Status ***
	IF (@TYPE = 'CHECK_FILE_DATE')
	BEGIN
		PRINT 'CHECK_FILE_DATE'

		 SELECT @jmn_Code
		-- search which job has been checked
		IF (EXISTS(SELECT c3.* FROM mstJobMonitoring  c1
							INNER JOIN eJobMonitoringSchedule c3 ON c3.jmn_Code= c1.jmn_Code
							LEFT JOIN eJobMonitoringLog c2 ON c3.jms_Code = c2.jms_Code WHERE 
							c2.jml_Code IS NULL AND jms_Date <= GETDATE() AND c1.jmn_Code = @jmn_Code))
		BEGIN
			SET @jms_Code = (SELECT TOP 1 c3.jms_Code FROM mstJobMonitoring  c1
							INNER JOIN eJobMonitoringSchedule c3 ON c3.jmn_Code= c1.jmn_Code
							LEFT JOIN eJobMonitoringLog c2 ON c3.jms_Code = c2.jms_Code WHERE 
							c2.jml_Code IS NULL AND jms_Date <= GETDATE() AND c1.jmn_Code = @jmn_Code ORDER BY jms_Date)
							 
			SET @jml_Time  = (SELECT TOP 1 (DATEPART(HOUR, jms_Date) * 100) +(DATEPART(MINUTE, jms_Date)) FROM mstJobMonitoring  c1
							INNER JOIN eJobMonitoringSchedule c3 ON c3.jmn_Code= c1.jmn_Code
							LEFT JOIN eJobMonitoringLog c2 ON c3.jms_Code = c2.jms_Code WHERE 
							c2.jml_Code IS NULL AND jms_Date <= GETDATE() AND c1.jmn_Code = @jmn_Code ORDER BY jms_Date) 
							  
			--Import file list to temp table
			INSERT INTO @tbl_ExportFileList(FileName,FilePath,IsCheckDate,CheckDate_Prefix,DayDeduct,IsCheckFileCount)
			SELECT 
				jmnfl_FileName,
				jmnfl_FilePath,
				jmnfl_IsCheckDate,
				jmnfl_CheckDate_Prefix,
				jmnfl_DayDeduct,
				jmnfl_IsCheckFileCount
			FROM mstJobMonitoringFileList WHERE jmn_JobName = @jmn_JobName

			--import job schedule to temp table
			INSERT INTO @tbl_DateItemList(Freq,Day_value,Time_value,Day_value_by_EveryMonth)
			SELECT 
				T.C.value('Freq[1]', 'NVARCHAR(100)'),
				T.C.value('Day_value[1]', 'INT'),
				T.C.value('Time_value[1]', 'INT'),
				T.C.value('Day_value_by_EveryMonth[1]', 'NVARCHAR(30)') 
			FROM @jmn_FileExecDate.nodes('/XML/DATEITEM') T(C)
			 
			--Check date value
			SET @iTodayDay = (SELECT DATEPART(dw,@dtToday))
			 
			IF (EXISTS(SELECT * FROM @tbl_DateItemList WHERE Freq= 'DAILY'))
			BEGIN
				SET @bIsRunChecking= 1
				SET @iTime_value = (SELECT TOP 1 Time_value FROM @tbl_DateItemList WHERE Freq= 'DAILY') 
			END
			
			IF (EXISTS(SELECT * FROM @tbl_DateItemList WHERE Freq= 'WEEKLY' AND Day_value = @iTodayDay))
			BEGIN
				SET @bIsRunChecking= 1
				SET @iTime_value = (SELECT TOP 1 Time_value FROM @tbl_DateItemList WHERE Freq= 'WEEKLY' AND Day_value = @iTodayDay) 
			END
			IF (EXISTS(SELECT * FROM @tbl_DateItemList WHERE Freq= 'MONTHLY' AND Day_value = DAY(@dtToday)))
			BEGIN
				SET @bIsRunChecking= 1
				SET @iTime_value = (SELECT TOP 1 Time_value FROM @tbl_DateItemList WHERE Freq= 'MONTHLY' AND Day_value = DAY(@dtToday)) 
			END
			IF (EXISTS(SELECT * FROM @tbl_DateItemList WHERE Freq= 'END_MONTHLY_DATE' ) AND @dtToday = CONVERT(NVARCHAR,DATEADD(s,-1,DATEADD(mm, DATEDIFF(m,0,GETDATE())+1,0)),111))
			BEGIN
				SET @bIsRunChecking= 1
				SET @iTime_value = (SELECT TOP 1 Time_value FROM @tbl_DateItemList WHERE Freq= 'END_MONTHLY_DATE') 
			END

			IF (@jmn_IsHolidayCheck = 1)
			BEGIN
				IF DATENAME(weekday, @dtToday) NOT IN ('Sunday')
				BEGIN
					IF (EXISTS(select HOLIDAY from hitrust.dbo.MXHOLIDAYTB 
					  WHERE COUNTRYKEY in 
							(select COUNTRYKEY from hitrust.dbo.MXCOUNTRYTB 
							  where COUNTRYISO='HKG' and DELETED=0)
							 AND HOLIDAY = CONVERT(NVARCHAR,@dtToday,111)
							  ))
					BEGIN
						SET @bIsRunChecking= 0
					END
				END
			END

			--if execution date is equal today than resume run next step
			IF (@bIsRunChecking = 1)
			BEGIN
				SET @iCurTime = (SELECT RIGHT('0' + CONVERT(NVARCHAR,DATEPART(HH , GETDATE())),2) + RIGHT('0' + CONVERT(NVARCHAR,DATEPART(MINUTE , GETDATE())),2))
		 
				IF (@iCurTime >= @iTime_value)
				BEGIN
					--Step 1 loop which file is need to checking ....
					DELETE FROM @tbl_ErrList
					DECLARE FILE_CUR CURSOR LOCAL FOR
					SELECT FileName,FilePath,IsCheckDate,CheckDate_Prefix,DayDeduct,IsCheckFileCount FROM @tbl_ExportFileList  

					OPEN FILE_CUR
					FETCH NEXT FROM FILE_CUR INTO @FileName,@FilePath,@IsCheckDate,@CheckDate_Prefix,@DayDeduct,@IsCheckFileCount
					 
					SELECT @CUR_STATUS = @@FETCH_STATUS
					WHILE (@CUR_STATUS = 0)
					BEGIN
						BEGIN TRY
							
							DELETE FROM @tbl_Script
							DELETE FROM @tbl_FileName
							DELETE FROM @tbl_LastUpdateFile
							--File Date is calculation by Today +- @DayDeduct
							SET @FORMAT_MM =  RIGHT('0' + CONVERT(NVARCHAR(MAX),MONTH(DATEADD(DAY,@DayDeduct, @dtToday))),2)
							SET @FORMAT_MDD = CONVERT(NVARCHAR,CHAR(64 + MONTH(DATEADD(DAY,@DayDeduct, @dtToday)))) +  RIGHT('0' + CONVERT(NVARCHAR(MAX),DAY(DATEADD(DAY,@DayDeduct, @dtToday))),2)
							SET @FORMAT_YYYYMM = LEFT(CONVERT(NVARCHAR(MAX),DATEADD(DAY,@DayDeduct, @dtToday),112),6)
							SET @FORMAT_YYYYMMDD = CONVERT(NVARCHAR(MAX),DATEADD(DAY,@DayDeduct, @dtToday),112)
							SET @FORMAT_YYMMDD = RIGHT(CONVERT(NVARCHAR(MAX),DATEADD(DAY,@DayDeduct, @dtToday),112),6)
							--Convert file date format
							SET @FileName = REPLACE(@FileName,'[YYYYMMDD]',@FORMAT_YYYYMMDD)  --1
							SET @FileName = REPLACE(@FileName,'[YYMMDD]',@FORMAT_YYMMDD)  --2
							SET @FileName = REPLACE(@FileName,'[YYYYMM]',@FORMAT_YYYYMM)	--3
							SET @FileName = REPLACE(@FileName,'[MDD]',@FORMAT_MDD)			--4
							SET @FileName = REPLACE(@FileName,'[MM]',@FORMAT_MM)			--5
							
							--Check file folder to get time detail
							SET @sScript_Dir = 'DIR ' + @FilePath + @FileName + '*.*'

							INSERT INTO @tbl_Script(command)
							EXEC master..xp_cmdshell @sScript_Dir

							INSERT INTO @tbl_FileName
							EXEC xp_dirtree @FilePath, 1, 1
							--Compare the file date detail
							INSERT INTO @tbl_LastUpdateFile (fName,ModifiedDate)
							SELECT c1.fName, CONVERT(DATETIME,LEFT(command,20)) FROM @tbl_FileName c1 
							INNER JOIN @tbl_Script c2 ON CHARINDEX(c1.fName,c2.command,1) >= 1 WHERE Isfile = 1

							IF (EXISTS(SELECT * FROM @tbl_LastUpdateFile))
							BEGIN
								IF (EXISTS(SELECT * FROM @tbl_LastUpdateFile WHERE CONVERT(NVARCHAR,ModifiedDate,112) = CONVERT(NVARCHAR,@dtToday,112)))
								BEGIN
									PRINT 'NORMAL'

									IF (@IsCheckDate = 1)
									BEGIN
										DECLARE @sFileDateValue NVARCHAR(8)
										SET @sFileDateValue = (SELECT CONVERT(NVARCHAR(MAX),DATEADD(DAY,@DayDeduct, @dtToday),112))
										 
										IF (@IsCheckFileCount = 0)
										BEGIN
											SET @sScript = '
											SET QUOTED_IDENTIFIER ON
											
											IF OBJECT_ID(''tempdb..#Tmp_FileTemp'') IS NOT NULL DROP TABLE #Tmp_FileTemp

											CREATE TABLE #Tmp_FileTemp
											(
												rData NVARCHAR(MAX)
											)
 
											BULK INSERT #Tmp_FileTemp
											FROM '''+ @FilePath + @FileName  +'''  
											WITH (  
											DATAFILETYPE = ''char'',  
											FIELDTERMINATOR = '','',  
											ROWTERMINATOR = ''0x0A'',
											LASTROW = 1,
											CODEPAGE=''65001''
											);  
											 
											SELECT SUBSTRING(rData,'+ CONVERT(NVARCHAR(10),@CheckDate_Prefix) +',8) FROM #Tmp_FileTemp
											'
											PRINT @sScript
											DECLARE @tbl_Prefix TABLE
											(
												rDate NVARCHAR(8)
											)

											INSERT INTO @tbl_Prefix(rDate)
											EXEC sp_executesql @sScript
										  

											SELECT *,@sFileDateValue FROM @tbl_Prefix
											IF (EXISTS(SELECT * FROM @tbl_Prefix WHERE rDate = @sFileDateValue))
											BEGIN
												PRINT 'FILE DATE EQUAL' 
											END
											ELSE
											BEGIN
												PRINT 'ERROR'
												INSERT INTO @tbl_ErrList(FName,ErrMsg)
												VALUES (@FileName,'FILE DATE NOT MATCH')
											END
										END
									END
								
									IF (@IsCheckFileCount = 1)
										BEGIN

											IF OBJECT_ID('tempdb..#Tmp_FileTemp') IS NOT NULL DROP TABLE #Tmp_FileTemp

											CREATE TABLE #Tmp_FileTemp
											(
												rData NVARCHAR(MAX)
											)

											SET @sScript = '
											SET QUOTED_IDENTIFIER ON
											 
 
											BULK INSERT #Tmp_FileTemp
											FROM '''+ @FilePath + @FileName  +'''  
											WITH (  
											FIRSTROW = 2,
											DATAFILETYPE = ''char'',  
											FIELDTERMINATOR = '','',  
											ROWTERMINATOR = ''0x0A'',
											CODEPAGE=''65001''
											);  
											 
											'

											EXEC sp_executesql @sScript
											IF (EXISTS(SELECT * FROM #Tmp_FileTemp))
											BEGIN
												PRINT 'FILE NORMAL' 
											END
											ELSE
											BEGIN
												PRINT 'ERROR'
												INSERT INTO @tbl_ErrList(FName,ErrMsg)
												VALUES (@FileName,'FILE IS EMPTY')
											END
										END
								END
								ELSE
								BEGIN
									-- if ERROR found record the error
									PRINT 'ERROR'
									INSERT INTO @tbl_ErrList(FName,ErrMsg)
									VALUES (@FileName,'FILE TIME NOT MATCH')
								END
							END
							ELSE
							BEGIN
								PRINT 'ERROR'
								INSERT INTO @tbl_ErrList(FName,ErrMsg)
								VALUES ( @FileName,'FILE NOT EXISTS')
							END
							PRINT @FileName
							
						END TRY
						BEGIN CATCH
							INSERT INTO @tbl_ErrList(FName,ErrMsg)
							SELECT @FileName, (SELECT
								@jmn_Code AS jmn_Code,
								ERROR_NUMBER() AS ErrorNumber,
								ERROR_STATE() AS ErrorState,
								ERROR_SEVERITY() AS ErrorSeverity,
								ERROR_PROCEDURE() AS ErrorProcedure,
								ERROR_LINE() AS ErrorLine,
								ERROR_MESSAGE() AS ErrorMessage FOR XML PATH('XML')) AS ERR
						END CATCH

						FETCH NEXT FROM FILE_CUR INTO @FileName,@FilePath,@IsCheckDate,@CheckDate_Prefix,@DayDeduct,@IsCheckFileCount

						SELECT @CUR_STATUS = @@FETCH_STATUS

					END
					CLOSE FILE_CUR
					DEALLOCATE FILE_CUR
					 
					--Step 2 Check the schedule execution status 
					--if job is still running ..
					IF (EXISTS(SELECT *
							FROM 
							msdb.dbo.sysjobs_view job
							JOIN msdb.dbo.sysjobactivity activity ON job.job_id = activity.job_id
							JOIN msdb.dbo.syssessions sess ON sess.session_id = activity.session_id
							JOIN (SELECT MAX( agent_start_date ) AS max_agent_start_date FROM msdb.dbo.syssessions) sess_max
							ON sess.agent_start_date = sess_max.max_agent_start_date
							WHERE run_requested_date IS NOT NULL AND stop_execution_date IS NULL AND job.name = @jmn_JobName))
					BEGIN
						PRINT 'ERROR'
						INSERT INTO @tbl_ErrList(FName,ErrMsg)
						VALUES ( @jmn_JobName ,'JOB IS STILL RUNNING')
						
					END
					--Step 3 Check last execution result
					IF (EXISTS(SELECT *
							FROM
							(
								SELECT j.name as job_name,  run_datetime = max(CONVERT(DATETIME, RTRIM(run_date)) +  (run_time * 9 + run_time % 10000 * 6 + run_time % 100 * 10) / 216e4)
								FROM msdb..sysjobhistory h
								INNER JOIN msdb..sysjobs j on h.job_id = j.job_id GROUP BY j.name
							) t
							INNER JOIN msdb..sysjobs j on t.job_name = j.name
							INNER JOIN msdb..sysjobhistory h on	j.job_id = h.job_id 
								AND t.run_datetime = (CONVERT(DATETIME, RTRIM(h.run_date)) +  (h.run_time * 9 + h.run_time % 10000 * 6 + h.run_time % 100 * 10) / 216e4)
							    AND DATEADD(DAY, DATEDIFF(DAY, 0, t.run_datetime), 0) = DATEADD(DAY, DATEDIFF(DAY, 0, GETDATE()), 0)
							WHERE run_status = 0 AND job_name = @jmn_JobName))
					BEGIN
						PRINT 'ERROR'
						INSERT INTO @tbl_ErrList(FName,ErrMsg)
						VALUES (  @jmn_JobName,'JOB EXECUTION FAIL')
					END

					--Finally if error found create error file.
					IF (EXISTS(SELECT * FROM @tbl_ErrList))
					BEGIN
						SET @sErrSource = ''
						SELECT @sErrSource = COALESCE(@sErrSource +' , '+ CHAR(13), ',') + FName + ' - ' + ISNULL(ErrMsg,'') + CHAR(13)   FROM @tbl_ErrList WHERE ErrMsg != ''
						SET @sScript = '
						DECLARE @sSource NVARCHAR(MAX)
						DECLARE @OLE INT
						DECLARE @FileID INT
						DECLARE @File_Path NVARCHAR(MAX)
						DECLARE @isExists INT

						SET @File_Path = '''+ @jmn_LogFilePath + @jmn_JobName + '.TXT' +'''

						SELECT @sSource = ''' +'INFO  ' + 
						LEFT(REPLACE(CONVERT(varchar, SYSDATETIME(), 121),'.',','),23) + ' ' + 
						  RIGHT(SPACE(6) + (DATEPART(hour, GETDATE()) * 3600) + (DATEPART(minute, GETDATE()) * 60) + DATEPART(second, GETDATE()),6)
						   + 'ms '	
						   + LEFT('MSSQL JOB' + SPACE(23) ,23)
						   + @jmn_JobName + ' - '
						   +  @sErrSource +'''
	 
						EXECUTE sp_OACreate ''Scripting.FileSystemObject'', @OLE OUT
						EXECUTE sp_OAMethod @OLE, ''OpenTextFile'', @FileID OUT, @File_Path, 8, 1
						EXECUTE sp_OAMethod @FileID, ''WriteLine'', Null, @sSource
						EXECUTE sp_OAMethod @FileID, ''Close'', Null, Null
						EXECUTE sp_OADestroy @FileID'
	
						PRINT @sScript
						EXEC sp_executesql @sScript
						WAITFOR DELAY '00:00:10';
						INSERT INTO eJobMonitoringLog(jml_Date,jmn_Code,jml_Time,jml_Status,jms_Code) VALUES (@dtToday,@jmn_Code,@jml_Time,0,@jms_Code)
						PRINT 'WRITE ERROR LOG'
					END
					ELSE
					BEGIN
						INSERT INTO eJobMonitoringLog(jml_Date,jmn_Code,jml_Time,jml_Status,jms_Code) VALUES (@dtToday,@jmn_Code,@jml_Time,1,@jms_Code)
					END
					--Record Log 
				END
				ELSE
				BEGIN
					PRINT 'CURRENT TIME IS LESS THAN EXECUTION TIME THEREFORE NOTHING TO DO'
				END
			END 
		END
		ELSE
		BEGIN
			PRINT 'JOB IS ALREDAY CHECKED'
		END
	END
END
GO
/****** Object:  StoredProcedure [dbo].[sp_JobMonitoring_BATCH]    Script Date: 5/17/2022 9:57:52 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_JobMonitoring_BATCH]
AS
BEGIN
	SET DATEFIRST 1;
	EXEC sp_configure 'Ole Automation Procedures', 1
	DECLARE @CUR_STATUS INT
	DECLARE @dtToday DATETIME

	DECLARE @jmn_Code		INT
	DECLARE @jmn_JobName	NVARCHAR(100)
	DECLARE @jmn_Est_Imp_Minute INT
	DECLARE @Freq			NVARCHAR(100)
	DECLARE @Day_value		INT
	DECLARE @Time_value		INT

	SET @dtToday =  (SELECT CONVERT(NVARCHAR,GETDATE(),111))
	
	DECLARE SCHEDULE_CUR CURSOR LOCAL FOR
		SELECT c1.jmn_Code,jmn_JobName,jmn_Est_Imp_Minute FROM mstJobMonitoring  c1
			INNER JOIN eJobMonitoringSchedule c3 ON c3.jmn_Code= c1.jmn_Code
			LEFT JOIN eJobMonitoringLog c2 ON c3.jms_Code = c2.jms_Code WHERE 
			c2.jml_Code IS NULL AND jms_Date <= GETDATE() -- Get which scheduled job has not checked

	OPEN SCHEDULE_CUR
	FETCH NEXT FROM SCHEDULE_CUR INTO @jmn_Code,@jmn_JobName,@jmn_Est_Imp_Minute
					 
	SELECT @CUR_STATUS = @@FETCH_STATUS
	WHILE (@CUR_STATUS = 0)
	BEGIN
		DECLARE @pRtnXML XML
		DECLARE @pXML XML
		SET @pXML = '
		<ROOT>
				<TYPE>CHECK_FILE_DATE</TYPE>
				<jmn_JobName>'+ @jmn_JobName +'</jmn_JobName>
		</ROOT>'

		EXEC sp_JobMonitoring  @pXML,@pRtnXML OUTPUT
 

		FETCH NEXT FROM SCHEDULE_CUR INTO @jmn_Code,@jmn_JobName,@jmn_Est_Imp_Minute
		SELECT @CUR_STATUS = @@FETCH_STATUS
	END
	CLOSE SCHEDULE_CUR
	DEALLOCATE SCHEDULE_CUR
END
GO
/****** Object:  StoredProcedure [dbo].[sp_JOBS_TESTING]    Script Date: 5/17/2022 9:57:52 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[sp_JOBS_TESTING]
AS
BEGIN
	PRINT 'UPDATE SCHEDULE'
	/*


--select * FROM MonthlyStatementDateTB
--UPDATE BCMDB.dbo.MonthlyStatementDateTB SET StatementDate = '2020/10/1'
--select * FROM CSCustMasterTB

	JOB_CSS_DAY_DIV_TXNS_DSB

	SELECT * FROM DSBDB..TB_CSS_DAY_BATCH_DATE
	SELECT * FROM  DSBDB..TB_RTGL_IPOD_SUB_BATCH_DATE
	SELECT * FROM BPSS..TB_CTRISKS_BATCHDATE 
	SELECT * FROM DSBDB.dbo.TB_CYCLEDATE
	select * FROM DSBDB.dbo.TB_CFZXXCU_BATCHDATE 
 
	*/
	PRINT 'CHECK DATA UPDATE'
	/*
	SELECT
tbl.name
,ius.last_user_update
,ius.user_updates
,ius.last_user_seek
,ius.last_user_scan
,ius.last_user_lookup
,ius.user_seeks
,ius.user_scans
,ius.user_lookups
FROM
sys.dm_db_index_usage_stats ius INNER JOIN
sys.tables tbl ON (tbl.OBJECT_ID = ius.OBJECT_ID)
ORDER BY last_user_update DESC

select * FROM TB_OPTOUT_LIST ORDER BY FileDate

	*/
	PRINT 'FILE LOCK'
	/*
	SELECT * from hitrust..MXRSRCLOCKTB
	*/
	PRINT 'BULK REDEEM'
/*

 select * from bpss..TB_BULK_REDEEM_INSTR
 order by Stock_Deposit_Date desc

 select * from hitrust..mxfundtb
 where FUNDKEY = 20248

 update bpss..TB_BULK_REDEEM_INSTR
 set Stock_Deposit_Date = '20201102'
 ,orderdate = '20201102',
 effectivedate = '20201102'
 where fundkey = 20248

 select * from bpss..TB_BULK_REDEEM_CONTRACT
  where fundkey = 20248


   update bpss..TB_BULK_REDEEM_INSTR
 set STATUS = 'CONFIRMED'
 where fundkey = 20248

*/
	PRINT 'CHECK JOB'
	/*
select JobName,
 STUFF((
            SELECT ', [' +  c2.ScheduleName + ' ' + c2.Frequency + ' ' + c2.Interval + ' '+  CONVERT(NVARCHAR,c2.Time) + ']'
            FROM vwJobScheduleDetail c2 WHERE c1.JobName = c2.JobName
            FOR XML PATH('')
            ), 1, 1, '') AS ScheduleTime
			INTO #tmp_Time
FROM vwJobScheduleDetail  c1
GROUP BY JobName
ORDER BY JobName


SELECT abc = STUFF((
            SELECT ',' + NAME
            FROM temp1
            FOR XML PATH('')
            ), 1, 1, '')
FROM temp1


select * FROM tmp_prod_sysJob c1 LEFT JOIN #tmp_Time c2 ON c1.name = c2.JobName
ORDER BY c1.name
	*/
	PRINT 'TFX'
	/*
	Select * from BPSS..tb_ctrisks_batchdate  where reckey =  12        
	UPDATE BPSS..tb_ctrisks_batchdate SET BATCHDATE='2020/10/27' where reckey =  12        
	*/

	PRINT 'JOB_FX_RATE_IMPORT'
	/*
	
	E:\CDDownload\FXZINXR_20200702.TXT
	*must update the file date

	UPDATE tb_ctrisks_batchdate SET BATCHDATE = '2020/11/9' where reckey = 5 
	Select BATCHDATE from tb_ctrisks_batchdate where reckey = 5 

	SELECT		(CASE WHEN COUNT(*)>0 THEN 1 ELSE 0 END) AS RETURNCODE FROM		
	HITRUST..MXHOLIDAYTB INNER JOIN	
	HITRUST..MXCOUNTRYTB 	ON	HITRUST..MXCOUNTRYTB.COUNTRYKEY = HITRUST..MXHOLIDAYTB.COUNTRYKEY 
	WHERE		COUNTRYISO = 'HKG' 	AND	HITRUST..MXCOUNTRYTB.DELETED = 0 	AND	(DATEDIFF(D,HITRUST..MXHOLIDAYTB.HOLIDAY,CAST ('2020-07-02' AS DATETIME))=0 		
	OR 		(DATEPART(DW,CAST ('2020-07-02' AS DATETIME))-1 = 0)	)	--SUNDAY 
	
	*/
	
	PRINT 'JOB_IPOD_REJECT_SUB'
	/*
	select Batch_date from DSBDB..TB_RTGL_IPOD_SUB_BATCH_DATE where COMPANYKEY =1 
	UPDATE DSBDB..TB_RTGL_IPOD_SUB_BATCH_DATE SET Batch_date = '2020/7/2' where COMPANYKEY =1 
	*/

	PRINT 'Job_PledgeOD_Import_DSB'

	/*
	SELECT * FROM BPSS.dbo.TB_CTRISKS_BatchDate WHERE RECKEY = 20

	SELECT BatchDate, Dpart FROM BPSS..TB_BatchDate_Control

	UPDATE BPSS..TB_BatchDate_Control SET BatchDate = '2020/7/3'

	SELECT * FROM DSBDB..DSBRBLTB
	SELECT * FROM DSBDB..DSBRODTB
	*/
	PRINT 'JOB_CTRISKS_EXPORT_DUMMY'
	/*
	Select *, CSSFTPPWD_S = BPSS.DBO.FN_DECRYPT_UT(CSSFTPPWD) from BPSS..tb_ctrisks_batchdate where reckey = 1 

	UPDATE BPSS..tb_ctrisks_batchdate SET BATCHDATE = '2020/9/22' where reckey = 1 

	*/


	PRINT 'JOB_AUTO_SETTLE_MVB'


	PRINT 'JOB_CF2UT_CUST_REL_END_LIST'
	/*
	select convert(char(8),batchdate,112) FROM BPSS.dbo.TB_BatchDate_Control

	UPDATE BPSS.dbo.TB_BatchDate_Control SET batchdate = '2020/9/23'
	 if (line != null && line.StartsWith("0") && line.Substring(394, 8) == strFileBatchDate)
	 "CF_Z_UT_CRED_" + strBatchDate + ".TXT";  under download folder
	*/
END

 
GO
/****** Object:  StoredProcedure [dbo].[sp_LinkServer]    Script Date: 5/17/2022 9:57:52 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
CREATE procedure [dbo].[sp_LinkServer]
(
@pServer NVARCHAR(100),
@pDatasrc NVARCHAR(100),
@pRmtuser NVARCHAR(100),
@pRmtpassword NVARCHAR(100))

AS
BEGIN
/*

DECLARE @pServer NVARCHAR(100)
DECLARE @pDatasrc NVARCHAR(100)
DECLARE @pRmtuser NVARCHAR(100)
DECLARE @pRmtpassword NVARCHAR(100)

SET @pServer = 'LOCAL_SERVER'
SET @pDatasrc = 'SITVUTDBCB01'
SET @pRmtuser = 'hitrust'
SET @pRmtpassword = 'password'

EXEC sp_LinkServer @pServer,
@pDatasrc,
@pRmtuser,
@pRmtpassword
*/
EXEC sp_addlinkedserver
	@server = @pServer, 
	@srvproduct = 'MS SQL',
	@datasrc = @pDatasrc , 
	@provider = 'SQLNCLI'


EXEC sp_addlinkedsrvlogin
	@rmtsrvname = @pServer , --Server Name
	@useself = 'false' ,
	@locallogin = NULL ,
	@rmtuser = @pRmtuser , 
	@rmtpassword = @pRmtpassword --Password
END


GO
/****** Object:  StoredProcedure [dbo].[sp_Log]    Script Date: 5/17/2022 9:57:52 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_Log]
(
@logName NVARCHAR(100) ,
@logValue NVARCHAR(MAX)
)
AS
BEGIN
	DECLARE @pXML XML

	SET @pXML = (SELECT @logValue AS Data FOR XML PATH('XML'))
	INSERT INTO eLog(logName,logXML) VALUES (@logName,@pXML)
END
GO
/****** Object:  StoredProcedure [dbo].[SP_RELEASE_MEMORY]    Script Date: 5/17/2022 9:57:52 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_RELEASE_MEMORY]
AS
BEGIN
	CREATE TABLE #temp (
		spid int,
		status varchar(256),
		loginname varchar(256),
		hostname varchar(256),
		blkby varchar(256),
		dbname varchar(256),
		command varchar(256),
		cputime int,
		diskio int,
		lastbatch varchar(256),
		programName varchar(256),
		spid2 int,
		requestid int) 
 
	INSERT INTO #temp
	EXECUTE sp_who2 
 
	select * from #temp where dbname = 'Fax_ocean'

	select spid2,COUNT(spid2) from #temp where dbname='Fax_ocean'
	group by spid2 

	select count(*) from #temp
	--having dbname = 'Fax_ocean'

	Drop table #temp

END
GO
/****** Object:  StoredProcedure [dbo].[sp_Rpt_GenReport]    Script Date: 5/17/2022 9:57:52 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[sp_Rpt_GenReport]
(
@pXML XML
)
AS
/*
DECLARE @pRtnXML XML
EXEC [sp_Rpt_GenReport] '
<ROOT>
		<TYPE>SARWMO19019</TYPE>
		<YMD_para1>20201231</YMD_para1>
		<YMD_para2>20210101</YMD_para2>
</ROOT>',@pRtnXML OUTPUT
SELECT @pRtnXML

DECLARE @pRtnXML XML
EXEC [sp_Rpt_GenReport] '
<ROOT>
		<TYPE>SARWMD21016</TYPE>
		<YMD_para1>20200701</YMD_para1>
		<YMD_para2>20210228</YMD_para2>
</ROOT>',@pRtnXML OUTPUT
SELECT @pRtnXML

DECLARE @pRtnXML XML
EXEC [sp_Rpt_GenReport] '
<ROOT>
		<TYPE>SARWMD21016</TYPE>
		<YMD_para1>20190101</YMD_para1>
		<YMD_para2>20191231</YMD_para2>
</ROOT>',@pRtnXML OUTPUT
SELECT @pRtnXML

DECLARE @pRtnXML XML
EXEC [sp_Rpt_GenReport] '
<ROOT>
		<TYPE>Extract Unit Trust Non-Cash dividend transactions</TYPE>
		<YMD_para1>20190101</YMD_para1>
		<YMD_para2>20191231</YMD_para2>
</ROOT>',@pRtnXML OUTPUT
SELECT @pRtnXML
 
 DECLARE @pRtnXML XML
EXEC [sp_Rpt_GenReport] '
<ROOT>
		<TYPE>Extract Switching orders to WMO</TYPE>
		<YMD_para1>20210201</YMD_para1> 
</ROOT>',@pRtnXML OUTPUT
SELECT @pRtnXML

DECLARE @pRtnXML XML
EXEC [sp_Rpt_GenReport] '
<ROOT>
		<TYPE>PBD-IA migration rules</TYPE>
</ROOT>',@pRtnXML OUTPUT
SELECT @pRtnXML

--3900
DECLARE @pRtnXML XML
EXEC [sp_Rpt_GenReport] '
<ROOT>
		<TYPE>WMD20026-trans</TYPE>
		<YMD_para1>20200101</YMD_para1>
		<YMD_para2>20210101</YMD_para2>
</ROOT>',@pRtnXML OUTPUT
SELECT @pRtnXML

DECLARE @pRtnXML XML
EXEC [sp_Rpt_GenReport] '
<ROOT>
		<TYPE>WMD20026-holdings</TYPE>
		<YMD_para1>20201231</YMD_para1>
		<YMD_para2>20210101</YMD_para2>
</ROOT>',@pRtnXML OUTPUT
SELECT @pRtnXML

DECLARE @pRtnXML XML
EXEC [sp_Rpt_GenReport] '
<ROOT>
		<TYPE>SARWMD21003</TYPE>
		<YMD_para1>20200101</YMD_para1>
		<YMD_para2>20201231</YMD_para2>
</ROOT>',@pRtnXML OUTPUT
SELECT @pRtnXML

DECLARE @pRtnXML XML
EXEC [sp_Rpt_GenReport] '
<ROOT>
		<TYPE>UT_Balance</TYPE>
		<YMD_para1>20210101</YMD_para1> 
</ROOT>',@pRtnXML OUTPUT
SELECT @pRtnXML

DECLARE @pRtnXML XML
EXEC [sp_Rpt_GenReport] '
<ROOT>
		<TYPE>HIB0007</TYPE> 
</ROOT>',@pRtnXML OUTPUT
SELECT @pRtnXML 
 
*/
BEGIN

	DECLARE @TYPE NVARCHAR(200)
	DECLARE @LinkSrv_DB_Name NVARCHAR(MAX)
	DECLARE @LinkSrv_Name NVARCHAR(MAX)
	DECLARE @Local_DB_Name NVARCHAR(MAX)
	DECLARE @sScript NVARCHAR(MAX)
	DECLARE @tbl_Name NVARCHAR(MAX)	
	DECLARE @sDBScript NVARCHAR(MAX)
	DECLARE @sExportPath NVARCHAR(MAX)
	DECLARE @sImportPath NVARCHAR(MAX)
	DECLARE @sSEARCH_COLUMN NVARCHAR(MAX)
	DECLARE @sUSER NVARCHAR(100)
	DECLARE @sFuncType NVARCHAR(3)
	DECLARE @sSourceFile NVARCHAR(300)
	DECLARE @sYMD_para1 NVARCHAR(8)
	DECLARE @sYMD_para2 NVARCHAR(8)

/*
SAR#WMO19018
The following query retrieve the fund house holding as of 31 Dec 2018
*/
--DROP TABLE #FX
--DROP TABLE #Result
/*FX rate at 31 Dec 2018*/

	SELECT 
		@TYPE			= T.C.value('TYPE[1]', 'NVARCHAR(200)'),
		@LinkSrv_DB_Name	= T.C.value('LinkSrv_DB_Name[1]', 'NVARCHAR(100)'),
		@LinkSrv_Name		= T.C.value('LinkSrv_Name[1]', 'NVARCHAR(100)'),
		@Local_DB_Name		= T.C.value('Local_DB_Name[1]', 'NVARCHAR(100)'),
		@sExportPath		= T.C.value('ExportPath[1]', 'NVARCHAR(200)'),
		@sImportPath		= T.C.value('ImportPath[1]', 'NVARCHAR(200)'),
		@sFuncType			= T.C.value('FuncType[1]', 'NVARCHAR(3)'),
		@sSourceFile		= T.C.value('SourceFile[1]', 'NVARCHAR(300)'),
		@sUSER				= T.C.value('USER[1]', 'NVARCHAR(200)'),
		@sYMD_para1			= T.C.value('YMD_para1[1]', 'NVARCHAR(8)'),
		@sYMD_para2			= T.C.value('YMD_para2[1]', 'NVARCHAR(8)'),
		@sSEARCH_COLUMN		= T.C.value('SEARCH_COLUMN[1]', 'NVARCHAR(200)')
		FROM @pXML.nodes('/ROOT') T(C)

	IF (@TYPE = 'SARWMO19019')
	BEGIN

		SET @sScript = '
		IF OBJECT_ID(''tempdb..#FX'') IS NOT NULL DROP TABLE #FX
		IF OBJECT_ID(''tempdb..#tmp_MXPRICETB'') IS NOT NULL DROP TABLE #tmp_MXPRICETB
		IF OBJECT_ID(''tempdb..#Result'') IS NOT NULL DROP TABLE #Result
		
		SELECT CURRENCYKEY, FXDATE, FROMCURRENCY, MIDRATE 
		INTO #FX
		FROM HITRUST..MXFXRATETB WITH (NOLOCK)
		WHERE CONVERT(varchar(8),fxdate,112) = ''20201231''
		AND COMPANY = 1 and EXTSOURCEKEY = 3

		INSERT INTO #FX VALUES (1,'''+ @sYMD_para1 +''',1,1)

		SELECT MAX(MXPRICETB.PRICEDATE) AS PRICEDATE,MXPRICETB.UNITCLASS 
		INTO 
		#tmp_MXPRICETB
		FROM HITRUST..MXPRICETB  WITH (NOLOCK)
									 WHERE   CONVERT(varchar(8),MXPRICETB.PRICEDATE,112) <='''+ @sYMD_para1 +'''
									 AND DELETED = 0
									 AND COMPANY = 1
									 GROUP BY MXPRICETB.UNITCLASS

		/*Result*/
		SELECT 
		TB_FUND.FUNDCODE AS FundCode
		,TB_CURR.CURRENCYISO AS FundCurrency
		,TB_UNITCLASS.CLASSCODE as ClassCode
		,SUM(ISNULL(TB_ACCBAL.CONFIRMEDMOVEMENT,0)) AS SettledHolding
		,(SELECT MXPRICETB.NAVPRICE FROM HITRUST..MXPRICETB   WITH (NOLOCK)
		  WHERE MXPRICETB.UNITCLASS = TB_UNITCLASS.UNITCLASSKEY
		  AND COMPANY = 1
		  AND DELETED = 0
		  AND MXPRICETB.PRICEDATE = (SELECT MAX(PRICEDATE) FROM #tmp_MXPRICETB  WITH (NOLOCK)
									 WHERE UNITCLASS = TB_UNITCLASS.UNITCLASSKEY)) As LatestPrice
		,TB_FX.MIDRATE AS ExchangeRate
		,CONVERT(Decimal(38,10),NUll) AS MarketValueHKD
		INTO #Result
		FROM HITRUST..MXACCBALMOVETB TB_ACCBAL				WITH (NOLOCK)
		INNER JOIN HITRUST..MXACCOUNTTB TB_ACC				WITH (NOLOCK) ON TB_ACC.ACCTKEY = TB_ACCBAL.ACCTKEY
		INNER JOIN HITRUST..MXUNITCLASSTB TB_UNITCLASS		WITH (NOLOCK) ON TB_UNITCLASS.UNITCLASSKEY = TB_ACC.UNITCLASSKEY
		INNER JOIN HITRUST..MXFUNDTB TB_FUND				WITH (NOLOCK) ON TB_UNITCLASS.FUNDKEY = TB_FUND.FUNDKEY AND TB_FUND.COMPANYKEY = 1
		INNER JOIN HITRUST..MXCURRENCYTB TB_CURR			WITH (NOLOCK) ON TB_CURR.CURRENCYKEY = TB_FUND.CURRENCY
		INNER JOIN #FX TB_FX									WITH (NOLOCK) ON TB_FX.FROMCURRENCY = TB_FUND.CURRENCY AND TB_FX.CURRENCYKEY = 1
		WHERE TB_ACCBAL.EFFDATE < '''+ @sYMD_para2 +'''
		GROUP BY TB_FUND.FUNDCODE, TB_CURR.CURRENCYISO, TB_FX.MIDRATE, TB_FUND.FUNDKEY, TB_UNITCLASS.UNITCLASSKEY, TB_UNITCLASS.CLASSCODE
		ORDER BY FUNDCODE

		UPDATE #Result
		SET MarketValueHKD = SettledHolding * LatestPrice * ExchangeRate

		SELECT * FROM #Result

		DROP TABLE #FX
		DROP TABLE #Result'
		
		PRINT @sScript
		EXEC sp_executesql @sScript
	END
	IF (@TYPE = 'SARWMD21016')
	BEGIN
		SET @sScript = '
		IF OBJECT_ID(''tempdb..#TEMP'') IS NOT NULL DROP TABLE #TEMP
	
	select
	left(TB_ID.SSNO,20)																		as CUSTOMER_ID_1
	,substring(TB_ID.SSNO,21,20)															as CUSTOMER_ID_2
	,substring(TB_ID.SSNO,41,20)															as CUSTOMER_ID_3
	,substring(TB_ID.SSNO,61,20)															as CUSTOMER_ID_4
	,substring(TB_ID.SSNO,81,20)															as CUSTOMER_ID_5
	,CONVERT(NCHAR(70),'''')																as CUSTOMER_NAME_1
	,CONVERT(NCHAR(70),'''')																as CUSTOMER_NAME_2
	,CONVERT(NCHAR(70),'''')																as CUSTOMER_NAME_3
	,CONVERT(NCHAR(70),'''')																as CUSTOMER_NAME_4
	,CONVERT(NCHAR(70),'''')																as CUSTOMER_NAME_5
	,(
	select 
		case when count(PORTFOLIOKEY) > 1  then 
			''Joint Account''
		else 
			''Single Account'' 
		end
	from 
		hitrust..MXOWNERTB O 
	where 
		O.PORTFOLIOKEY = TB_PORT.PORTFOLIOKEY 
	group by 
		O.PORTFOLIOKEY
	)																						as Account_Type
	,
	TB_PORT.PORTFOLIONO																	as UT_Account_No
	,(case when VCCust.IDNO is null then ''N'' else ''Y'' end)									as VC_Flag
	,(case when VCCust.IDNO is null then ''Non-VC'' else ''VC'' end)							as VC_Name
	,TB_FUND.FUNDCODE																		as FUND_CODE
	,TB_FUNDDESC.DESCRIPTION																as FUND_NAME
	,TB_FUNDCLASS.CLASSCODE																	as FUND_CLASS
	,isnull(TB_ISIN.CHARFIELD,'''')													AS [ISIN code]
	,TB_CTRACT.ORDERDATE																	as CONTRACT_ORDERDATE
	,TB_CTRACT.CTRACTNO
	--,TB_CTSTATDESC.DESCRIPTION																as CONTRACT_STATUS
	,case 
		when substring(TB_CTRACT.CTRACTNO,1,3) = ''SUB'' then ''Subscription''
		when substring(TB_CTRACT.CTRACTNO,1,3) = ''RED'' then ''Redemptions''
		when substring(TB_CTRACT.CTRACTNO,1,3) = ''SWI'' then ''Switching-in''
		when substring(TB_CTRACT.CTRACTNO,1,3) = ''SWO'' then ''Switching-out''
	end as ''Transation_Type''									--Transation_Type
	--,TB_CTSTATDESC.DESCRIPTION																as Ctract_Status
	,TB_FUNDCCY.CURRENCYISO																	AS Invested_currency
	,TB_TXFINS.NET																			AS Invested_amount_in_original_ccy
	,tbl_HKcomm.NET																			AS Invested_amount_in_hkd
	,TB_CTRACT.NOUNIT																		as Unit
	,TB_CTRACT.PRICE																		as PRICE
	,CASE WHEN TB_FUNDCLASS.CLASSCODE in (''1E'',''1B'')	--Bond/ELI
					  THEN ISNULL(tbl_HKcomm.COMMISSION,0.0)
				 ELSE CASE WHEN LEFT(TB_TXCODEDESC.DESCRIPTION,6) = ''Switch''	--UT
						   THEN CAST(case when ISNULL(tbl_HKcomm.TAX,0.0) = 0.0
										  then  ISNULL(tbl_HKcomm.COMMISSION,0.0)
                          	  		 else case when ISNULL(tbl_HKcomm.COMMISSION,0.0) = 0.0
										  then ISNULL(tbl_HKcomm.TAX,0.0)
									 else case when ISNULL(tbl_HKcomm.TAX,0.0) < ISNULL(tbl_HKcomm.COMMISSION,0.0)
											   then ISNULL(tbl_HKcomm.TAX,0.0)
										  else ISNULL(tbl_HKcomm.COMMISSION,0.0)
										  end
									 end
						   END AS FLOAT)
					  ELSE CASE WHEN ISNULL(TB_FUNDCLASS.CLASSCODE,''?'') = ''O'' --- Guaranteed Funds
								THEN CAST(ISNULL(tbl_HKcomm.TAX,0.0) AS FLOAT) --- Other Fee Amount
						   ELSE CASE WHEN ISNULL(TB_FUNDCLASS.CLASSCODE,''?'') = ''B'' --- Class B Funds
									 THEN CAST( ISNULL(tbl_HKcomm.TAX,0.0) AS FLOAT) --- Other Fee Amount
								ELSE CASE WHEN ISNULL(TB_FUND.EXTERNALID,''?'') = ''A'' or SUBSTRING(TB_FUND.FUNDCODE,1,2) in (''TM'',''VP'',''AI'',''DP'',''DR'',''SC'') --- Templeton ( TM ) / VP (VP) /AIG (AI) / Allianz Dresdner (DP/DR) / Schroders (SC)
										  THEN CAST(ISNULL(tbl_HKcomm.COMMISSION,0.0) AS FLOAT)  --- Commission Amount
									 ELSE CASE WHEN ISNULL(TB_FUND.EXTERNALID,''?'') = ''B'' or SUBSTRING(TB_FUND.FUNDCODE,1,2) in (''AC'',''HS'',''IV'',''SB'')      --- ACM (AC) / HSBC (HS) / Investec (IV) /Schroders (SB)
											   THEN CAST(ISNULL(tbl_HKcomm.COMMISSION,0.0) AS FLOAT)  --- Commission Amount
										   ELSE CASE WHEN ISNULL(TB_FUND.EXTERNALID,''?'') = ''C'' or SUBSTRING(TB_FUND.FUNDCODE,1,2) in (''FI'',''IN'')                --- Fid (FI) /Invesco (IN)
													 THEN CAST( ISNULL(tbl_HKcomm.TAX,0.0) AS FLOAT) --- Other Fee Amount
												ELSE CASE WHEN ISNULL(TB_FUND.EXTERNALID,''?'') = ''D'' or SUBSTRING(TB_FUND.FUNDCODE,1,2) in (''JF'')                --- JF (JF)  / Allianz Dresdner (DB)
														  THEN cast(ISNULL(tbl_HKcomm.COMMISSION,0.0) AS FLOAT)  --- Commission Amount
													  ELSE CAST(ISNULL(tbl_HKcomm.COMMISSION,0.0) AS FLOAT)  --- Commission Amount [by default]
													  END  --- EXTERNALID = ''D''
												END  --- EXTERNALID = ''C''
										   END  --- EXTERNALID = ''B''
									 END  --- EXTERNALID = ''A''
								END  --- CLASS B
						   END  --- CLASS O
					  END ---UT
				 END																AS Commission_Amount_in_HKD
	,ISNULL(TB_AGENT_CODE.charfield,TB_AGENT.AGENTNAME) as ''Agent_Code'' --Agent_Code
	,substring(ISNULL(TB_AGENT_CODE.charfield,TB_AGENT.AGENTNAME),1,2) as ''Branch_Code''
	--,substring(TB_BRANCH.BRANCHNAME,1,2) as ''Branch_Code''		--Branch_Code
	--,substring(TB_BRANCH.BRANCHNAME,5,LEN(TB_BRANCH.BRANCHNAME)-1) as ''Branch_Name''--Branch_Name
	,tbl_channel.Channel										--Channel
	,ISNULL(TB_Ctract.Reference,'''') as Contract_Reference
	,TB_PORT.PORTFOLIOKEY
	into #temp
	from HITRUST..MXPORTFOLIOTB TB_PORT						WITH (NOLOCK)
		INNER JOIN HITRUST..MXACCOUNTTB TB_ACC				WITH (NOLOCK)	ON TB_PORT.PORTFOLIOKEY = TB_ACC.PORTFOLIOKEY
		INNER JOIN HITRUST..MXUNITCLASSTB TB_FUNDCLASS		WITH (NOLOCK)	ON TB_ACC.UNITCLASSKEY = TB_FUNDCLASS.UNITCLASSKEY and TB_FUNDCLASS.DELETED = 0
		INNER JOIN HITRUST..MXPROFILETB TB_PROF				WITH (NOLOCK)	ON TB_PROF.PROFILEKEY = TB_PORT.PROFILEKEY
		left join DSBDB..tb_frequentTrade_VC VCCust with (nolock) on VCCust.idno = TB_PROF.SSNO
		left join bpss..TB_RESTRICTED_TXNS_ALL_IDS TB_ID with (nolock) on TB_ID.PortNum = TB_PORT.PORTFOLIONO
		-- CONTRACT INFORMATION
		INNER JOIN HITRUST..MXCTRACTTB TB_CTRACT			WITH (NOLOCK)	ON TB_CTRACT.ACCTKEY = TB_ACC.ACCTKEY
		INNER JOIN HITRUST..MXCTSTATUSTB TB_CTSTAT			WITH (NOLOCK)	ON TB_CTRACT.CTSTATUSKEY = TB_CTSTAT.CTSTATUSKEY
		INNER JOIN HITRUST..MXLANGDESCTB TB_CTSTATDESC		WITH (NOLOCK)	ON TB_CTSTAT.DESCID = TB_CTSTATDESC.DESCKEY
		INNER JOIN HITRUST..MXTRANCODETB TB_TXCODE			WITH (NOLOCK)	ON TB_CTRACT.TRANCODEKEY = TB_TXCODE.TRANCODEKEY
		INNER JOIN HITRUST..MXLANGDESCTB TB_TXCODEDESC		WITH (NOLOCK)	ON TB_TXCODE.DESCID = TB_TXCODEDESC.DESCKEY
		INNER JOIN HITRUST..MXCURRENCYTB TB_CUR				WITH (NOLOCK)	ON TB_CTRACT.DEALCCY = TB_CUR.CURRENCYKEY
		
		LEFT  JOIN hitrust..MXCTRACTSUBTYPETB TB_CTSUBTYPE	WITH (NOLOCK)	ON TB_CTRACT.CTRACTSUBTYPE = TB_CTSUBTYPE.CTRACTSUBTYPEKEY
		LEFT  JOIN hitrust..MXLANGDESCTB TB_CTSUBTYPEDESC	WITH (NOLOCK)	ON TB_CTSUBTYPE.DESCID = TB_CTSUBTYPEDESC.DESCKEY
		INNER JOIN HITRUST..MXTRANSACTIONTB	TB_TRANS		WITH (NOLOCK)	ON TB_CTRACT.CTRACTKEY = TB_TRANS.TRANSACTIONKEY
		-- FUND INFORMATION
		INNER JOIN HITRUST..MXFUNDTB TB_FUND				WITH (NOLOCK)	ON TB_FUNDCLASS.FUNDKEY = TB_FUND.FUNDKEY 
		INNER JOIN HITRUST..MXLANGDESCTB TB_FUNDDESC		WITH (NOLOCK)	ON TB_FUND.DESCID = TB_FUNDDESC.DESCKEY
		INNER JOIN HITRUST..MXCURRENCYTB TB_FUNDCCY			WITH (NOLOCK)	ON TB_FUND.CURRENCY = TB_FUNDCCY.CURRENCYKEY
		LEFT JOIN (SELECT TB_UDF.* FROM HITRUST..MXUSERDEFINEDFIELDTB TB_UDF WITH (NOLOCK) 
						INNER JOIN HITRUST..MXUSERDEFINEDFIELDTYPETB TB_UDFT WITH (NOLOCK)
						ON TB_UDFT.USERDEFINEDFIELDTYPEKEY=TB_UDF.USERDEFINEDFIELDTYPEKEY 
						AND TB_UDFT.CHARFIELDNAME  = ''ISIN Number'' AND COMPANY=1 AND TB_UDF.DELETED=0 AND TB_UDFT.DELETED=0) TB_ISIN
						ON TB_ISIN.xrefkey=TB_FUND.FUNDKEY AND TB_ISIN.xrefkeytype=4
		--Settlement
		LEFT JOIN HITRUST..MXSETTLESPLITTB  TB_SET_SPLIT    WITH (NOLOCK)	ON   TB_SET_SPLIT.TRANSACTIONKEY = TB_CTRACT.CTRACTKEY
		LEFT JOIN HITRUST..MXSETTLEACTB TB_SET_ACC			WITH (NOLOCK)   ON   TB_SET_ACC.SETTLEACKEY      = TB_SET_SPLIT.SETTLEKEY
		INNER JOIN hitrust..MXTRANFINSTB TB_TXFINS			WITH (NOLOCK)	ON TB_CTRACT.CTRACTKEY = TB_TXFINS.TRANSACTIONKEY and TB_FUND.CURRENCY = TB_TXFINS.CURRENCYKEY
		inner join hitrust..MXTRANFINSTB tbl_HKcomm			with (nolock)	on tbl_HKcomm.TRANSACTIONKEY = TB_CTRACT.CTRACTKEY and tbl_HKcomm.CURRENCYKEY = 1
		--Channel
		left join dsbdb..VW_UDF_Channel tbl_channel with (nolock) on tbl_channel.CTRACTKEY = TB_CTRACT.CTRACTKEY 
		left join DSBDB..vw_udf_AGENT_CODE TB_AGENT_CODE	WITH (NOLOCK) ON TB_AGENT_CODE.ctractkey = TB_CTRACT.CTRACTKEY 
		left join hitrust..MXCOMMSPLITTB tb_comm with (nolock) on tb_comm.CTRACTKEY = TB_CTRACT.CTRACTKEY
		left join HITRUST..MXAGENTTB TB_AGENT WITH (NOLOCK) ON TB_AGENT.AGENTKEY = tb_comm.AGENTKEY 
		----Customer Name
		WHERE TB_CTRACT.COMPANY = 1
		AND TB_CTRACT.TRANCODEKEY in (''BaRedemptions'',''BaSales'',''BaSwitchIn'',''BaSwitchOut'')
		AND TB_CTRACT.CTRACTNO not like ''REV%''
		AND TB_FUNDCLASS.DELETED = 0
		and TB_CTRACT.CANCELLED = 0
		and TB_CTSTATDESC.DESCRIPTION = ''Settled/Registered''
		AND ((TB_CTSUBTYPEDESC.DESCRIPTION NOT IN (''TFRIN Transfer In'',''TFROUT Transfer Out'') OR TB_CTSUBTYPEDESC.DESCRIPTION IS NULL))
		AND SUBSTRING(TB_PORT.PORTFOLIONO, 9, 1) IN (''1'',''3'',''4'',''9'')
		AND (convert(char(8),TB_CTRACT.orderdate,112) >= '''+ @sYMD_para1 +''' and convert(char(8),TB_CTRACT.orderdate,112) <= '''+ @sYMD_para2 +''')
		order by TB_CTRACT.CTRACTNO

		UPDATE #TEMP
		SET CUSTOMER_NAME_1 =isnull(TB_PROF.NAME,'''') 
		FROM #TEMP T
		INNER JOIN HITRUST..MXOWNERTB TB_OWNER ON T.PORTFOLIOKEY = TB_OWNER.PORTFOLIOKEY
		INNER JOIN HITRUST..MXPROFILETB TB_PROF ON TB_PROF.SSNO = T.CUSTOMER_ID_1 AND TB_PROF.PROFILEKEY = TB_OWNER.PROFILEKEY

		UPDATE #TEMP
		SET CUSTOMER_NAME_2 =isnull(TB_PROF.NAME,'''') 
		FROM #TEMP T
		INNER JOIN HITRUST..MXOWNERTB TB_OWNER ON T.PORTFOLIOKEY = TB_OWNER.PORTFOLIOKEY
		INNER JOIN HITRUST..MXPROFILETB TB_PROF ON TB_PROF.SSNO = T.CUSTOMER_ID_2 AND TB_PROF.PROFILEKEY = TB_OWNER.PROFILEKEY
   
		UPDATE #TEMP
		SET CUSTOMER_NAME_3 =isnull(TB_PROF.NAME,'''') 
		FROM #TEMP T
		INNER JOIN HITRUST..MXOWNERTB TB_OWNER ON T.PORTFOLIOKEY = TB_OWNER.PORTFOLIOKEY
		INNER JOIN HITRUST..MXPROFILETB TB_PROF ON TB_PROF.SSNO = T.CUSTOMER_ID_3 AND TB_PROF.PROFILEKEY = TB_OWNER.PROFILEKEY

		UPDATE #TEMP
		SET CUSTOMER_NAME_4 =isnull(TB_PROF.NAME,'''') 
		FROM #TEMP T
		INNER JOIN HITRUST..MXOWNERTB TB_OWNER ON T.PORTFOLIOKEY = TB_OWNER.PORTFOLIOKEY
		INNER JOIN HITRUST..MXPROFILETB TB_PROF ON TB_PROF.SSNO = T.CUSTOMER_ID_4 AND TB_PROF.PROFILEKEY = TB_OWNER.PROFILEKEY
  
  		UPDATE #TEMP
		SET CUSTOMER_NAME_5 =isnull(TB_PROF.NAME,'''') 
		FROM #TEMP T
		INNER JOIN HITRUST..MXOWNERTB TB_OWNER ON T.PORTFOLIOKEY = TB_OWNER.PORTFOLIOKEY
		INNER JOIN HITRUST..MXPROFILETB TB_PROF ON TB_PROF.SSNO = T.CUSTOMER_ID_5 AND TB_PROF.PROFILEKEY = TB_OWNER.PROFILEKEY
   
		select * from #TEMP
		'
		PRINT @sScript
		EXEC sp_executesql @sScript
	END
	IF (@TYPE = 'Extract Unit Trust Non-Cash dividend transactions')
	BEGIN
		SELECT
		TB_FUND.FUNDCODE 		AS FundCode, 
		CONVERT(varchar(20), hitrust.dbo.MXCURRENCYTB.CURRENCYISO)		AS FundCurrency,
		CONVERT(varchar(20), TB_CTR.PRICEDDATE, 101) 		AS ContractPricedDate, 		
		CONVERT(varchar(20), TB_CTR.ORDERDATE, 101) 		AS ContractOrderDate, 		
		hitrust.dbo.MXPORTFOLIOTB.PORTFOLIONO				AS AccountNo, 
		TB_CTR.NOUNIT 					AS Units, 
		TB_CTR.PRICE					AS Price,
		TB_TRAN.GrossAmount				as GrossAmount
		FROM hitrust.dbo.MXCTRACTTB  TB_CTR with (nolock)
		INNER JOIN hitrust.dbo.MXACCOUNTTB with (nolock) ON TB_CTR.ACCTKEY = hitrust.dbo.MXACCOUNTTB.ACCTKEY
		INNER JOIN hitrust.dbo.MXINCOMETB TB_INCOME with (nolock) ON TB_CTR.INCOMEKEY = TB_INCOME.INCOMEKEY
		INNER JOIN hitrust.dbo.MXINCSCHEDTB TB_INCSCH with (nolock) ON TB_INCOME.INCSCHEDKEY = TB_INCSCH.INCSCHEDKEY AND TB_INCSCH.DELETED = 0 AND TB_INCSCH.COMPANY = 3
		INNER JOIN hitrust.dbo.MXCURRENCYTB with (nolock) ON TB_INCOME.CCY = hitrust.dbo.MXCURRENCYTB.CURRENCYKEY
		INNER JOIN hitrust.dbo.MXUNITCLASSTB with (nolock) ON hitrust.dbo.MXUNITCLASSTB.UNITCLASSKEY = hitrust.dbo.MXACCOUNTTB.UNITCLASSKEY
		INNER JOIN hitrust.dbo.MXFUNDTB TB_FUND with (nolock) ON hitrust.dbo.MXUNITCLASSTB.FUNDKEY =  TB_FUND.FUNDKEY					--FundName
		INNER JOIN hitrust.dbo.MXLANGDESCTB A with (nolock) ON TB_FUND.DESCID = A.DESCKEY
		INNER JOIN hitrust.dbo.MXPROFILETB with (nolock) ON hitrust.dbo.MXPROFILETB.PROFILEKEY = TB_FUND.PROFILEKEY
		INNER JOIN hitrust.dbo.MXPORTFOLIOTB with (nolock) ON hitrust.dbo.MXACCOUNTTB.PORTFOLIOKEY = hitrust.dbo.MXPORTFOLIOTB.PORTFOLIOKEY
		INNER JOIN hitrust.dbo.MXCOMPANYTB TB_COMP with (nolock) ON TB_INCOME.COMPANY = TB_COMP.COMPANYKEY
		INNER JOIN hitrust.dbo.MXCTSTATUSTB with (nolock) ON TB_CTR.CTSTATUSKEY  =  hitrust.dbo.MXCTSTATUSTB.CTSTATUSKEY
		INNER JOIN hitrust.dbo.MXLANGDESCTB TB_STATUS with (nolock) ON hitrust.dbo.MXCTSTATUSTB.DESCID = TB_STATUS.DESCKEY
		INNER JOIN hitrust.dbo.MXTRANSACTIONVIEWVW TB_TRAN	with (nolock) on tb_tran.CtractKey = tb_ctr.CTRACTKEY and tb_tran.TranFinsCurrency = hitrust.dbo.MXCURRENCYTB.CURRENCYISO
		LEFT OUTER JOIN hitrust.dbo.MXTRANCODETB with (nolock) ON TB_CTR.TRANCODEKEY = hitrust.dbo.MXTRANCODETB.TRANCODEKEY
		LEFT OUTER JOIN hitrust.dbo.MXLANGDESCTB TRANCODE_DESC with (nolock) ON hitrust.dbo.MXTRANCODETB.DESCID = TRANCODE_DESC.DESCKEY
		LEFT OUTER JOIN hitrust.dbo.MXCTRACTSUBTYPETB  with (nolock) ON TB_CTR.CTRACTSUBTYPE = hitrust.dbo.MXCTRACTSUBTYPETB.CTRACTSUBTYPEKEY
		LEFT OUTER JOIN hitrust.dbo.MXLANGDESCTB B with (nolock) ON hitrust.dbo.MXCTRACTSUBTYPETB.DESCID = B.DESCKEY
		where TB_CTR.COMPANY = 3
		AND TB_CTR.CANCELLED = 0 
		AND TB_COMP.COMPANYKEY = 3
		AND ( Convert(varchar(20),  TB_CTR.PRICEDDATE, 101) = CONVERT(varchar(20), TB_INCSCH.PAYMENTDATE, 101))
		and hitrust.dbo.MXUNITCLASSTB.deleted = 0
		AND CONVERT(char(8), TB_INCSCH.EXDATE, 112) >=  @sYMD_para1 
		AND CONVERT(char(8), TB_INCSCH.EXDATE, 112) <=  @sYMD_para2 
		AND (UPPER(RTRIM(LTRIM(TB_STATUS.DESCRIPTION))) = 'PRICED' OR UPPER(RTRIM(LTRIM(TB_STATUS.DESCRIPTION))) = 'SETTLED/REGISTERED' )
		order by TB_CTR.CTRACTKEY
	END
	IF (@TYPE = 'Extract Switching orders to WMO')
	BEGIN
		select	
			substring(c.ctractno, 5, 8) as SortKey
			, left(cst.description,20) as CTSTS, c.nounit,c.ctractno, c.orderdate, c.effdate, f.fundcode, p.portfoliono
			, fc.CURRENCYISO as fundCCY
			, dc.CURRENCYISO as dealCCY
			, c.ssref as ExtRef
			, c.REFERENCE 
			, c.settledue
			, t.COMMISSIONRATE , t.LOADINGRATE 
			, tf.gross, tf.net, tf.COMMISSION, tf.LOADAMT 
		from	hitrust..mxctracttb c with (nolock)
		inner
		join	hitrust..MXCURRENCYTB dc with (nolock) on c.DEALCCY = dc.CURRENCYKEY 
		inner
		join	hitrust..mxaccounttb acct with (nolock) on c.acctkey = acct.acctkey
		inner
		join	hitrust..mxunitclasstb uc with (nolock) on uc.unitclasskey = acct.unitclasskey and uc.deleted = 0
		inner
		join	hitrust..mxfundtb f with (nolock) on f.fundkey = uc.fundkey --and f.fundcode  ='SIB0005'
		inner
		join	hitrust..MXCURRENCYTB fc with (nolock) on f.CURRENCY = fc.CURRENCYKEY
		inner
		join	hitrust..mxctstatustb cs with (nolock) on cs.ctstatuskey = c.ctstatuskey
		inner
		join	hitrust..mxlangdesctb cst with (nolock) on cst.desckey = cs.descid
		inner	
		join	hitrust..mxsettlesplittb ss with (nolock) on ss.transactionkey = c.ctractkey
		inner
		join	hitrust..mxsettleactb ssa with (nolock) on ssa.settleackey = ss.settlekey
		inner
		join	hitrust..mxportfoliotb p with (nolock) on p.portfoliokey = acct.portfoliokey
		inner
		join	hitrust..MXTRANSACTIONTB t on t.TRANSACTIONKEY = c.CTRACTKEY 
		inner
		join	hitrust..mxtranfinstb tf with (nolock) on tf.transactionkey = c.ctractkey and tf.currencykey = 1
		inner
		join	hitrust..MXPORTADDR PA on pa.PORTFOLIOKEY = p.PORTFOLIOKEY  and pa.DELETED = 0 and pa.ADDRTYPKEY = 4
		inner
		join	hitrust..MXPROFILEADDRTB FA on FA.CLTADDRESSKEY = PA.ADDRESSKEY and fa.DELETED = 0

		where	--psit.description = 'Subscription'	
			cst.description in ('authorised','priced','settled/registered','new')
		and	CONVERT(NVARCHAR,c.effdate,112) >= @sYMD_para1
		and	c.ctractno like 'sw%'
		order by SortKey, c.ctractno
	END
	IF (@TYPE = 'WMO21004 validate the migrated CID result')
	BEGIN

			IF OBJECT_ID('tempdb..#tmp_cte3') IS NOT NULL DROP TABLE #tmp_cte3
			IF OBJECT_ID('tempdb..#tmp_cte4') IS NOT NULL DROP TABLE #tmp_cte4
			IF OBJECT_ID('tempdb..#tmp_ACC') IS NOT NULL DROP TABLE #tmp_ACC
			IF OBJECT_ID('tempdb..#TEMP_PBD') IS NOT NULL DROP TABLE #TEMP_PBD
		
		--	;WITH cte1 AS
		--	( 
		--			SELECT JOINT_CUST_ID_TYPE,(CASE WHEN JOINT_CUST_ID_NO = '' THEN TRIM(ID_TYPE) + TRIM(ID_NO) ELSE JOINT_CUST_ID_NO END) AS JOINT_CUST_ID_NO,MEMBER_SEQ, TRIM(ID_TYPE) + TRIM(ID_NO) AS rID,CUST_TYPE  FROM Master.dbo.TEMP_PBD
		--	),cte2 AS
		--	(
		--			SELECT c2.JOINT_CUST_ID_NO,
		--					(SELECT 
		--					STUFF((
		--		SELECT LEFT(TRIM(rID) + SPACE(20),20)
		--		FROM   cte1 c1 WHERE c1.JOINT_CUST_ID_NO = c2.JOINT_CUST_ID_NO
		--					ORDER BY MEMBER_SEQ
		--		FOR XML PATH('')
		--		), 1, 0, '')) AS SettleID
		--					FROM cte1 c2
		--					GROUP BY JOINT_CUST_ID_NO
		--	),cte3 AS
		--	(
		--			select * FROM BPSS.dbo.TB_RESTRICTED_TXNS_ALL_IDS c1
		--			INNER JOIN cte2 c2 ON c2.SettleID =c1.SSNO
		--			WHERE substring(PortNum, 9, 1)  IN ('5','2','7','8')
		--	) 
		--	select * INTO #tmp_cte3 FROM cte3 c1

 
		--	IF OBJECT_ID('tempdb..#tmp_ACC') IS NOT NULL DROP TABLE #tmp_ACC
		--	SELECT ACNO, RELNO,PORTFOLIONO,p.portfoliokey INTO #tmp_ACC from
		--	hitrust..mxportfoliotb p 	inner join hitrust..mxcompanytb   tb_comp  	on tb_comp.companykey = p.company 
		--	INNER JOIN HITRUST..MXPORTSTATUSTB PS ON PS.ACSTATUSKEY = P.ACSTATUSKEY
		--	INNER JOIN HITRUST..MXLANGDESCTB PSD ON PSD.DESCKEY = PS.DESCID 
		--	inner join hitrust..mxprofiletb u on u.profilekey = p.profilekey
		--	inner join hitrust..mxportsettleinsttb pins on p.portfoliokey = pins.portfoliokey
		--	inner join hitrust..mxsettleactb  sac on pins.SETTLEACCOUNT = sac.SETTLEACKEY and sac.deleted = 0
		--	left join HITRUST..mxlangdesctb ag on ag.desckey = pins.settleinsttype
		--	left join hitrust..MXPORTSTATUSTB status ON ( p.ACSTATUSKEY = status.ACSTATUSKEY  and status.company = 1 ) 
		--	WHERE TB_COMP.companykey = 1 and ag.description = 'Subscription' 
		--	AND  substring(PORTFOLIONO, 9, 1)  IN ('5','2','7','8')
	  

		--	SELECT   c1.PortKey,c1.PortNum,PortNameDisp,c1.MasterOwnerKey,MasterOwnerRelNo,OwnerRelNos,c1.SSNO,JOINT_CUST_ID_NO,SettleID, c2.PORTFOLIONO, c2.ACNO
		--	INTO #tmp_cte4
		--	FROM #tmp_cte3 c1
		--	INNER JOIN  #tmp_ACC c2 ON c1.PortKey = c2.portfoliokey
		--	GROUP BY c1.PortKey,c1.PortNum,PortNameDisp,c1.MasterOwnerKey,MasterOwnerRelNo,OwnerRelNos,c1.SSNO,JOINT_CUST_ID_NO,SettleID,c2.PORTFOLIONO, c2.ACNO
	  
  
		--SELECT * INTO #TEMP_PBD FROM Master.dbo.TEMP_PBD
    
		--SELECT JOINT_CUST_ID_TYPE,c1.JOINT_CUST_ID_NO,MEMBER_SEQ,ID_TYPE,TRIM(REPLACE(c1.ID_NO,'-000',SPACE(7)+ '000')) AS ID_NO,CUST_TYPE,JT_FLAG,NON_BANK_CI_FLG,
		--PORTFOLIONO,
		--ACNO
		--FROM #TEMP_PBD c1 
		--INNER JOIN #tmp_cte4 c2 ON  CHARINDEX(TRIM(c1.ID_TYPE) + TRIM(REPLACE(c1.ID_NO,'-000',SPACE(7)+ '000')) ,SSNO,0) > 0
		--ORDER BY JOINT_CUST_ID_NO
  
	END
	IF (@TYPE = 'PBD-IA migration rules')  --EUCLIDPriceHiTrust
	BEGIN
		IF OBJECT_ID('tempdb..#tmp_cutoff') IS NOT NULL DROP TABLE #tmp_cutoff
		select min(C.description) AS description,D.profilekey
		INTO #tmp_cutoff
		from 
			   HITRUST..mxuserdefinedfieldtb a, 
			   HITRUST..MXUSERDEFINEDFIELDTYPETB B, 
			   HITRUST..MXLANGDESCTB C , 
			   HITRUST..mxprofiletb D
		WHERE
			   a.USERDEFINEDFIELDTYPEKEY = B.USERDEFINEDFIELDTYPEKEY
			   and B.descid = C.desckey
			   and RTRIM(C.description) like '%Cutoff'  
			   and A.xrefkeytype = '1'
			   and D.profilekey = a.xrefkey
			   and A.deleted <> '1'
		GROUP BY profilekey


		IF OBJECT_ID('tempdb..#FHOtemp') IS NOT NULL DROP TABLE #FHOtemp
		create table #FHOtemp
		(Sort01 char(4), FundKey int, ProfileKey int, CutOff_Desc char(60), FundGroup_Desc char(60), FundGroup char(60), 
		 FundGroupKey int, GL_Desc char(60), FundHouse nchar(140), Contact nchar(40), Fax# char(25), Tel# char(25), 
		 --KC20110524[
		--FundCode char(10), FundDesc nchar(60), FundClass nchar(60), GrossAmount float, InitialChg float, 
		 FundCode char(10), FundDesc nchar(120), FundClass nchar(60), GrossAmount float, InitialChg float, 
		 --KC20110524]
		LoadRate float, DiscRate float, CommRate float, Currency char(3), NetAmount float, 
		 Units float, TranType nchar(60), TranStatus nchar(60), TranCode char(30), ContractNo char(30), 
		 ContractPrice float, ContractRef nchar(30), Cancelled bit, LoadDiscAmount float, 
		 CommAmount float, UnitClass char(2), 
		 HoldingName nchar(120), HoldingNo char(50), UnitDecimals int, PriceDecimals int, CompanyName nchar(60), 
		 Company char(20), ClientNumber char(40), Subtype nchar(60), TOFundCode char(10), 
		--KC20111125[
		TOFundDesc nchar(120), --TOFundDesc nchar(60), 
		--KC20111125]
		TOFundClass nchar(60), TOUnit float, EffDate datetime, DSBAccountNo nchar(40), Priced_SubSwitch_Date datetime,
		SubAccountNo char(40), ToSubAccountNo char(40), BackEndRate float, FrontEndRate float, TOccy char(3),
		Dividend char(20), Clean_GrossAmount float, Clean_NetAmount float,
		NonClean_GrossAmount float, NonClean_NetAmount float
			  --KC20110519[
			   ,FundHouseKey INT
			   ,CTRACTKEY INT
			   --KC20110519]
		)
		SELECT 
		MXFUNDPR.PROFILEKEY ,
		MXUNITCLASSTB.CLASSCODE,
		'FundClass' = MXCLASS.DESCRIPTION,
		'COMPANY' = MXCOMPANYTB.SHORTNAME,
		'FundHouseDesc'      = MXFUNDPR.NAME,
		'FUNDCODE'           = MXFUNDTB.FUNDCODE,
		'FundName'           = MXFUND.DESCRIPTION,
		'FundCcy'            = MAX(MXCURRENCYTB.CURRENCYISO),
		RELNO,
		co.description AS cut_off,
		ADDR.FAXNO,ADDR.TELNO,CONTACT
		FROM    HITRUST..MXUNITCLASSTB
			   INNER JOIN HITRUST..MXFUNDTB 
					  ON MXUNITCLASSTB.FUNDKEY = MXFUNDTB.FUNDKEY AND MXUNITCLASSTB.DELETED = 0 
			   INNER JOIN HITRUST..MXCURRENCYTB
							 ON MXFUNDTB.CURRENCY = MXCURRENCYTB.CURRENCYKEY
			   INNER JOIN HITRUST..MXLANGDESCTB AS MXFUND
					  ON (MXFUNDTB.DESCID = MXFUND.DESCKEY AND MXFUND.LANGUAGEKEY = 1)
			   INNER JOIN HITRUST..MXLANGDESCTB AS MXCLASS ON (MXUNITCLASSTB.DESCID = MXCLASS.DESCKEY AND MXCLASS.LANGUAGEKEY = 1 )
			   INNER JOIN HITRUST..MXCOMPANYTB
					  ON MXCOMPANYTB.COMPANYKEY = MXFUNDTB.COMPANYKEY
			   LEFT OUTER JOIN HITRUST..MXPROFILETB MXFUNDPR ON
					  MXFUNDTB.PROFILEKEY = MXFUNDPR.PROFILEKEY
					  LEFT JOIN     Hitrust.dbo.MXPROFILEADDRTB (nolock) ADDR ON --AS ADDR
					  MXFUNDPR.PROFILEKEY = ADDR.PROFILEKEY AND ADDR.DELETED = 0 AND ADDR.DEFAULTADDR = 1 
			   LEFT JOIN #tmp_cutoff co ON co.PROFILEKEY = MXFUNDPR.PROFILEKEY
		WHERE  MXUNITCLASSTB.DELETED = 0  
		group by MXFUNDPR.NAME , MXFUNDTB.FundCode, MXFUND.DESCRIPTION,MXCOMPANYTB.SHORTNAME,ADDR.FAXNO,ADDR.TELNO,CONTACT,MXFUNDPR.PROFILEKEY ,RELNO,co.description
		,MXUNITCLASSTB.CLASSCODE,MXCLASS.DESCRIPTION
		order by MXFUNDPR.NAME asc , MXFUND.DESCRIPTION asc
	END
	IF (@TYPE = 'WMD20026-trans')
	BEGIN
		select	--count(p.portfoliono)
			case
				when substring(p.PORTFOLIONO ,9,1) in ('2','5','7','8') then 'PBD'
				when
					left(case
						when ipod.CHARFIELD is null then TB_COMMAGENT.AGENTNAME 
						else ipod.charfield
						end,4) = '3900' then 'CBD'
			else 'RBD'
			end as BusinessUnit
			,case
				when ipod.CHARFIELD is null then TB_COMMAGENT.AGENTNAME 
				else ipod.charfield
			end as HandlingAgent
		----    , TB_COMMAGENT.AGENTNAME AS DefaultAgent, IPOD.CHARFIELD AS UdfAgent
			, left(cst.description,20) as OrderStatus
			, c.nounit as NotionalUnits
			, c.ctractno
			, st.CTRACTSUBTYPEKEY 
			, REPLACE(std.DESCRIPTION  ,',','#') AS DESCRIPTION
			, c.orderdate
			, c.effdate
			, f.fundcode
			, f.STOCKX		-- for BNE, it is the ISIN, for funds, need to get the UDF for ISIN code
			, ISIN.CHARFIELD AS FundISIN
			, case
				when uc.CLASSCODE = '1B' then f.STOCKX
				when uc.CLASSCODE = '1N' then f.STOCKX
				when uc.classcode = '1E' then f.STOCKX
				else isin.CHARFIELD 
			  end as ISINno
			, uc.CLASSCODE 
			, case
				when uc.CLASSCODE = '1B' then 'Bonds'
				when uc.CLASSCODE = '1N' then 'Notes'
				when uc.classcode = '1E' then 'ELI'
				else 'Funds'
			  end as ProductType
			, p.portfoliono
			, REPLACE(p.PORTFOLIONAME  ,',','#') AS PORTFOLIONAME 
		---	, ids.SSNO 
			, (CASE WHEN LEFT( left(ids.ssno,20),2) = 'BR' THEN REPLACE(left(ids.ssno,20),'-',SPACE(7)) ELSE left(ids.ssno,20) END ) as ID1
			, (CASE WHEN LEFT( SUBSTRING(ids.ssno,21,20),2) = 'BR' THEN REPLACE(SUBSTRING(ids.ssno,21,20),'-',SPACE(7)) ELSE SUBSTRING(ids.ssno,21,20) END ) as ID2
			, (CASE WHEN LEFT( SUBSTRING(ids.ssno,41,20),2) = 'BR' THEN REPLACE(SUBSTRING(ids.ssno,41,20),'-',SPACE(7)) ELSE SUBSTRING(ids.ssno,41,20) END ) as ID3
			, (CASE WHEN LEFT( SUBSTRING(ids.ssno,61,20),2) = 'BR' THEN REPLACE(SUBSTRING(ids.ssno,61,20),'-',SPACE(7)) ELSE SUBSTRING(ids.ssno,61,20) END ) as ID4
			, (CASE WHEN LEFT( SUBSTRING(ids.ssno,81,20),2) = 'BR' THEN REPLACE(SUBSTRING(ids.ssno,81,20),'-',SPACE(7)) ELSE SUBSTRING(ids.ssno,81,20) END ) as ID5

		--	,ss.split
		--	, ssa.acno as acno_on_ctract, sa.acno as acno_settleins, psit.description as InstType
		--	, isnull(dealcc.currencyiso, '---') as DealCCY
		--	, case defaultdealccy
		--		when 0 then 'FALSE'
		--		when 1 then 'TRUE'
		--	  end as DefDealCcy
		--	, isnull(setcc.currencyiso,'---') as SettlementCCY
		--	, c.ssref as InitAmt
		--	, tf.net as tfnet
			, c.PRICE 
			, cy.CURRENCYISO as FundCCY
			, tf.GROSS as SettleAmtNetInFundCCY
			, REPLACE(fh.NAME ,',','#') as IssuerName
			, case
				when cy.CURRENCYISO = 'HKD' then tf.GROSS 
				else tf.gross * fx.MIDRATE 
			  end as SettleAmtNetHKD
			, fx.MIDRATE as DayEndFx
		--	, c.settledue
		--	, IDS.SSNO as OwnerIDs
			,	case
					when IPODRef.CHARFIELD is not null then 'IPOD'
					WHEN EBRef.CHARFIELD IS NOT NULL THEN 'EB' 
					WHEN CWRef.CHARFIELD IS NOT NULL THEN 'CRWMS'
					ELSE 'MANUAL'
				END AS CHANNEL
		from	HITRUST..mxctracttb c with (nolock)
		inner
		join	HITRUST..mxaccounttb acct with (nolock) on c.acctkey = acct.acctkey
		inner
		join	HITRUST..mxunitclasstb uc with (nolock) on uc.unitclasskey = acct.unitclasskey and uc.deleted = 0
		inner
		join	HITRUST..mxfundtb f with (nolock) on f.fundkey = uc.fundkey --and f.fundcode  ='HIB0007'
		inner
		join	HITRUST..mxprofiletb fh with (nolock) on fh.PROFILEKEY = f.PROFILEKEY 
		inner
		join	HITRUST..mxctstatustb cs with (nolock) on cs.ctstatuskey = c.ctstatuskey
		inner
		join	HITRUST..mxlangdesctb cst with (nolock) on cst.desckey = cs.descid
		inner	
		join	HITRUST..mxsettlesplittb ss with (nolock) on ss.transactionkey = c.ctractkey
		inner
		join	HITRUST..mxsettleactb ssa with (nolock) on ssa.settleackey = ss.settlekey
		inner
		join	HITRUST..mxportfoliotb p with (nolock) on p.portfoliokey = acct.portfoliokey
		inner
		join	bpss..TB_RESTRICTED_TXNS_ALL_IDS IDS with (nolock) on IDS.PortKey = p.PORTFOLIOKEY 
		--inner
		--join	mxportsettleinsttb psi with (nolock) on psi.portfoliokey = p.portfoliokey
		--inner
		--join	mxlangdesctb psit with (nolock) on psit.desckey = psi.settleinsttype and psit.description = 'Subscription'
		inner
		join	HITRUST..mxtranfinstb tf with (nolock) on tf.transactionkey = c.ctractkey and tf.currencykey = f.CURRENCY 
		inner
		join	HITRUST..MXCURRENCYTB cy with (nolock) on cy.CURRENCYKEY = tf.CURRENCYKEY 
		left
		join	HITRUST.dbo.MXCTRACTSUBTYPETB AS st WITH (nolock) ON st.CTRACTSUBTYPEKEY = c.CTRACTSUBTYPE

		LEFT JOIN
						HITRUST.dbo.MXLANGDESCTB AS std WITH (nolock) ON std.DESCKEY = st.DESCID

		--left
		--join	mxsettleactb sa with (nolock) on sa.settleackey = psi.settleaccount
		--left
		--join	mxcurrencytb setcc with (nolock) on setcc.currencykey = psi.settleccy
		--left
		--join	mxcurrencytb dealcc with (nolock) on dealcc.currencykey = psi.searchdealccy
		inner JOIN 
				HITRUST..MXCOMMSPLITTB TB_COMMSPL ON c.CTRACTKEY = TB_COMMSPL.CTRACTKEY AND TB_COMMSPL.COMMPERCENT = 100
		inner JOIN 
				HITRUST..MXAGENTTB TB_COMMAGENT	ON TB_COMMSPL.AGENTKEY = TB_COMMAGENT.AGENTKEY

		LEFT JOIN
				(SELECT        ud.USERDEFINEDFIELDKEY, ud.USERDEFINEDFIELDTYPEKEY, ud.XREFKEY, ud.XREFKEYTYPE, ud.CHARFIELD, ud.NUMERICFIELD, ud.DATEFIELD, 
											ud.BOOLFIELD, ud.DELETED, ud.MAINTDATE, ud.MAINTUSER
				FROM            HITRUST.dbo.MXUSERDEFINEDFIELDTB AS ud  WITH (nolock) INNER JOIN
											HITRUST.dbo.MXUSERDEFINEDFIELDTYPETB AS udf  WITH (nolock) ON udf.USERDEFINEDFIELDTYPEKEY = ud.USERDEFINEDFIELDTYPEKEY AND 
											ud.deleted = 0 and udf.DELETED = 0 AND RTRIM(udf.CHARFIELDNAME) = 'Agent Code') AS IPOD ON IPOD.XREFKEY = c.CTRACTKEY

		left JOIN
				(select a.*, d.CURRENCYISO  from
				HITRUST..MXfxrateTB A
				inner join hitrust..mxextsourcetb b on a.EXTSOURCEKEY = b.EXTSOURCEKEY 
				inner join hitrust..mxlangdesctb c on b.DESCID = c.DESCKEY and c.LANGUAGEKEY = 1 and c.description = 'Monthly Statement'
				inner join hitrust..mxcurrencytb d  on a.FROMCURRENCY = d.CURRENCYKEY 
				WHERE a.currencykey = 1	and a.COMPANY = 1 ) FX 
					on convert(varchar(10),c.EFFDATE,101) = convert(varchar(10),fx.FXDATE,101) 
					and fx.fromcurrency  = tf.CURRENCYKEY 

		

		LEFT JOIN
				(SELECT        ud.USERDEFINEDFIELDKEY, ud.USERDEFINEDFIELDTYPEKEY, ud.XREFKEY, ud.XREFKEYTYPE, ud.CHARFIELD, ud.NUMERICFIELD, ud.DATEFIELD, 
											ud.BOOLFIELD, ud.DELETED, ud.MAINTDATE, ud.MAINTUSER
				FROM            HITRUST.dbo.MXUSERDEFINEDFIELDTB AS ud  WITH (nolock) INNER JOIN
											HITRUST.dbo.MXUSERDEFINEDFIELDTYPETB AS udf  WITH (nolock) ON udf.USERDEFINEDFIELDTYPEKEY = ud.USERDEFINEDFIELDTYPEKEY AND 
											ud.deleted = 0 and udf.DELETED = 0 AND RTRIM(udf.CHARFIELDNAME) = 'RefNum') AS IPODRef ON IPODRef.XREFKEY = c.CTRACTKEY 
		LEFT JOIN
				(SELECT        ud.USERDEFINEDFIELDKEY, ud.USERDEFINEDFIELDTYPEKEY, ud.XREFKEY, ud.XREFKEYTYPE, ud.CHARFIELD, ud.NUMERICFIELD, ud.DATEFIELD, 
											ud.BOOLFIELD, ud.DELETED, ud.MAINTDATE, ud.MAINTUSER
				FROM            HITRUST.dbo.MXUSERDEFINEDFIELDTB AS ud  WITH (nolock) INNER JOIN
											HITRUST.dbo.MXUSERDEFINEDFIELDTYPETB AS udf  WITH (nolock) ON udf.USERDEFINEDFIELDTYPEKEY = ud.USERDEFINEDFIELDTYPEKEY AND 
											ud.deleted = 0 and udf.DELETED = 0 AND RTRIM(udf.CHARFIELDNAME) = 'EB Ref No') AS EBRef ON EBRef.XREFKEY = c.CTRACTKEY 
		LEFT JOIN
				(SELECT        ud.USERDEFINEDFIELDKEY, ud.USERDEFINEDFIELDTYPEKEY, ud.XREFKEY, ud.XREFKEYTYPE, ud.CHARFIELD, ud.NUMERICFIELD, ud.DATEFIELD, 
											ud.BOOLFIELD, ud.DELETED, ud.MAINTDATE, ud.MAINTUSER
				FROM            HITRUST.dbo.MXUSERDEFINEDFIELDTB AS ud  WITH (nolock) INNER JOIN
											HITRUST.dbo.MXUSERDEFINEDFIELDTYPETB AS udf  WITH (nolock) ON udf.USERDEFINEDFIELDTYPEKEY = ud.USERDEFINEDFIELDTYPEKEY AND 
											ud.deleted = 0 and udf.DELETED = 0 AND RTRIM(udf.CHARFIELDNAME) = 'CW Ref No') AS CWRef ON CWRef.XREFKEY = c.CTRACTKEY

		LEFT JOIN
				(SELECT        ud.USERDEFINEDFIELDKEY, ud.USERDEFINEDFIELDTYPEKEY, ud.XREFKEY, ud.XREFKEYTYPE, ud.CHARFIELD, ud.NUMERICFIELD, ud.DATEFIELD, 
											ud.BOOLFIELD, ud.DELETED, ud.MAINTDATE, ud.MAINTUSER
				FROM            HITRUST.dbo.MXUSERDEFINEDFIELDTB AS ud  WITH (nolock) INNER JOIN
											HITRUST.dbo.MXUSERDEFINEDFIELDTYPETB AS udf  WITH (nolock) ON udf.USERDEFINEDFIELDTYPEKEY = ud.USERDEFINEDFIELDTYPEKEY AND 
											ud.deleted = 0 and udf.DELETED = 0 AND RTRIM(udf.CHARFIELDNAME) = 'ISIN Number') AS ISIN ON ISIN.XREFKEY = f.FUNDKEY



		where	--psit.description = 'Subscription'	
			cst.description in ('priced','settled/registered')
		and	CONVERT(NVARCHAR,c.effdate,112) >= @sYMD_para1 and CONVERT(NVARCHAR,c.EFFDATE,112) < @sYMD_para2
		and	left(c.ctractno,3) in ( 'sub','swi','RSP')
		and
			(std.DESCRIPTION IS NULL OR
			 std.DESCRIPTION NOT LIKE '%transfer%')

		order by c.ctractno
		--group by	p.portfoliono having count(p.portfoliono) > 1

	END
	IF (@TYPE = 'WMD20026-holdings')
	BEGIN
		select	--count(p.portfoliono)
		case
			when substring(p.PORTFOLIONO ,9,1) in ('2','5','7','8') then 'PBD'
			when
				left(AGENTNAME,4) = '3900' then 'CBD'
		else 'RBD'
		end as BusinessUnit
		, REPLACE(ag.AGENTNAME ,',','#') AS AGENTNAME
		, AsAtEnd.ConfirmedBalance
		, f.fundcode
		, f.STOCKX		-- for BNE, it is the ISIN, for funds, need to get the UDF for ISIN code
		, ISIN.CHARFIELD AS FundISIN
		, case
			when uc.CLASSCODE = '1B' then f.STOCKX
			when uc.CLASSCODE = '1N' then f.STOCKX
			when uc.classcode = '1E' then f.STOCKX
			else isin.CHARFIELD 
			end as ISINno
		, uc.CLASSCODE 
		, case
			when uc.CLASSCODE = '1B' then 'Bonds'
			when uc.CLASSCODE = '1N' then 'Notes'
			when uc.classcode = '1E' then 'ELI'
			else 'Funds'
			end as ProductType
		, p.portfoliono
		, REPLACE(p.PORTFOLIONAME ,',','#') AS PORTFOLIONAME
		---	, ids.SSNO 
		, (CASE WHEN LEFT( left(ids.ssno,20),2) = 'BR' THEN REPLACE(left(ids.ssno,20),'-',SPACE(7)) ELSE left(ids.ssno,20) END ) as ID1
		, (CASE WHEN LEFT( SUBSTRING(ids.ssno,21,20),2) = 'BR' THEN REPLACE(SUBSTRING(ids.ssno,21,20),'-',SPACE(7)) ELSE SUBSTRING(ids.ssno,21,20) END ) as ID2
		, (CASE WHEN LEFT( SUBSTRING(ids.ssno,41,20),2) = 'BR' THEN REPLACE(SUBSTRING(ids.ssno,41,20),'-',SPACE(7)) ELSE SUBSTRING(ids.ssno,41,20) END ) as ID3
		, (CASE WHEN LEFT( SUBSTRING(ids.ssno,61,20),2) = 'BR' THEN REPLACE(SUBSTRING(ids.ssno,61,20),'-',SPACE(7)) ELSE SUBSTRING(ids.ssno,61,20) END ) as ID4
		, (CASE WHEN LEFT( SUBSTRING(ids.ssno,81,20),2) = 'BR' THEN REPLACE(SUBSTRING(ids.ssno,81,20),'-',SPACE(7)) ELSE SUBSTRING(ids.ssno,81,20) END ) as ID5
		, fx.MIDRATE  , FX.FXDATE 
		, PR.NAVPRICE , MAXPRICEDATE 
		, MktValue = AsAtEnd.ConfirmedBalance * pr.NAVPRICE 
		, case
			when cy.CURRENCYISO = 'HKD' then AsAtEnd.ConfirmedBalance * pr.NAVPRICE
			else AsAtEnd.ConfirmedBalance * pr.NAVPRICE * fx.MIDRATE 
			end as MktValueHKD
		, cy.CURRENCYISO as FundCCY
		--	, tf.GROSS as SettleAmtNetInFundCCY
		, REPLACE( fh.NAME,',','#') as IssuerName
		INTO #tmp_Holding2
		from
			(select	acctkey, sum(isnull(am.confirmedmovement,0)) as ConfirmedBalance
			from	HITRUST..MXACCBALMOVETB am
			where	CONVERT(NVARCHAR,effdate,112) < @sYMD_para2
			group
			by		am.acctkey) AsAtEnd
		inner
		join	HITRUST..mxaccounttb acct with (nolock) on AsAtEnd.acctkey = acct.acctkey
		inner
		join	HITRUST..mxunitclasstb uc with (nolock) on uc.unitclasskey = acct.unitclasskey and uc.deleted = 0
		inner
		join	HITRUST..mxfundtb f with (nolock) on f.fundkey = uc.fundkey --and f.fundcode  ='HIB0007'
		inner
		join	HITRUST..mxprofiletb fh with (nolock) on fh.PROFILEKEY = f.PROFILEKEY 
		join	HITRUST..mxportfoliotb p with (nolock) on p.portfoliokey = acct.portfoliokey
		inner
		join	bpss..TB_RESTRICTED_TXNS_ALL_IDS IDS with (nolock) on IDS.PortKey = p.PORTFOLIOKEY 
		inner
		join	HITRUST..MXCURRENCYTB cy with (nolock) on cy.CURRENCYKEY = f.CURRENCY

		inner join
		HITRUST..mxagenttb ag on ag.AGENTKEY = p.AGENTKEY 
		left JOIN
			(select a.*, d.CURRENCYISO from
			HITRUST..MXfxrateTB A
			inner join hitrust..mxextsourcetb b on a.EXTSOURCEKEY = b.EXTSOURCEKEY 
			inner join hitrust..mxlangdesctb c on b.DESCID = c.DESCKEY and c.LANGUAGEKEY = 1 and c.description = 'Monthly Statement'
			inner join hitrust..mxcurrencytb d  on a.FROMCURRENCY = d.CURRENCYKEY 
			WHERE a.currencykey = 1	and a.COMPANY = 1 ) FX 
				on convert(varchar,fx.FXDATE,112) = @sYMD_para1	-- to change to 12/31/2020 for production
				and fx.fromcurrency  = f.CURRENCY
		LEFT JOIN
			(SELECT        ud.USERDEFINEDFIELDKEY, ud.USERDEFINEDFIELDTYPEKEY, ud.XREFKEY, ud.XREFKEYTYPE, ud.CHARFIELD, ud.NUMERICFIELD, ud.DATEFIELD, 
										ud.BOOLFIELD, ud.DELETED, ud.MAINTDATE, ud.MAINTUSER
			FROM            HITRUST.dbo.MXUSERDEFINEDFIELDTB AS ud  WITH (nolock) INNER JOIN
										HITRUST.dbo.MXUSERDEFINEDFIELDTYPETB AS udf  WITH (nolock) ON udf.USERDEFINEDFIELDTYPEKEY = ud.USERDEFINEDFIELDTYPEKEY AND 
										ud.deleted = 0 and udf.DELETED = 0 AND RTRIM(udf.CHARFIELDNAME) = 'ISIN Number') AS ISIN ON ISIN.XREFKEY = f.FUNDKEY
		LEFT JOIN
			(
			SELECT	M.*, P.PRICEKEY 	AS PRICEKEY, 
					P.NAVPRICE 		AS NAVPRICE, 
					P.BIDPRICE 		AS BIDPRICE, 
					P.OFFERPRICE 	AS OFFERPRICE
			FROM		HITRUST.DBO.MXPRICETB P  WITH (NOLOCK)
			INNER JOIN	
				(SELECT FUNDKEY, MAX(PRICEDATE) MAXPRICEDATE
				FROM HITRUST..MXPRICETB  WITH (NOLOCK)
				WHERE DELETED = 0
				AND NOT (AUTHDATE IS NULL)
				AND CONVERT(NVARCHAR,PRICEDATE,112) < @sYMD_para2
				GROUP BY FUNDKEY) M
				ON 	P.FUNDKEY = M.FUNDKEY 
				AND	P.PRICEDATE = M.MAXPRICEDATE
			WHERE	(NOT (P.AUTHDATE IS NULL)) AND (P.DELETED = 0)
			--ORDER BY FUNDKEY 
			) AS PR ON PR.FUNDKEY = F.FUNDKEY 

			WHERE AsAtEnd.ConfirmedBalance != 0

			SELECT * FROM #tmp_Holding2 WHERE PORTFOLIONAME NOT LIKE '%DUMMY%' AND ID1 NOT LIKE '%DUMMY%' 
	END
	IF (@TYPE = 'SARWMD21003')
	BEGIN
		IF OBJECT_ID('tempdb..#TEMP') IS NOT NULL DROP TABLE #TEMP
 
		select
		left(TB_ID.SSNO,20)																		as CUSTOMER_ID_1
		,substring(TB_ID.SSNO,21,20)															as CUSTOMER_ID_2
		,substring(TB_ID.SSNO,41,20)															as CUSTOMER_ID_3
		,substring(TB_ID.SSNO,61,20)															as CUSTOMER_ID_4
		,substring(TB_ID.SSNO,81,20)															as CUSTOMER_ID_5
		,CONVERT(NCHAR(70),'')																as CUSTOMER_NAME_1
		,CONVERT(NCHAR(70),'')																as CUSTOMER_NAME_2
		,CONVERT(NCHAR(70),'')																as CUSTOMER_NAME_3
		,CONVERT(NCHAR(70),'')																as CUSTOMER_NAME_4
		,CONVERT(NCHAR(70),'')																as CUSTOMER_NAME_5
		,(
		select 
			case when count(PORTFOLIOKEY) > 1  then 
				'Joint Account' 
			else 
				'Single Account' 
			end
		from 
			hitrust..MXOWNERTB O 
		where 
			O.PORTFOLIOKEY = TB_PORT.PORTFOLIOKEY 
		group by 
			O.PORTFOLIOKEY
		)																						as Account_Type
		,
		TB_PORT.PORTFOLIONO																	as UT_Account_No
		,(case when VCCust.IDNO is null then 'N' else 'Y' end)									as VC_Flag
		,(case when VCCust.IDNO is null then 'Non-VC' else 'VC' end)							as VC_Name
		,TB_FUND.FUNDCODE																		as FUND_CODE
		,TB_FUNDDESC.DESCRIPTION																as FUND_NAME
		,TB_FUNDCLASS.CLASSCODE																	as FUND_CLASS
		,isnull(TB_ISIN.CHARFIELD,'')													AS [ISIN code]
		,TB_CTRACT.ORDERDATE																	as CONTRACT_ORDERDATE
		,TB_CTRACT.CTRACTNO
		--,TB_CTSTATDESC.DESCRIPTION																as CONTRACT_STATUS
		,case 
			when substring(TB_CTRACT.CTRACTNO,1,3) = 'SUB' then 'Subscription'
			when substring(TB_CTRACT.CTRACTNO,1,3) = 'RED' then 'Redemptions'
			when substring(TB_CTRACT.CTRACTNO,1,3) = 'SWI' then 'Switching-in'
			when substring(TB_CTRACT.CTRACTNO,1,3) = 'SWO' then 'Switching-out'
		end as 'Transation_Type'									--Transation_Type
		--,TB_CTSTATDESC.DESCRIPTION																as Ctract_Status
		,TB_FUNDCCY.CURRENCYISO																	AS Invested_currency
		,TB_TXFINS.NET																			AS Invested_amount_in_original_ccy
		,tbl_HKcomm.NET																			AS Invested_amount_in_hkd
		,TB_CTRACT.NOUNIT																		as Unit
		,TB_CTRACT.PRICE																		as PRICE
		,CASE WHEN TB_FUNDCLASS.CLASSCODE in ('1E','1B')	--Bond/ELI
						  THEN ISNULL(tbl_HKcomm.COMMISSION,0.0)
					 ELSE CASE WHEN LEFT(TB_TXCODEDESC.DESCRIPTION,6) = 'Switch'	--UT
							   THEN CAST(case when ISNULL(tbl_HKcomm.TAX,0.0) = 0.0
											  then  ISNULL(tbl_HKcomm.COMMISSION,0.0)
                          	  			 else case when ISNULL(tbl_HKcomm.COMMISSION,0.0) = 0.0
											  then ISNULL(tbl_HKcomm.TAX,0.0)
										 else case when ISNULL(tbl_HKcomm.TAX,0.0) < ISNULL(tbl_HKcomm.COMMISSION,0.0)
												   then ISNULL(tbl_HKcomm.TAX,0.0)
											  else ISNULL(tbl_HKcomm.COMMISSION,0.0)
											  end
										 end
							   END AS FLOAT)
						  ELSE CASE WHEN ISNULL(TB_FUNDCLASS.CLASSCODE,'?') = 'O' --- Guaranteed Funds
									THEN CAST(ISNULL(tbl_HKcomm.TAX,0.0) AS FLOAT) --- Other Fee Amount
							   ELSE CASE WHEN ISNULL(TB_FUNDCLASS.CLASSCODE,'?') = 'B' --- Class B Funds
										 THEN CAST( ISNULL(tbl_HKcomm.TAX,0.0) AS FLOAT) --- Other Fee Amount
									ELSE CASE WHEN ISNULL(TB_FUND.EXTERNALID,'?') = 'A' or SUBSTRING(TB_FUND.FUNDCODE,1,2) in ('TM','VP','AI','DP','DR','SC') --- Templeton ( TM ) / VP (VP) /AIG (AI) / Allianz Dresdner (DP/DR) / Schroders (SC)
											  THEN CAST(ISNULL(tbl_HKcomm.COMMISSION,0.0) AS FLOAT)  --- Commission Amount
										 ELSE CASE WHEN ISNULL(TB_FUND.EXTERNALID,'?') = 'B' or SUBSTRING(TB_FUND.FUNDCODE,1,2) in ('AC','HS','IV','SB')      --- ACM (AC) / HSBC (HS) / Investec (IV) /Schroders (SB)
												   THEN CAST(ISNULL(tbl_HKcomm.COMMISSION,0.0) AS FLOAT)  --- Commission Amount
											   ELSE CASE WHEN ISNULL(TB_FUND.EXTERNALID,'?') = 'C' or SUBSTRING(TB_FUND.FUNDCODE,1,2) in ('FI','IN')                --- Fid (FI) /Invesco (IN)
														 THEN CAST( ISNULL(tbl_HKcomm.TAX,0.0) AS FLOAT) --- Other Fee Amount
													ELSE CASE WHEN ISNULL(TB_FUND.EXTERNALID,'?') = 'D' or SUBSTRING(TB_FUND.FUNDCODE,1,2) in ('JF')                --- JF (JF)  / Allianz Dresdner (DB)
															  THEN cast(ISNULL(tbl_HKcomm.COMMISSION,0.0) AS FLOAT)  --- Commission Amount
														  ELSE CAST(ISNULL(tbl_HKcomm.COMMISSION,0.0) AS FLOAT)  --- Commission Amount [by default]
														  END  --- EXTERNALID = 'D'
													END  --- EXTERNALID = 'C'
											   END  --- EXTERNALID = 'B'
										 END  --- EXTERNALID = 'A'
									END  --- CLASS B
							   END  --- CLASS O
						  END ---UT
					 END																AS Commission_Amount_in_HKD
		,ISNULL(TB_AGENT_CODE.charfield,TB_AGENT.AGENTNAME) as 'Agent_Code' --Agent_Code
		,substring(ISNULL(TB_AGENT_CODE.charfield,TB_AGENT.AGENTNAME),1,2) as 'Branch_Code'
		--,substring(TB_BRANCH.BRANCHNAME,1,2) as 'Branch_Code'		--Branch_Code
		--,substring(TB_BRANCH.BRANCHNAME,5,LEN(TB_BRANCH.BRANCHNAME)-1) as 'Branch_Name'--Branch_Name
		,tbl_channel.Channel										--Channel
		,ISNULL(TB_Ctract.Reference,'') as Contract_Reference
		,TB_PORT.PORTFOLIOKEY
		into #temp
		from HITRUST..MXPORTFOLIOTB TB_PORT						WITH (NOLOCK)
			INNER JOIN HITRUST..MXACCOUNTTB TB_ACC				WITH (NOLOCK)	ON TB_PORT.PORTFOLIOKEY = TB_ACC.PORTFOLIOKEY
			INNER JOIN HITRUST..MXUNITCLASSTB TB_FUNDCLASS		WITH (NOLOCK)	ON TB_ACC.UNITCLASSKEY = TB_FUNDCLASS.UNITCLASSKEY and TB_FUNDCLASS.DELETED = 0
			INNER JOIN HITRUST..MXPROFILETB TB_PROF				WITH (NOLOCK)	ON TB_PROF.PROFILEKEY = TB_PORT.PROFILEKEY
			left join DSBDB..tb_frequentTrade_VC VCCust with (nolock) on VCCust.idno = TB_PROF.SSNO
			left join bpss..TB_RESTRICTED_TXNS_ALL_IDS TB_ID with (nolock) on TB_ID.PortNum = TB_PORT.PORTFOLIONO
			-- CONTRACT INFORMATION
			INNER JOIN HITRUST..MXCTRACTTB TB_CTRACT			WITH (NOLOCK)	ON TB_CTRACT.ACCTKEY = TB_ACC.ACCTKEY
			INNER JOIN HITRUST..MXCTSTATUSTB TB_CTSTAT			WITH (NOLOCK)	ON TB_CTRACT.CTSTATUSKEY = TB_CTSTAT.CTSTATUSKEY
			INNER JOIN HITRUST..MXLANGDESCTB TB_CTSTATDESC		WITH (NOLOCK)	ON TB_CTSTAT.DESCID = TB_CTSTATDESC.DESCKEY
			INNER JOIN HITRUST..MXTRANCODETB TB_TXCODE			WITH (NOLOCK)	ON TB_CTRACT.TRANCODEKEY = TB_TXCODE.TRANCODEKEY
			INNER JOIN HITRUST..MXLANGDESCTB TB_TXCODEDESC		WITH (NOLOCK)	ON TB_TXCODE.DESCID = TB_TXCODEDESC.DESCKEY
			INNER JOIN HITRUST..MXCURRENCYTB TB_CUR				WITH (NOLOCK)	ON TB_CTRACT.DEALCCY = TB_CUR.CURRENCYKEY
		
			LEFT  JOIN hitrust..MXCTRACTSUBTYPETB TB_CTSUBTYPE	WITH (NOLOCK)	ON TB_CTRACT.CTRACTSUBTYPE = TB_CTSUBTYPE.CTRACTSUBTYPEKEY
			LEFT  JOIN hitrust..MXLANGDESCTB TB_CTSUBTYPEDESC	WITH (NOLOCK)	ON TB_CTSUBTYPE.DESCID = TB_CTSUBTYPEDESC.DESCKEY
			INNER JOIN HITRUST..MXTRANSACTIONTB	TB_TRANS		WITH (NOLOCK)	ON TB_CTRACT.CTRACTKEY = TB_TRANS.TRANSACTIONKEY
			-- FUND INFORMATION
			INNER JOIN HITRUST..MXFUNDTB TB_FUND				WITH (NOLOCK)	ON TB_FUNDCLASS.FUNDKEY = TB_FUND.FUNDKEY 
			INNER JOIN HITRUST..MXLANGDESCTB TB_FUNDDESC		WITH (NOLOCK)	ON TB_FUND.DESCID = TB_FUNDDESC.DESCKEY
			INNER JOIN HITRUST..MXCURRENCYTB TB_FUNDCCY			WITH (NOLOCK)	ON TB_FUND.CURRENCY = TB_FUNDCCY.CURRENCYKEY
			LEFT JOIN (SELECT TB_UDF.* FROM HITRUST..MXUSERDEFINEDFIELDTB TB_UDF WITH (NOLOCK) 
							INNER JOIN HITRUST..MXUSERDEFINEDFIELDTYPETB TB_UDFT WITH (NOLOCK)
							ON TB_UDFT.USERDEFINEDFIELDTYPEKEY=TB_UDF.USERDEFINEDFIELDTYPEKEY 
							AND TB_UDFT.CHARFIELDNAME  = 'ISIN Number' AND COMPANY=1 AND TB_UDF.DELETED=0 AND TB_UDFT.DELETED=0) TB_ISIN
							ON TB_ISIN.xrefkey=TB_FUND.FUNDKEY AND TB_ISIN.xrefkeytype=4
			--Settlement
			LEFT JOIN HITRUST..MXSETTLESPLITTB  TB_SET_SPLIT    WITH (NOLOCK)	ON   TB_SET_SPLIT.TRANSACTIONKEY = TB_CTRACT.CTRACTKEY
			LEFT JOIN HITRUST..MXSETTLEACTB TB_SET_ACC			WITH (NOLOCK)   ON   TB_SET_ACC.SETTLEACKEY      = TB_SET_SPLIT.SETTLEKEY
			INNER JOIN hitrust..MXTRANFINSTB TB_TXFINS			WITH (NOLOCK)	ON TB_CTRACT.CTRACTKEY = TB_TXFINS.TRANSACTIONKEY and TB_FUND.CURRENCY = TB_TXFINS.CURRENCYKEY
			inner join hitrust..MXTRANFINSTB tbl_HKcomm			with (nolock)	on tbl_HKcomm.TRANSACTIONKEY = TB_CTRACT.CTRACTKEY and tbl_HKcomm.CURRENCYKEY = 1
			--Channel
			left join dsbdb..VW_UDF_Channel tbl_channel with (nolock) on tbl_channel.CTRACTKEY = TB_CTRACT.CTRACTKEY 
			left join DSBDB..vw_udf_AGENT_CODE TB_AGENT_CODE	WITH (NOLOCK) ON TB_AGENT_CODE.ctractkey = TB_CTRACT.CTRACTKEY 
			left join hitrust..MXCOMMSPLITTB tb_comm with (nolock) on tb_comm.CTRACTKEY = TB_CTRACT.CTRACTKEY
			left join HITRUST..MXAGENTTB TB_AGENT WITH (NOLOCK) ON TB_AGENT.AGENTKEY = tb_comm.AGENTKEY 
			----Customer Name
			--LEFT join HITRUST..MXPROFILETB TB_PROF1				WITH (NOLOCK)	ON TB_PROF1.SSNO = rtrim(left(TB_ID.SSNO,20)) and TB_PROF1.COMPANYKEY = 1
			--LEFT join HITRUST..MXPROFILETB TB_PROF2				WITH (NOLOCK)	ON TB_PROF2.SSNO = rtrim(substring(TB_ID.SSNO,21,20)) and TB_PROF2.COMPANYKEY = 1
			--LEFT join HITRUST..MXPROFILETB TB_PROF3				WITH (NOLOCK)	ON TB_PROF3.SSNO = rtrim(substring(TB_ID.SSNO,41,20)) and TB_PROF3.COMPANYKEY = 1
			--LEFT join HITRUST..MXPROFILETB TB_PROF4				WITH (NOLOCK)	ON TB_PROF4.SSNO = rtrim(substring(TB_ID.SSNO,61,20)) and TB_PROF4.COMPANYKEY = 1
			--LEFT join HITRUST..MXPROFILETB TB_PROF5				WITH (NOLOCK)	ON TB_PROF5.SSNO = rtrim(substring(TB_ID.SSNO,81,20)) and TB_PROF5.COMPANYKEY = 1
			WHERE TB_CTRACT.COMPANY = 1
			AND TB_CTRACT.TRANCODEKEY in ('BaRedemptions','BaSales','BaSwitchIn','BaSwitchOut')
			AND TB_CTRACT.CTRACTNO not like 'REV%'
			AND TB_FUNDCLASS.DELETED = 0
			and TB_CTRACT.CANCELLED = 0
			and TB_CTSTATDESC.DESCRIPTION = 'Settled/Registered'
			AND ((TB_CTSUBTYPEDESC.DESCRIPTION NOT IN ('TFRIN Transfer In','TFROUT Transfer Out') OR TB_CTSUBTYPEDESC.DESCRIPTION IS NULL))
			AND SUBSTRING(TB_PORT.PORTFOLIONO, 9, 1) IN ('1','3','4','9')
			AND (convert(char(8),TB_CTRACT.orderdate,112) >= @sYMD_para1 and convert(char(8),TB_CTRACT.orderdate,112) <= @sYMD_para2)
			order by TB_CTRACT.CTRACTNO



			UPDATE #TEMP
			SET CUSTOMER_NAME_1 =isnull(TB_PROF.NAME,'') 
			FROM #TEMP T
			INNER JOIN HITRUST..MXOWNERTB TB_OWNER ON T.PORTFOLIOKEY = TB_OWNER.PORTFOLIOKEY
			INNER JOIN HITRUST..MXPROFILETB TB_PROF ON TB_PROF.SSNO = T.CUSTOMER_ID_1 AND TB_PROF.PROFILEKEY = TB_OWNER.PROFILEKEY

			UPDATE #TEMP
			SET CUSTOMER_NAME_2 =isnull(TB_PROF.NAME,'') 
			FROM #TEMP T
			INNER JOIN HITRUST..MXOWNERTB TB_OWNER ON T.PORTFOLIOKEY = TB_OWNER.PORTFOLIOKEY
			INNER JOIN HITRUST..MXPROFILETB TB_PROF ON TB_PROF.SSNO = T.CUSTOMER_ID_2 AND TB_PROF.PROFILEKEY = TB_OWNER.PROFILEKEY
   
			UPDATE #TEMP
			SET CUSTOMER_NAME_3 =isnull(TB_PROF.NAME,'') 
			FROM #TEMP T
			INNER JOIN HITRUST..MXOWNERTB TB_OWNER ON T.PORTFOLIOKEY = TB_OWNER.PORTFOLIOKEY
			INNER JOIN HITRUST..MXPROFILETB TB_PROF ON TB_PROF.SSNO = T.CUSTOMER_ID_3 AND TB_PROF.PROFILEKEY = TB_OWNER.PROFILEKEY

			UPDATE #TEMP
			SET CUSTOMER_NAME_4 =isnull(TB_PROF.NAME,'') 
			FROM #TEMP T
			INNER JOIN HITRUST..MXOWNERTB TB_OWNER ON T.PORTFOLIOKEY = TB_OWNER.PORTFOLIOKEY
			INNER JOIN HITRUST..MXPROFILETB TB_PROF ON TB_PROF.SSNO = T.CUSTOMER_ID_4 AND TB_PROF.PROFILEKEY = TB_OWNER.PROFILEKEY
  
  			UPDATE #TEMP
			SET CUSTOMER_NAME_5 =isnull(TB_PROF.NAME,'') 
			FROM #TEMP T
			INNER JOIN HITRUST..MXOWNERTB TB_OWNER ON T.PORTFOLIOKEY = TB_OWNER.PORTFOLIOKEY
			INNER JOIN HITRUST..MXPROFILETB TB_PROF ON TB_PROF.SSNO = T.CUSTOMER_ID_5 AND TB_PROF.PROFILEKEY = TB_OWNER.PROFILEKEY
   
			select * from #TEMP
	END
	IF (@TYPE = 'UT_Balance')
	BEGIN
		DECLARE @CLOSEDATE DATETIME
		SET @CLOSEDATE = CONVERT(DATETIME,@sYMD_para1,114)  
	
		CREATE TABLE #TMP_RESULT (
			PortfolioNo		VARCHAR(200),
			CustomerName	VARCHAR(200),
			SettlementAcct	VARCHAR(200),	
			CustomerName_A	VARCHAR(200),
			CustomerID_A	VARCHAR(200),
			CustomerName_B	VARCHAR(200),
			CustomerID_B	VARCHAR(200),
			CustomerName_C	VARCHAR(200),
			CustomerID_C	VARCHAR(200),
			CustomerName_D	VARCHAR(200),
			CustomerID_D	VARCHAR(200),
			CustomerName_E	VARCHAR(200),
			CustomerID_E	VARCHAR(200),
			ClosingDate		DATETIME,
			FundCode		VARCHAR(200),
			FundName		VARCHAR(500),
			FundType		VARCHAR(50),
			Units			NUMERIC(38,15),
			Currency		VARCHAR(10),
			Amount			NUMERIC(38,15)
		)
	
		CREATE TABLE #TMP_MAIN (
			AcctKey			INT,
			FundKey			INT, 
			PriceType		VARCHAR(5),
			PortfolioNo		VARCHAR(200),
			CustomerName	VARCHAR(200),
			SettlementAcct	VARCHAR(200),	
			CustomerName_A	VARCHAR(200),
			CustomerID_A	VARCHAR(200),
			CustomerName_B	VARCHAR(200),
			CustomerID_B	VARCHAR(200),
			CustomerName_C	VARCHAR(200),
			CustomerID_C	VARCHAR(200),
			CustomerName_D	VARCHAR(200),
			CustomerID_D	VARCHAR(200),
			CustomerName_E	VARCHAR(200),
			CustomerID_E	VARCHAR(200),
			ClosingDate		DATETIME,
			FundCode		VARCHAR(200),
			FundName		VARCHAR(500),
			FundType		VARCHAR(50),
			Units			NUMERIC(38,15),
			Currency		VARCHAR(10),
			Amount			NUMERIC(38,15)
		)	
		----------------------------- PROGRAM START -----------------------------
		INSERT  #TMP_MAIN
		SELECT     
					a.acctkey				AS AcctKey	
				, f.fundkey				AS FundKey
				, pricetp.description	AS PriceType
				, po.portfoliono		AS PortfolioNo
				, po.portfolioname		AS CustomerName
				, ai.acno				AS SettlementAcct
				, joint1.name			AS CustomerName_A
				, joint1.ssno			AS CustomerID_A
				, joint2.name			AS CustomerName_B
				, joint2.ssno			AS CustomerID_B
				, joint3.name			AS CustomerName_C
				, joint3.ssno			AS CustomerID_C
				, joint4.name			AS CustomerName_D
				, joint4.ssno			AS CustomerID_D
				, joint5.name			AS CustomerName_E
				, joint5.ssno			AS CustomerID_E
				, po.CloseDate			AS ClosingDate
				, f.fundcode			AS FundCode
				, fname.[DESCRIPTION]	AS FundName
				, u.CLASSCODE			AS FundType
				, 0						AS Units
				, cur.currencyiso		AS Currency
				, 0						AS Amount

		/*** Holding Balance (Daily) ***/
		FROM	   hitrust..mxaccounttb a 
		INNER JOIN hitrust..mxaccbaltb ab ON ab.acctkey = a.acctkey
		INNER JOIN hitrust..mxunitclasstb u ON a.unitclasskey = u.unitclasskey
		INNER JOIN hitrust..mxfundtb f ON u.fundkey = f.fundkey
		INNER JOIN hitrust..mxlangdesctb fname ON f.descid = fname.desckey
		INNER JOIN hitrust..mxcurrencytb cur ON f.currency = cur.currencykey	
		INNER JOIN hitrust..mxlangdesctb pricetp ON f.valpricetype = pricetp.desckey

		/*** Customer Information ***/
		INNER JOIN hitrust..mxportfoliotb po ON a.portfoliokey = po.portfoliokey	
		INNER JOIN hitrust..mxprofiletb p ON po.profilekey = p.profilekey
		INNER JOIN bpss..TB_RESTRICTED_TXNS_ALL_IDS txns ON po.portfoliokey = txns.portkey
		LEFT  JOIN hitrust..mxprofiletb joint1 ON SUBSTRING(txns.OwnerRelNos, 1, 8) = joint1.relno AND joint1.companykey = '1'
		LEFT  JOIN hitrust..mxprofiletb joint2 ON SUBSTRING(txns.OwnerRelNos, 9, 8) = joint2.relno AND joint2.companykey = '1'
		LEFT  JOIN hitrust..mxprofiletb joint3 ON SUBSTRING(txns.OwnerRelNos, 17, 8) = joint3.relno AND joint3.companykey = '1'
		LEFT  JOIN hitrust..mxprofiletb joint4 ON SUBSTRING(txns.OwnerRelNos, 25, 8) = joint4.relno AND joint4.companykey = '1'
		LEFT  JOIN hitrust..mxprofiletb joint5 ON SUBSTRING(txns.OwnerRelNos, 33, 8) = joint5.relno AND joint5.companykey = '1'
		LEFT  JOIN hitrust..MXPORTSETTLEINSTTB instr ON po.PORTFOLIOKEY = instr.PORTFOLIOKEY
		INNER JOIN hitrust..MXLANGDESCTB ag ON ag.DESCKEY = instr.SETTLEINSTTYPE AND ag.description = 'Subscription'  		
		LEFT  JOIN hitrust..MXSETTLEACTB ai ON instr.SETTLEACCOUNT = ai.SETTLEACKEY AND ai.deleted = 0 
		WHERE  P.SSNO IN (
		'BR51278818       000',
		'IDG2116153',
		'PPG22932145',
		'IDZ3281613',
		'IDG5434121',
		'IDH3345663')
		
		INSERT #TMP_RESULT
		SELECT 
					T.PortfolioNo							AS PortfolioNo
				, T.CustomerName						AS CustomerName
				, T.SettlementAcct						AS SettlementAcct
				, T.CustomerName_A						AS CustomerName_A
				, T.CustomerID_A						AS CustomerID_A
				, T.CustomerName_B						AS CustomerName_B
				, T.CustomerID_B						AS CustomerID_B
				, T.CustomerName_C						AS CustomerName_C
				, T.CustomerID_C						AS CustomerID_C
				, T.CustomerName_D						AS CustomerName_D
				, T.CustomerID_D						AS CustomerID_D
				, T.CustomerName_E						AS CustomerName_E
				, T.CustomerID_E						AS CustomerID_E
				, T.ClosingDate							AS ClosingDate
				, T.FundCode							AS FundCode
				, T.FundName							AS FundName
				, T.FundType							AS FundType
				, abmove.CONFIRMEDMOVEMENT				AS Units
				, T.Currency							AS Currency
				, CASE WHEN T.PriceType = 'NAV' THEN price.navprice * abmove.CONFIRMEDMOVEMENT 
						WHEN T.PriceType = 'Bid' THEN price.bidprice * abmove.CONFIRMEDMOVEMENT 
						ELSE price.offerprice * abmove.CONFIRMEDMOVEMENT 
					END									AS Amount			
		FROM #TMP_MAIN T
		INNER JOIN (
						SELECT ACCTKEY
								, SUM(CONFIRMEDMOVEMENT) AS CONFIRMEDMOVEMENT
								, MAX(CONFIRMEDUPDATEDATE) AS CONFIRMEDUPDATEDATE
						FROM hitrust..mxaccbalmovetb WITH (NOLOCK)
						WHERE CONVERT(CHAR(10),CONFIRMEDUPDATEDATE,111) <= CONVERT(CHAR(10),@CLOSEDATE,111) 
						GROUP BY ACCTKEY
					) abmove ON T.AcctKey = abmove.acctkey	
		INNER JOIN (
						SELECT * FROM hitrust..mxpricetb a
						INNER JOIN (SELECT MAX(pricekey) AS pkey
									FROM hitrust..mxpricetb WITH (NOLOCK)
									WHERE CONVERT(CHAR(10),PriceDate,111) <= CONVERT(CHAR(10),@CLOSEDATE,111)
										AND authdate IS NOT NULL 
										AND deleted = 0
									GROUP BY fundkey) b ON a.pricekey = b.pkey
					) price ON T.FundKey = price.fundkey

		----------------------------- PROGRAM END -----------------------------
		select * from #TMP_RESULT 
		where units > 0 
		order by PortfolioNo

	END
	IF (@TYPE = 'HIB0007')
	BEGIN
		select	--count(p.portfoliono)
			TB_COMMAGENT.AGENTNAME as AgentNo,
			left(cst.description,20) as CTSTS, c.nounit,c.ctractno, c.orderdate, c.effdate, f.fundcode, p.portfoliono
		--	,ss.split
			, ssa.acno as acno_on_ctract, sa.acno as acno_settleins, psit.description as InstType
			, isnull(dealcc.currencyiso, '---') as DealCCY
			, case defaultdealccy
				when 0 then 'FALSE'
				when 1 then 'TRUE'
			  end as DefDealCcy
			, isnull(setcc.currencyiso,'---') as SettlementCCY
			, c.ssref as InitAmt
			, tf.net as SettleAmt
			, c.settledue
		--	, IDS.SSNO as OwnerIDs
		--	, ac.IN_UNITSALLOT  as AllotedAmt
			, pa.ADDRTYPKEY 
			, FA.ADDRESS1 
			, fa.ADDRESS2 
			, fa.ADDRESS3 
			, fa.ADDRESS4 
		--	, psi.*
		from	HITRUST..mxctracttb c with (nolock)
		inner
		join	HITRUST..mxaccounttb acct with (nolock) on c.acctkey = acct.acctkey
		inner
		join	HITRUST..mxunitclasstb uc with (nolock) on uc.unitclasskey = acct.unitclasskey and uc.deleted = 0
		inner
		join	HITRUST..mxfundtb f with (nolock) on f.fundkey = uc.fundkey and f.fundcode  ='HIB0007'
		inner
		join	HITRUST..mxctstatustb cs with (nolock) on cs.ctstatuskey = c.ctstatuskey
		inner
		join	HITRUST..mxlangdesctb cst with (nolock) on cst.desckey = cs.descid
		inner	
		join	HITRUST..mxsettlesplittb ss with (nolock) on ss.transactionkey = c.ctractkey
		inner
		join	HITRUST..mxsettleactb ssa with (nolock) on ssa.settleackey = ss.settlekey
		inner
		join	HITRUST..mxportfoliotb p with (nolock) on p.portfoliokey = acct.portfoliokey
		inner
		join	HITRUST..mxportsettleinsttb psi with (nolock) on psi.portfoliokey = p.portfoliokey
		inner
		join	HITRUST..mxlangdesctb psit with (nolock) on psit.desckey = psi.settleinsttype and psit.description = 'Subscription'
		inner
		join	HITRUST..mxtranfinstb tf with (nolock) on tf.transactionkey = c.ctractkey and tf.currencykey = 1
		left
		join	HITRUST..mxsettleactb sa with (nolock) on sa.settleackey = psi.settleaccount
		left
		join	HITRUST..mxcurrencytb setcc with (nolock) on setcc.currencykey = psi.settleccy
		left
		join	HITRUST..mxcurrencytb dealcc with (nolock) on dealcc.currencykey = psi.searchdealccy
		inner JOIN 
				HITRUST..MXCOMMSPLITTB TB_COMMSPL ON c.CTRACTKEY = TB_COMMSPL.CTRACTKEY AND TB_COMMSPL.COMMPERCENT = 100
		inner JOIN 
				HITRUST..MXAGENTTB TB_COMMAGENT	ON TB_COMMSPL.AGENTKEY = TB_COMMAGENT.AGENTKEY
		inner
		join	hitrust..MXPORTADDR PA on pa.PORTFOLIOKEY = p.PORTFOLIOKEY  and pa.DELETED = 0 and pa.ADDRTYPKEY = 4
		inner
		join	hitrust..MXPROFILEADDRTB FA on FA.CLTADDRESSKEY = PA.ADDRESSKEY and fa.DELETED = 0
		where	--psit.description = 'Subscription'	
			cst.description in ('authorised','priced','settled/registered','new')
		--and	c.effdate >= '2014/7/31'
		and	c.ctractno like 'sub%' 
		order by c.ctractno
	END
END

GO
/****** Object:  StoredProcedure [dbo].[sp_Rpt_HKMA_Half_Year_Retrieve_Data]    Script Date: 5/17/2022 9:57:52 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_Rpt_HKMA_Half_Year_Retrieve_Data]
(
@pXML XML
)
AS
/*
 sqlcmd -s, -W -Q "set nocount on; EXEC Master..sp_Rpt_HKMA_Half_Year_Retrieve_Data @pXML ='<ROOT><TYPE>02_DSB-HKMA-section-I-DSB-details</TYPE><FrEffdate>2020/07/01</FrEffdate><ToEffdate>2021/01/01</ToEffdate></ROOT>' '" | findstr /v /c:"-" /b > "C:\temp\20210315\result5.txt"

EXEC [sp_Rpt_HKMA_Half_Year_Retrieve_Data] '<ROOT><TYPE>01.dahsingVolume</TYPE></ROOT>' 
EXEC [sp_Rpt_HKMA_Half_Year_Retrieve_Data] '<ROOT><TYPE>02.dahsingVolume_bond</TYPE></ROOT>' 
EXEC [sp_Rpt_HKMA_Half_Year_Retrieve_Data] '<ROOT><TYPE>03.dahsingVolume_ELI</TYPE></ROOT>' 
EXEC [sp_Rpt_HKMA_Half_Year_Retrieve_Data] '<ROOT><TYPE>04.commissiondsb</TYPE></ROOT>' 
EXEC [sp_Rpt_HKMA_Half_Year_Retrieve_Data] '<ROOT><TYPE>05.dahsingVolumeman</TYPE></ROOT>'
EXEC [sp_Rpt_HKMA_Half_Year_Retrieve_Data] '<ROOT><TYPE>06.dahsing</TYPE></ROOT>' 
EXEC [sp_Rpt_HKMA_Half_Year_Retrieve_Data] '<ROOT><TYPE>07.dahsing</TYPE></ROOT>' 
EXEC [sp_Rpt_HKMA_Half_Year_Retrieve_Data] '<ROOT><TYPE>08.dahsingTransactionCount</TYPE></ROOT>' 
EXEC [sp_Rpt_HKMA_Half_Year_Retrieve_Data] '<ROOT><TYPE>09.dahsingTransactionCount_bond</TYPE></ROOT>' 
EXEC [sp_Rpt_HKMA_Half_Year_Retrieve_Data] '<ROOT><TYPE>10.dahsingTransactionCount_ELI</TYPE></ROOT>' 
EXEC [sp_Rpt_HKMA_Half_Year_Retrieve_Data] '<ROOT><TYPE>11.dahsingVolume_bond_byClasscode</TYPE></ROOT>' 
EXEC [sp_Rpt_HKMA_Half_Year_Retrieve_Data] '<ROOT><TYPE>12.dahsingVolume_ELI_byClasscode</TYPE></ROOT>' 
--------------------------------------------------------

DECLARE @pRtnXML XML
EXEC [sp_Rpt_HKMA_Half_Year_Retrieve_Data] '
<ROOT>
		<TYPE>12.dahsingVolume_ELI_byClasscode</TYPE>
		<FrEffdate>2019/12/31</FrEffdate>
		<ToEffdate>2020/07/01</ToEffdate>
</ROOT>' 
*/
BEGIN
	DECLARE @TYPE NVARCHAR(200)
	DECLARE @sYMD_para1 NVARCHAR(8)
	DECLARE @sYMD_para2 NVARCHAR(8)
	DECLARE @sDATETO	VARCHAR(10)
	DECLARE @sFrEffdate NVARCHAR(10)
	DECLARE @sToEffdate NVARCHAR(10)
	DECLARE @dtFrEffdate DATETIME
	DECLARE @dtToEffdate DATETIME
	DECLARE @dtDATETO DATETIME

	SELECT 
		@TYPE			= T.C.value('TYPE[1]', 'NVARCHAR(200)'),
		@sYMD_para1			= T.C.value('YMD_para1[1]', 'NVARCHAR(8)'),
		@sYMD_para2			= T.C.value('YMD_para2[1]', 'NVARCHAR(8)'),
		@sDATETO			= T.C.value('DATETO[1]', 'NVARCHAR(10)'),
		@sFrEffdate			= T.C.value('FrEffdate[1]', 'NVARCHAR(10)'),
		@sToEffdate			= T.C.value('ToEffdate[1]', 'NVARCHAR(10)')
		FROM @pXML.nodes('/ROOT') T(C)

	IF (@sFrEffdate IS NOT NULL)
	BEGIN
		SET @dtFrEffdate = (SELECT CONVERT(DATETIME,@sFrEffdate))
	END
	IF (@sToEffdate IS NOT NULL)
	BEGIN
		SET @dtToEffdate = (SELECT CONVERT(DATETIME,@sToEffdate))
	END
	IF (@sDATETO IS NOT NULL)
	BEGIN
		SET @dtDATETO = (SELECT CONVERT(DATETIME,@sDATETO))
	END

	IF OBJECT_ID('tempdb..#ENTITY_PORTFOLIO_TB') IS NOT NULL DROP TABLE #ENTITY_PORTFOLIO_TB
	IF OBJECT_ID('tempdb..#tmp_mxpricetb') IS NOT NULL DROP TABLE #tmp_mxpricetb

	SELECT		PORTFOLIOKEY=0, ENTITY=REPLICATE('A',50), OWNER=0
	INTO		#ENTITY_PORTFOLIO_TB

	TRUNCATE TABLE	#ENTITY_PORTFOLIO_TB
	INSERT INTO	#ENTITY_PORTFOLIO_TB
	EXEC HITRUST..SP_ENTITY


  
   IF (@dtDATETO IS NULL AND @dtFrEffdate IS NULL AND @dtToEffdate IS NULL)
  BEGIN
	  IF (MONTH(GETDATE())<=6)
	  BEGIN
		SET	@dtDATETO = CONVERT(DATETIME, CONVERT(NVARCHAR,YEAR(GETDATE())) + '/01/01')
	  END
	  ELSE
	  BEGIN
		SET	@dtDATETO = CONVERT(DATETIME, CONVERT(NVARCHAR,YEAR(GETDATE())) + '/07/01')
	  END
	  SET @dtFrEffdate = DATEADD(DAY,-1,DATEADD(MONTH,-6,@dtDATETO))
	  SET @dtToEffdate = @dtDATETO
  END

  select @dtFrEffdate,@dtToEffdate


 	SELECT fundkey, max(pricedate) as maxpricedate
	INTO #tmp_mxpricetb
	FROM HITRUST..mxpricetb  WITH (NOLOCK)
	WHERE deleted = 0 and pricedate <  @dtToEffdate															--<<<<<<<<<<<<<<<<<<<<<		DATE_CHANGE
	GROUP BY fundkey

  --SELECT @dtFrEffdate,@dtToEffdate

	IF (@TYPE= '01.dahsingVolume')
	BEGIN
		SELECT           sum(cast ( Isnull(L.Net,0) as decimal ( 12,2))) AS Subscription_gross_amt_hkd, Count(*) as Transaction_Count  
		FROM                hitrust.dbo.MXCTRACTTB a 
				--RS07JAN2011 exclude third-party transfer in & out
				left outer join hitrust.dbo.mxctractsubtypetb cts on a.ctractsubtype = cts.ctractsubtypekey
				left outer join hitrust.dbo.mxlangdesctb cts_lng on cts.descid =  cts_lng.desckey
				INNER JOIN hitrust.dbo.MXACCOUNTTB b ON a.ACCTKEY = b.ACCTKEY 
				INNER JOIN hitrust.dbo.MXPORTFOLIOTB c ON b.PORTFOLIOKEY = c.PORTFOLIOKEY 
				INNER JOIN hitrust.dbo.MXCTSTATUSTB d ON a.CTSTATUSKEY = d.CTSTATUSKEY 
				INNER JOIN hitrust.dbo.MXLANGDESCTB e ON d.DESCID = e.DESCKEY 
				INNER JOIN hitrust.dbo.MXUNITCLASSTB f ON a.UNITCLASSKey = f.UNITCLASSKEY 
				INNER JOIN hitrust.dbo.MXFUNDTB G ON f.FUNDKEY = G.FUNDKEY 
				INNER JOIN hitrust.dbo.MXLANGDESCTB funddesc ON funddesc.DESCKEY = G.DESCID
				INNER JOIN hitrust.dbo.MXCURRENCYTB k ON a.DEALCCY = k.CURRENCYKEY 
				INNER JOIN hitrust.dbo.MXTRANFINSTB L ON a.CTRACTKEY = L.TRANSACTIONKEY 
						AND L.CURRENCYKEY =1 
				INNER JOIN hitrust.dbo.MXCOMMSPLITTB n ON a.CTRACTKEY = n.CTRACTKEY 
				INNER JOIN hitrust.dbo.MXAGENTTB m ON n.AGENTKEY = m.AGENTKEY 
				INNER JOIN DSBDB..TBCURRCOMPANY X ON g.COMPANYKEY = X.COMPANYKEY
		WHERE            
			(e.DESCRIPTION <> 'Reversal') 
			AND (a.TRANCODEKEY IN ('BaSales','WrSales','BaRedemptions','BaSwitchIn','BaSwitchOut')) 
			AND (a.CANCELLED = 0) AND (n.COMMPERCENT = 100)	
			AND f.DELETED = 0 AND g.COMPANYKEY = 1 and a.company = 1
		--	AND (convert(char(10),a.ORDERDATE ,111) > '2011/12/31') AND (convert(char(10),a.ORDERDATE ,111)< '2012/07/01')
		--	AND (convert(char(10),a.ORDERDATE ,111) > '2012/06/30') AND (convert(char(10),a.ORDERDATE ,111)< '2013/01/01')	--<<<<<<<<<<<<<<<<<<
			AND (convert(char(10),a.ORDERDATE ,111) > @dtFrEffdate) AND (convert(char(10),a.ORDERDATE ,111)< @dtToEffdate)	--<<<<<<<<<<<<<<<<<<
			AND (a.reference is null or a.reference not like 'REI%'or a.reference not like 'DIV%' or a.reference not like 'CONV%' ) 
			AND (f.CLASSCODE NOT LIKE '1%')
			AND ( e.DESCRIPTION in ( 'Settled/Registered' , 'Executed' , 'Priced'  ) )
			--RS07JAN2011 exclude third-party transfer in & out
			AND ((cts_lng.description not in ( 'TFRIN Transfer In', 'TFROUT Transfer Out')) or cts_lng.description is null)
	END
	IF (@TYPE= '02.dahsingVolume_bond')
	BEGIN
		SELECT           sum(cast ( isnull(L.Net,0) as decimal ( 12,2))) AS Subscription_gross_amt_hkd  , Count(*) as Transaction_Count  
		FROM                hitrust.dbo.MXCTRACTTB a 
				left outer join hitrust.dbo.mxctractsubtypetb cts on a.ctractsubtype = cts.ctractsubtypekey
				left outer join hitrust.dbo.mxlangdesctb cts_lng on cts.descid =  cts_lng.desckey
				INNER JOIN hitrust.dbo.MXACCOUNTTB b ON a.ACCTKEY = b.ACCTKEY 
				INNER JOIN hitrust.dbo.MXPORTFOLIOTB c ON b.PORTFOLIOKEY = c.PORTFOLIOKEY 
				INNER JOIN hitrust.dbo.MXCTSTATUSTB d ON a.CTSTATUSKEY = d.CTSTATUSKEY 
				INNER JOIN hitrust.dbo.MXLANGDESCTB e ON d.DESCID = e.DESCKEY 
				INNER JOIN hitrust.dbo.MXUNITCLASSTB f ON a.UNITCLASSKey = f.UNITCLASSKEY 
				INNER JOIN hitrust.dbo.MXFUNDTB G ON f.FUNDKEY = G.FUNDKEY 
				INNER JOIN hitrust.dbo.MXLANGDESCTB funddesc ON funddesc.DESCKEY = G.DESCID 
				INNER JOIN hitrust.dbo.MXCURRENCYTB k ON a.DEALCCY = k.CURRENCYKEY 
				INNER JOIN hitrust.dbo.MXTRANFINSTB L ON a.CTRACTKEY = L.TRANSACTIONKEY AND L.CURRENCYKEY = 1
				INNER JOIN hitrust.dbo.MXCOMMSPLITTB n ON a.CTRACTKEY = n.CTRACTKEY 
				INNER JOIN hitrust.dbo.MXAGENTTB m ON n.AGENTKEY = m.AGENTKEY 
				INNER JOIN hitrust.dbo.MXPROFILETB prof ON g.PROFILEKEY = prof.PROFILEKEY  
		WHERE            
			(e.DESCRIPTION <> 'Reversal') 
			AND (a.TRANCODEKEY IN ('BaSales','BaRedemptions'))--,'WrSales','BaSwitchIn','BaSwitchOut','BaTransferIn','BaTransferOut')) 
			AND (a.CANCELLED = 0) AND (n.COMMPERCENT = 100)  	
			AND f.DELETED = 0 and  g.COMPANYKEY = 1 and a.company= 1
		--	and  (convert(char(10),a.ORDERDATE ,111)> '2011/12/31') AND (convert(char(10),a.ORDERDATE ,111) < '2012/07/01')
		--	and  (convert(char(10),a.ORDERDATE ,111)> '2012/06/30') AND (convert(char(10),a.ORDERDATE ,111) < '2013/01/01') --<<<<<<<<<<<<<<<<<<
			and  (convert(char(10),a.ORDERDATE ,111)> @dtFrEffdate) AND (convert(char(10),a.ORDERDATE ,111) < @dtToEffdate) --<<<<<<<<<<<<<<<<<<
			and (f.CLASSCODE LIKE '1%')
			and (f.CLASSCODE NOT LIKE '1E%')
			and ( e.DESCRIPTION in ( 'Settled/Registered' , 'Executed' , 'Priced'  ) )
			AND ((cts_lng.description not in ( 'TFRIN Transfer In', 'TFROUT Transfer Out')) or cts_lng.description is null)
			AND a.ctractkey not in ( 
				select c1.ctractkey from hitrust.dbo.MXCTRACTTB c1
				INNER JOIN hitrust.dbo.MXUNITCLASSTB unitclass ON c1.UNITCLASSKey = unitclass.UNITCLASSKEY 
				INNER JOIN hitrust.dbo.MXFUNDTB fundtb ON unitclass.FUNDKEY = fundtb.FUNDKEY 
				INNER JOIN hitrust.dbo.MXCTSTATUSTB stat ON c1.CTSTATUSKEY = stat.CTSTATUSKEY 
				INNER JOIN hitrust.dbo.MXLANGDESCTB e1 ON stat.DESCID = e1.DESCKEY 
				where (e1.DESCRIPTION <> 'Reversal') 
				and c1.TRANCODEKEY IN ('BaRedemptions' )
				and fundtb.FUNDcode in ( select BondCode from DSBDB.dbo.TB_LEHMAN )
				and (c1.ssREF not like 'BULK%' or c1.ssREF is null)
		--		and (convert(char(10),c1.ORDERDATE ,111)> '2011/12/31') AND (convert(char(10),c1.ORDERDATE ,111) < '2012/07/01')
		--		and (convert(char(10),c1.ORDERDATE ,111)> '2012/06/30') AND (convert(char(10),c1.ORDERDATE ,111) < '2013/01/01')	--<<<<<<<<<<<<<<<<<<
				and (convert(char(10),c1.ORDERDATE ,111)> @dtFrEffdate) AND (convert(char(10),c1.ORDERDATE ,111) < @dtToEffdate)	--<<<<<<<<<<<<<<<<<<
				AND ( e1.DESCRIPTION in ( 'Settled/Registered'  , 'Priced'  ) )
				and unitclass.deleted = 0 and c1.company= 1
		)
	END
	IF (@TYPE= '03.dahsingVolume_ELI')
	BEGIN
		SELECT           sum(cast ( isnull(L.Net,0) as decimal ( 12,2))) AS Subscription_gross_amt_hkd  , Count(*) as Transaction_Count  
		FROM                hitrust.dbo.MXCTRACTTB a 
				left outer join hitrust.dbo.mxctractsubtypetb cts on a.ctractsubtype = cts.ctractsubtypekey
				left outer join hitrust.dbo.mxlangdesctb cts_lng on cts.descid =  cts_lng.desckey
				INNER JOIN hitrust.dbo.MXACCOUNTTB b ON a.ACCTKEY = b.ACCTKEY 
				INNER JOIN hitrust.dbo.MXPORTFOLIOTB c ON b.PORTFOLIOKEY = c.PORTFOLIOKEY 
				INNER JOIN hitrust.dbo.MXCTSTATUSTB d ON a.CTSTATUSKEY = d.CTSTATUSKEY 
				INNER JOIN hitrust.dbo.MXLANGDESCTB e ON d.DESCID = e.DESCKEY 
				INNER JOIN hitrust.dbo.MXUNITCLASSTB f ON a.UNITCLASSKey = f.UNITCLASSKEY 
				INNER JOIN hitrust.dbo.MXFUNDTB G ON f.FUNDKEY = G.FUNDKEY 
				INNER JOIN hitrust.dbo.MXLANGDESCTB funddesc ON funddesc.DESCKEY = G.DESCID 
				INNER JOIN hitrust.dbo.MXCURRENCYTB k ON a.DEALCCY = k.CURRENCYKEY 
				INNER JOIN hitrust.dbo.MXTRANFINSTB L ON a.CTRACTKEY = L.TRANSACTIONKEY AND L.CURRENCYKEY = 1
				INNER JOIN hitrust.dbo.MXCOMMSPLITTB n ON a.CTRACTKEY = n.CTRACTKEY 
				INNER JOIN hitrust.dbo.MXAGENTTB m ON n.AGENTKEY = m.AGENTKEY 
				INNER JOIN hitrust.dbo.MXPROFILETB prof ON g.PROFILEKEY = prof.PROFILEKEY  
		WHERE            
			(e.DESCRIPTION <> 'Reversal') 
			AND (a.TRANCODEKEY IN ('BaSales','BaRedemptions'))--,'WrSales','BaSwitchIn','BaSwitchOut','BaTransferIn','BaTransferOut')) 
			AND (a.CANCELLED = 0) AND (n.COMMPERCENT = 100)  	
			AND f.DELETED = 0 and  g.COMPANYKEY = 1 and a.company= 1
		--	and  (convert(char(10),a.ORDERDATE ,111)> '2011/12/31') AND (convert(char(10),a.ORDERDATE ,111) < '2012/07/01')
		--	and  (convert(char(10),a.ORDERDATE ,111)> '2012/06/30') AND (convert(char(10),a.ORDERDATE ,111) < '2013/01/01')	--<<<<<<<<<<<<<<<<<<
			and  (convert(char(10),a.ORDERDATE ,111)> @dtFrEffdate) AND (convert(char(10),a.ORDERDATE ,111) < @dtToEffdate)	--<<<<<<<<<<<<<<<<<<
			and (f.CLASSCODE LIKE '1E%')
			and ( e.DESCRIPTION in ( 'Settled/Registered' , 'Executed' , 'Priced'  ) )
			AND ((cts_lng.description not in ( 'TFRIN Transfer In', 'TFROUT Transfer Out')) or cts_lng.description is null)
			AND a.ctractkey not in ( 
				select c1.ctractkey from hitrust.dbo.MXCTRACTTB c1
				INNER JOIN hitrust.dbo.MXUNITCLASSTB unitclass ON c1.UNITCLASSKey = unitclass.UNITCLASSKEY 
				INNER JOIN hitrust.dbo.MXFUNDTB fundtb ON unitclass.FUNDKEY = fundtb.FUNDKEY 
				INNER JOIN hitrust.dbo.MXCTSTATUSTB stat ON c1.CTSTATUSKEY = stat.CTSTATUSKEY 
				INNER JOIN hitrust.dbo.MXLANGDESCTB e1 ON stat.DESCID = e1.DESCKEY 
				where (e1.DESCRIPTION <> 'Reversal') 
				and c1.TRANCODEKEY IN ('BaRedemptions' )
				and fundtb.FUNDcode in ( select BondCode from DSBDB.dbo.TB_LEHMAN )
				and (c1.ssREF not like 'BULK%' or c1.ssREF is null)
		--		and (convert(char(10),c1.ORDERDATE ,111)> '2011/12/31') AND (convert(char(10),c1.ORDERDATE ,111) < '2012/07/01')
		--		and (convert(char(10),c1.ORDERDATE ,111)> '2012/06/30') AND (convert(char(10),c1.ORDERDATE ,111) < '2013/01/01')	--<<<<<<<<<<<<<<<<<<
				and (convert(char(10),c1.ORDERDATE ,111)> @dtFrEffdate) AND (convert(char(10),c1.ORDERDATE ,111) < @dtToEffdate)	--<<<<<<<<<<<<<<<<<<
				AND ( e1.DESCRIPTION in ( 'Settled/Registered'  , 'Priced'  ) )
				and unitclass.deleted = 0 and c1.company= 1
		)
	END
	IF (@TYPE= '04.commissiondsb')
	BEGIN
		SELECT          sum(cast ( isnull(L.Commission,0) as decimal ( 12,2)))
		FROM            hitrust.dbo.MXCTRACTTB a 
				left outer join hitrust.dbo.mxctractsubtypetb cts on a.ctractsubtype = cts.ctractsubtypekey
				left outer join hitrust.dbo.mxlangdesctb cts_lng on cts.descid =  cts_lng.desckey
				INNER JOIN hitrust.dbo.MXACCOUNTTB b ON a.ACCTKEY = b.ACCTKEY 
				INNER JOIN hitrust.dbo.MXPORTFOLIOTB c ON b.PORTFOLIOKEY = c.PORTFOLIOKEY 
				INNER JOIN hitrust.dbo.MXCTSTATUSTB d ON a.CTSTATUSKEY = d.CTSTATUSKEY 
				INNER JOIN hitrust.dbo.MXLANGDESCTB e ON d.DESCID = e.DESCKEY 
				INNER JOIN hitrust.dbo.MXUNITCLASSTB f ON a.UNITCLASSKEY = f.UNITCLASSKEY 
				INNER JOIN hitrust.dbo.MXFUNDTB G ON f.FUNDKEY = G.FUNDKEY 
				INNER JOIN hitrust.dbo.MXLANGDESCTB funddesc ON funddesc.DESCKEY = G.DESCID 
				INNER JOIN hitrust.dbo.MXCURRENCYTB k ON a.DEALCCY = k.CURRENCYKEY 
				INNER JOIN hitrust.dbo.MXTRANFINSTB L ON a.CTRACTKEY = L.TRANSACTIONKEY AND L.CURRENCYKEY =1
				INNER JOIN hitrust.dbo.MXCOMMSPLITTB n ON a.CTRACTKEY = n.CTRACTKEY 
				INNER JOIN hitrust.dbo.MXAGENTTB m ON n.AGENTKEY = m.AGENTKEY 
				INNER JOIN hitrust.dbo.MXPROFILETB prof ON g.PROFILEKEY = prof.PROFILEKEY  
		WHERE            
			(e.DESCRIPTION <> 'Reversal') 
			AND (a.TRANCODEKEY IN ('BaSales','WrSales','BaRedemptions','BaSwitchIn','BaSwitchOut')) 
			AND (a.CANCELLED = 0) AND (n.COMMPERCENT = 100) 
		--	AND (H.ADDRTYPKEY = 4) AND H.DELETED = 0
			--The following line added by Louie Lee P20060035A		
			AND f.DELETED = 0 and  g.COMPANYKEY = 1 and a.company =1
			--and Ctractcommamt > 0 
		--	and  (convert(char(10),a.ORDERDATE,111) > '2011/12/31') AND (convert(char(10),a.ORDERDATE,111) < '2012/07/01')
		--	and  (convert(char(10),a.ORDERDATE,111) > '2012/06/30') AND (convert(char(10),a.ORDERDATE,111) < '2013/01/01')	--<<<<<<<<<<<<<<<<<<
			and  (convert(char(10),a.ORDERDATE,111) > @dtFrEffdate) AND (convert(char(10),a.ORDERDATE,111) < @dtToEffdate)	--<<<<<<<<<<<<<<<<<<	
			and ( e.DESCRIPTION in ( 'Settled/Registered' , 'Priced'  ) )
			AND ((cts_lng.description not in ( 'TFRIN Transfer In', 'TFROUT Transfer Out')) or cts_lng.description is null)
	END
	IF (@TYPE= '05.dahsingVolumeman')
	BEGIN
		SELECT           sum(cast ( isnull(L.Net,0) as decimal ( 12,2))) AS Subscription_gross_amt_hkd  
		FROM                hitrust.dbo.MXCTRACTTB a 
				--RS07JAN2011 exclude third-party transfer in & out
				left outer join hitrust.dbo.mxctractsubtypetb cts on a.ctractsubtype = cts.ctractsubtypekey
				left outer join hitrust.dbo.mxlangdesctb cts_lng on cts.descid =  cts_lng.desckey
				INNER JOIN hitrust.dbo.MXACCOUNTTB b ON a.ACCTKEY = b.ACCTKEY 
				INNER JOIN hitrust.dbo.MXPORTFOLIOTB c ON b.PORTFOLIOKEY = c.PORTFOLIOKEY 
				INNER JOIN hitrust.dbo.MXCTSTATUSTB d ON a.CTSTATUSKEY = d.CTSTATUSKEY 
				INNER JOIN hitrust.dbo.MXLANGDESCTB e ON d.DESCID = e.DESCKEY 
				INNER JOIN hitrust.dbo.MXUNITCLASSTB f ON a.UNITCLASSKey = f.UNITCLASSKEY 
				INNER JOIN hitrust.dbo.MXFUNDTB G ON f.FUNDKEY = G.FUNDKEY 
				INNER JOIN hitrust.dbo.MXLANGDESCTB funddesc ON funddesc.DESCKEY = G.DESCID
				INNER JOIN hitrust.dbo.MXCURRENCYTB k ON a.DEALCCY = k.CURRENCYKEY 
				INNER JOIN hitrust.dbo.MXTRANFINSTB L ON a.CTRACTKEY = L.TRANSACTIONKEY 
						AND L.CURRENCYKEY =1 
				INNER JOIN hitrust.dbo.MXCOMMSPLITTB n ON a.CTRACTKEY = n.CTRACTKEY 
				INNER JOIN hitrust.dbo.MXAGENTTB m ON n.AGENTKEY = m.AGENTKEY 
				INNER JOIN DSBDB..TBCURRCOMPANY X ON g.COMPANYKEY = X.COMPANYKEY
		WHERE            
			(e.DESCRIPTION <> 'Reversal') 
			AND (a.TRANCODEKEY IN ('BaSales','WrSales','BaRedemptions','BaSwitchIn','BaSwitchOut')) 
			AND (a.CANCELLED = 0) AND (n.COMMPERCENT = 100)	
			AND f.DELETED = 0 AND g.COMPANYKEY = 1 and a.company = 1
		--	AND (convert(char(10),a.ORDERDATE ,111) > '2011/12/31') AND (convert(char(10),a.ORDERDATE ,111)< '2012/07/01')
		--	AND (convert(char(10),a.ORDERDATE ,111) > '2012/06/30') AND (convert(char(10),a.ORDERDATE ,111)< '2013/01/01')	--<<<<<<<<<<<<<<<<<<
			AND (convert(char(10),a.ORDERDATE ,111) > @dtFrEffdate) AND (convert(char(10),a.ORDERDATE ,111)< @dtToEffdate)	--<<<<<<<<<<<<<<<<<<
			AND (a.reference is null or a.reference not like 'REI%'or a.reference not like 'DIV%' or a.reference not like 'CONV%' ) 
			AND (f.CLASSCODE NOT LIKE '1%')
			and (g.fundcode in( 'MAN0095696', 'IVT5161980' ,'AXA3500901', 'SCH5128608' ) )
			AND ( e.DESCRIPTION in ( 'Settled/Registered' , 'Executed' , 'Priced'  ) )
			--RS07JAN2011 exclude third-party transfer in & out
			AND ((cts_lng.description not in ( 'TFRIN Transfer In', 'TFROUT Transfer Out')) or cts_lng.description is null)
	END
	IF (@TYPE= '06.dahsing')
	BEGIN
		select pro.portfoliono
		from hitrust.dbo.MXACCBALMOVETB accm with (nolock)
		inner join hitrust.dbo.mxaccounttb acc with (nolock) on accm.acctkey = acc.acctkey
		inner join hitrust.dbo.mxportfoliotb pro with (nolock) on pro.portfoliokey = acc.portfoliokey
		--where accm.effdate < '2012/07/01'	--<<<<<<<<<<<<<<<<<<
		-- where accm.effdate < '2013/01/01'
		where accm.effdate < @dtToEffdate
		and pro.company = 1 and acc.company = 1
		and pro.portfoliono not in (
				select distinct c.portfoliono
				FROM   hitrust.dbo.MXCTRACTTB a with (nolock) 
				left outer join hitrust.dbo.mxctractsubtypetb cts with (nolock) on a.ctractsubtype = cts.ctractsubtypekey
				left outer join hitrust.dbo.mxlangdesctb cts_lng with (nolock) on cts.descid =  cts_lng.desckey
				INNER JOIN hitrust.dbo.MXACCOUNTTB b with (nolock) ON a.ACCTKEY = b.ACCTKEY 
				INNER JOIN hitrust.dbo.MXPORTFOLIOTB c with (nolock) ON b.PORTFOLIOKEY = c.PORTFOLIOKEY 
				INNER JOIN hitrust.dbo.MXCTSTATUSTB d with (nolock) ON a.CTSTATUSKEY = d.CTSTATUSKEY 
				INNER JOIN hitrust.dbo.MXLANGDESCTB e with (nolock) ON d.DESCID = e.DESCKEY 
				INNER JOIN hitrust.dbo.MXUNITCLASSTB f with (nolock) ON a.UNITCLASSKey = f.UNITCLASSKEY 
				INNER JOIN hitrust.dbo.MXFUNDTB G with (nolock) ON f.FUNDKEY = G.FUNDKEY 
				INNER JOIN hitrust.dbo.MXLANGDESCTB funddesc with (nolock) ON funddesc.DESCKEY = G.DESCID
				INNER JOIN hitrust.dbo.MXCURRENCYTB k with (nolock) ON a.DEALCCY = k.CURRENCYKEY 
				INNER JOIN hitrust.dbo.MXTRANFINSTB L with (nolock) ON a.CTRACTKEY = L.TRANSACTIONKEY AND L.CURRENCYKEY =1 
				INNER JOIN hitrust.dbo.MXCOMMSPLITTB n with (nolock) ON a.CTRACTKEY = n.CTRACTKEY 
				INNER JOIN hitrust.dbo.MXAGENTTB m with (nolock) ON n.AGENTKEY = m.AGENTKEY 
				INNER JOIN DSBDB..TBCURRCOMPANY X with (nolock) ON g.COMPANYKEY = X.COMPANYKEY
			WHERE            
			(e.DESCRIPTION <> 'Reversal') 
			AND (a.TRANCODEKEY IN ('BaSales','WrSales','BaRedemptions','BaSwitchIn','BaSwitchOut')) 
			AND (a.CANCELLED = 0) AND (n.COMMPERCENT = 100)	
			AND f.DELETED = 0 AND g.COMPANYKEY = 1 and a.company = 1
		--	AND (convert(char(10),a.ORDERDATE ,111) > '2011/06/30') AND (convert(char(10),a.ORDERDATE ,111)< '2012/07/01')	--<<<<<<<<<<<<<<<<<<
		--	AND (convert(char(10),a.ORDERDATE ,111) > '2011/12/31') AND (convert(char(10),a.ORDERDATE ,111)< '2013/01/01')
			AND (convert(char(10),a.ORDERDATE ,111) > @dtFrEffdate) AND (convert(char(10),a.ORDERDATE ,111) < @dtToEffdate)
			AND (a.reference is null or a.reference not like 'REI%'or a.reference not like 'DIV%' or a.reference not like 'CONV%' ) 
			--AND (f.CLASSCODE NOT LIKE '1%')
			AND ( e.DESCRIPTION in ( 'Settled/Registered' , 'Executed' , 'Priced'  ) )
			AND ((cts_lng.description not in ( 'TFRIN Transfer In', 'TFROUT Transfer Out')) or cts_lng.description is null)
			AND a.ctractkey not in ( 
				select c1.ctractkey from hitrust.dbo.MXCTRACTTB c1
				INNER JOIN hitrust.dbo.MXUNITCLASSTB unitclass ON c1.UNITCLASSKey = unitclass.UNITCLASSKEY 
				INNER JOIN hitrust.dbo.MXFUNDTB fundtb ON unitclass.FUNDKEY = fundtb.FUNDKEY 
				INNER JOIN hitrust.dbo.MXCTSTATUSTB stat ON c1.CTSTATUSKEY = stat.CTSTATUSKEY 
				INNER JOIN hitrust.dbo.MXLANGDESCTB e1 ON stat.DESCID = e1.DESCKEY 
				where 	(e1.DESCRIPTION <> 'Reversal') 
				and c1.TRANCODEKEY IN ('BaRedemptions' )
				and fundtb.FUNDcode in ( select BondCode from DSBDB.dbo.TB_LEHMAN )
				and (c1.ssREF not like 'BULK%' or c1.ssREF is null)
		--		and (convert(char(10),c1.ORDERDATE ,111)> '2011/06/30') AND (convert(char(10),c1.ORDERDATE ,111) < '2012/07/01')	--<<<<<<<<<<<<<<<<<<
				and (convert(char(10),c1.ORDERDATE ,111)> @dtFrEffdate) AND (convert(char(10),c1.ORDERDATE ,111) < @dtToEffdate)
				AND ( e1.DESCRIPTION in ( 'Settled/Registered'  , 'Priced'  ) )
				and unitclass.deleted = 0 and c1.company= 1
			)
		)
		group by pro.portfoliono
		having sum(isnull(accm.confirmedmovement,0)) > 0
	END
	IF (@TYPE= '07.dahsing')
	BEGIN
		select distinct c.portfoliono
			FROM   hitrust.dbo.MXCTRACTTB a 
			left outer join hitrust.dbo.mxctractsubtypetb cts on a.ctractsubtype = cts.ctractsubtypekey
			left outer join hitrust.dbo.mxlangdesctb cts_lng on cts.descid =  cts_lng.desckey
			INNER JOIN hitrust.dbo.MXACCOUNTTB b ON a.ACCTKEY = b.ACCTKEY 
			INNER JOIN hitrust.dbo.MXPORTFOLIOTB c ON b.PORTFOLIOKEY = c.PORTFOLIOKEY 
			INNER JOIN hitrust.dbo.MXCTSTATUSTB d ON a.CTSTATUSKEY = d.CTSTATUSKEY 
			INNER JOIN hitrust.dbo.MXLANGDESCTB e ON d.DESCID = e.DESCKEY 
			INNER JOIN hitrust.dbo.MXUNITCLASSTB f ON a.UNITCLASSKey = f.UNITCLASSKEY 
			INNER JOIN hitrust.dbo.MXFUNDTB G ON f.FUNDKEY = G.FUNDKEY 
			INNER JOIN hitrust.dbo.MXLANGDESCTB funddesc ON funddesc.DESCKEY = G.DESCID
			INNER JOIN hitrust.dbo.MXCURRENCYTB k ON a.DEALCCY = k.CURRENCYKEY 
			INNER JOIN hitrust.dbo.MXTRANFINSTB L ON a.CTRACTKEY = L.TRANSACTIONKEY AND L.CURRENCYKEY =1 
			INNER JOIN hitrust.dbo.MXCOMMSPLITTB n ON a.CTRACTKEY = n.CTRACTKEY 
			INNER JOIN hitrust.dbo.MXAGENTTB m ON n.AGENTKEY = m.AGENTKEY 
			INNER JOIN DSBDB..TBCURRCOMPANY X ON g.COMPANYKEY = X.COMPANYKEY
				WHERE            
				(e.DESCRIPTION <> 'Reversal') 
				AND (a.TRANCODEKEY IN ('BaSales','WrSales','BaRedemptions','BaSwitchIn','BaSwitchOut')) 
				AND (a.CANCELLED = 0) AND (n.COMMPERCENT = 100)	
				AND f.DELETED = 0 AND g.COMPANYKEY = 1 and a.company = 1
			--	AND (convert(char(10),a.ORDERDATE ,111) > '2011/06/30') AND (convert(char(10),a.ORDERDATE ,111)< '2012/07/01')	--<<<<<<<<<<<<<<<<<<
			--	AND (convert(char(10),a.ORDERDATE ,111) > '2011/12/31') AND (convert(char(10),a.ORDERDATE ,111)< '2013/01/01')
				AND (convert(char(10),a.ORDERDATE ,111) > @dtFrEffdate) AND (convert(char(10),a.ORDERDATE ,111) < @dtToEffdate)
				AND (a.reference is null or a.reference not like 'REI%'or a.reference not like 'DIV%' or a.reference not like 'CONV%' ) 
				--AND (f.CLASSCODE NOT LIKE '1%')
				AND ( e.DESCRIPTION in ( 'Settled/Registered' , 'Executed' , 'Priced'  ) )
				AND ((cts_lng.description not in ( 'TFRIN Transfer In', 'TFROUT Transfer Out')) or cts_lng.description is null)
				AND a.ctractkey not in ( 
					select c1.ctractkey from hitrust.dbo.MXCTRACTTB c1
					INNER JOIN hitrust.dbo.MXUNITCLASSTB unitclass ON c1.UNITCLASSKey = unitclass.UNITCLASSKEY 
					INNER JOIN hitrust.dbo.MXFUNDTB fundtb ON unitclass.FUNDKEY = fundtb.FUNDKEY 
					INNER JOIN hitrust.dbo.MXCTSTATUSTB stat ON c1.CTSTATUSKEY = stat.CTSTATUSKEY 
					INNER JOIN hitrust.dbo.MXLANGDESCTB e1 ON stat.DESCID = e1.DESCKEY 
					where 	(e1.DESCRIPTION <> 'Reversal') 
					and c1.TRANCODEKEY IN ('BaRedemptions' )
					and fundtb.FUNDcode in ( select BondCode from DSBDB.dbo.TB_LEHMAN )
					and (c1.ssREF not like 'BULK%' or c1.ssREF is null)
			--		and (convert(char(10),c1.ORDERDATE ,111)> '2011/06/30') AND (convert(char(10),c1.ORDERDATE ,111) < '2012/07/01')	--<<<<<<<<<<<<<<<<<<
			--		and (convert(char(10),c1.ORDERDATE ,111)> '2011/12/31') AND (convert(char(10),c1.ORDERDATE ,111) < '2013/01/01')
					and (convert(char(10),c1.ORDERDATE ,111) > @dtFrEffdate) AND (convert(char(10),c1.ORDERDATE ,111) < @dtToEffdate)
					AND ( e1.DESCRIPTION in ( 'Settled/Registered'  , 'Priced'  ) )
					and unitclass.deleted = 0 and c1.company= 1
				)
	END
	IF (@TYPE= '08.dahsingTransactionCount')
	BEGIN
		SELECT	count(*)	  
		from 	hitrust..mxctracttb a 
			--RS07JAN2011 exclude third-party transfer in & out
			left outer join hitrust.dbo.mxctractsubtypetb cts on a.ctractsubtype = cts.ctractsubtypekey
			left outer join hitrust.dbo.mxlangdesctb cts_lng on cts.descid =  cts_lng.desckey
			INNER JOIN hitrust..mxaccounttb b  ON a.acctkey = b.acctkey
			INNER JOIN hitrust.dbo.MXCTSTATUSTB d ON a.CTSTATUSKEY = d.CTSTATUSKEY 
			INNER JOIN hitrust.dbo.MXLANGDESCTB e ON d.DESCID = e.DESCKEY
			INNER JOIN hitrust.dbo.MXUNITCLASSTB f ON b.UNITCLASSkey = f.UNITCLASSKEY  
			INNER JOIN hitrust.dbo.MXFUNDTB G ON f.FUNDKEY = G.FUNDKEY 
		WHERE     
			(a.TRANCODEKEY IN ('BaSales','WrSales','BaRedemptions','BaSwitchIn','BaSwitchOut','BaTransferIn','BaTransferOut'))
			AND (e.DESCRIPTION <> 'Reversal') 
			AND (a.CANCELLED = 0)
			--The following line added by Louie Lee P20060035A		
			AND f.DELETED = 0 
			and  g.COMPANYKEY = 1
		--	and  (a.ORDERDATE > '2011/12/31') AND (a.ORDERDATE < '2012/07/01')	
		--	and  (a.ORDERDATE > '2012/06/30') AND (a.ORDERDATE < '2013/01/01')
			and  (a.ORDERDATE > @dtFrEffdate) AND (a.ORDERDATE < @dtToEffdate)	--<<<<<<<<<<<<<<<<<<
			--includes bond notes too 
			and (f.CLASSCODE not like '1%')
			and (( a.reference is null or a.reference = '' )  or a.ssREF like 'BULK%')
			and ( e.DESCRIPTION in ( 'Settled/Registered' , 'Executed' , 'Priced'  ))
			--RS07JAN2011 exclude third-party transfer in & out
			AND ((cts_lng.description not in ( 'TFRIN Transfer In', 'TFROUT Transfer Out')) or cts_lng.description is null)
	END
	IF (@TYPE= '09.dahsingTransactionCount_bond')
	BEGIN
		SELECT	count(*)	  
		from 	hitrust..mxctracttb a 
			--RS07JAN2011 exclude third-party transfer in & out
			left outer join hitrust.dbo.mxctractsubtypetb cts on a.ctractsubtype = cts.ctractsubtypekey
			left outer join hitrust.dbo.mxlangdesctb cts_lng on cts.descid =  cts_lng.desckey
			INNER JOIN hitrust..mxaccounttb b  ON a.acctkey = b.acctkey
			INNER JOIN hitrust.dbo.MXCTSTATUSTB d ON a.CTSTATUSKEY = d.CTSTATUSKEY 
			INNER JOIN hitrust.dbo.MXLANGDESCTB e ON d.DESCID = e.DESCKEY
			INNER JOIN hitrust.dbo.MXUNITCLASSTB f ON b.UNITCLASSkey = f.UNITCLASSKEY  
			INNER JOIN hitrust.dbo.MXFUNDTB G ON f.FUNDKEY = G.FUNDKEY 
		WHERE     
			(a.TRANCODEKEY IN ('BaSales','WrSales','BaRedemptions','BaSwitchIn','BaSwitchOut','BaTransferIn','BaTransferOut'))
			AND (e.DESCRIPTION <> 'Reversal') 
			AND (a.CANCELLED = 0)
			--The following line added by Louie Lee P20060035A		
			AND f.DELETED = 0 
			and  g.COMPANYKEY = 1 
		--	and  (a.ORDERDATE > '2011/12/31') AND (a.ORDERDATE < '2012/07/01')	--<<<<<<<<<<<<<<<<<<
		--	and  (a.ORDERDATE > '2012/06/30') AND (a.ORDERDATE < '2013/01/01')
			and  (a.ORDERDATE > @dtFrEffdate) AND (a.ORDERDATE < @dtToEffdate)
			--includes bond notes too 
			and (f.CLASSCODE  like '1%')
			and (f.CLASSCODE NOT LIKE '1E%')
			and (( a.reference is null or a.reference = '' )  or a.ssref like 'BULK%')
			and ( e.DESCRIPTION in ( 'Settled/Registered' , 'Executed' , 'Priced'  ) )		
			--RS07JAN2011 exclude third-party transfer in & out
			AND ((cts_lng.description not in ( 'TFRIN Transfer In', 'TFROUT Transfer Out')) or cts_lng.description is null)
	END
	IF (@TYPE='10.dahsingTransactionCount_ELI')
	BEGIN
		SELECT	count(*)	  
		from 	hitrust..mxctracttb a 
			--RS07JAN2011 exclude third-party transfer in & out
			left outer join hitrust.dbo.mxctractsubtypetb cts on a.ctractsubtype = cts.ctractsubtypekey
			left outer join hitrust.dbo.mxlangdesctb cts_lng on cts.descid =  cts_lng.desckey
			INNER JOIN hitrust..mxaccounttb b  ON a.acctkey = b.acctkey
			INNER JOIN hitrust.dbo.MXCTSTATUSTB d ON a.CTSTATUSKEY = d.CTSTATUSKEY 
			INNER JOIN hitrust.dbo.MXLANGDESCTB e ON d.DESCID = e.DESCKEY
			INNER JOIN hitrust.dbo.MXUNITCLASSTB f ON b.UNITCLASSkey = f.UNITCLASSKEY  
			INNER JOIN hitrust.dbo.MXFUNDTB G ON f.FUNDKEY = G.FUNDKEY 
		WHERE     
			(a.TRANCODEKEY IN ('BaSales','WrSales','BaRedemptions','BaSwitchIn','BaSwitchOut','BaTransferIn','BaTransferOut'))
			AND (e.DESCRIPTION <> 'Reversal') 
			AND (a.CANCELLED = 0)
			--The following line added by Louie Lee P20060035A		
			AND f.DELETED = 0 
			and  g.COMPANYKEY = 1 
		--	and  (a.ORDERDATE > '2011/12/31') AND (a.ORDERDATE < '2012/07/01')	--<<<<<<<<<<<<<<<<<<
		--	and  (a.ORDERDATE > '2012/06/30') AND (a.ORDERDATE < '2013/01/01')
			and  (a.ORDERDATE > @dtFrEffdate) AND (a.ORDERDATE < @dtToEffdate)
			--includes bond notes too 
			and (f.CLASSCODE LIKE '1E%')
			and (( a.reference is null or a.reference = '' )  or a.ssref like 'BULK%')
			and ( e.DESCRIPTION in ( 'Settled/Registered' , 'Executed' , 'Priced'  ) )		
			--RS07JAN2011 exclude third-party transfer in & out
			AND ((cts_lng.description not in ( 'TFRIN Transfer In', 'TFROUT Transfer Out')) or cts_lng.description is null)
	END
	IF (@TYPE= '11.dahsingVolume_bond_byClasscode')
	BEGIN
		SELECT           sum(cast (  isnull(L.Net,0)   as decimal ( 12,2))) AS Subscription_gross_amt_hkd  , f.classcode
		FROM                hitrust.dbo.MXCTRACTTB a
				--RS07JAN2011 exclude third-party transfer in & out
				left outer join hitrust.dbo.mxctractsubtypetb cts on a.ctractsubtype = cts.ctractsubtypekey
				left outer join hitrust.dbo.mxlangdesctb cts_lng on cts.descid =  cts_lng.desckey 
				INNER JOIN hitrust.dbo.MXACCOUNTTB b ON a.ACCTKEY = b.ACCTKEY 
				INNER JOIN hitrust.dbo.MXPORTFOLIOTB c ON b.PORTFOLIOKEY = c.PORTFOLIOKEY 
				INNER JOIN hitrust.dbo.MXCTSTATUSTB d ON a.CTSTATUSKEY = d.CTSTATUSKEY 
				INNER JOIN hitrust.dbo.MXLANGDESCTB e ON d.DESCID = e.DESCKEY 
				INNER JOIN hitrust.dbo.MXUNITCLASSTB f ON a.UNITCLASSKey = f.UNITCLASSKEY 
				INNER JOIN hitrust.dbo.MXFUNDTB G ON f.FUNDKEY = G.FUNDKEY 
				INNER JOIN hitrust.dbo.MXLANGDESCTB funddesc ON funddesc.DESCKEY = G.DESCID 
				INNER JOIN hitrust.dbo.MXCURRENCYTB k ON a.DEALCCY = k.CURRENCYKEY 
				INNER JOIN hitrust.dbo.MXTRANFINSTB L ON a.CTRACTKEY = L.TRANSACTIONKEY AND L.CURRENCYKEY =1 
				INNER JOIN hitrust.dbo.MXCOMMSPLITTB n ON a.CTRACTKEY = n.CTRACTKEY 
				INNER JOIN hitrust.dbo.MXAGENTTB m ON n.AGENTKEY = m.AGENTKEY 
				INNER JOIN hitrust.dbo.VW_OWNERS v ON b.PORTFOLIOKEY = v.PORTFOLIOKEY 
				INNER JOIN DSBDB..TBCURRCOMPANY X ON g.COMPANYKEY = X.COMPANYKEY
				INNER JOIN hitrust.dbo.MXPROFILETB prof ON g.PROFILEKEY = prof.PROFILEKEY  
		WHERE            
			(e.DESCRIPTION <> 'Reversal') 
			AND (a.TRANCODEKEY IN ('BaSales','WrSales','BaRedemptions'))--,'BaSwitchIn','BaSwitchOut','BaTransferIn','BaTransferOut')) 
			AND (a.CANCELLED = 0) AND (n.COMMPERCENT = 100) 
			AND f.DELETED = 0 and  g.COMPANYKEY = 1  and a.company= 1
		--	and  (a.ORDERDATE > '2011/12/31') AND (a.ORDERDATE < '2012/07/01')	--<<<<<<<<<<<<<<<<<<
		--	and  (a.ORDERDATE > '2012/06/30') AND (a.ORDERDATE < '2013/01/01')
			and  (a.ORDERDATE > @dtFrEffdate) AND (a.ORDERDATE < @dtToEffdate)
			and (f.CLASSCODE LIKE '1%')
			and (f.CLASSCODE NOT LIKE '1E%')
			and ( e.DESCRIPTION in ( 'Settled/Registered' , 'Executed' , 'Priced'  ) )
			AND ((cts_lng.description not in ( 'TFRIN Transfer In', 'TFROUT Transfer Out')) or cts_lng.description is null)
			AND a.ctractkey not in ( 
				select c1.ctractkey from hitrust.dbo.MXCTRACTTB c1
				INNER JOIN hitrust.dbo.MXUNITCLASSTB unitclass ON c1.UNITCLASSKey = unitclass.UNITCLASSKEY 
				INNER JOIN hitrust.dbo.MXFUNDTB fundtb ON unitclass.FUNDKEY = fundtb.FUNDKEY 
				INNER JOIN hitrust.dbo.MXCTSTATUSTB stat ON c1.CTSTATUSKEY = stat.CTSTATUSKEY 
				INNER JOIN hitrust.dbo.MXLANGDESCTB e1 ON stat.DESCID = e1.DESCKEY 
				where (e1.DESCRIPTION <> 'Reversal') 
				and c1.TRANCODEKEY IN ('BaRedemptions' )
				and fundtb.FUNDcode in ( select BondCode from DSBDB.dbo.TB_LEHMAN )
				and (c1.ssREF not like 'BULK%' or c1.ssREF is null)
		--		and (convert(char(10),c1.ORDERDATE ,111)> '2011/12/31') AND (convert(char(10),c1.ORDERDATE ,111) < '2012/07/01')	--<<<<<<<<<<<<<<<<<<
		--		and (convert(char(10),c1.ORDERDATE ,111)> '2012/06/30') AND (convert(char(10),c1.ORDERDATE ,111) < '2013/01/01')
				and (convert(char(10),c1.ORDERDATE ,111)> @dtFrEffdate) AND (convert(char(10),c1.ORDERDATE ,111) < @dtToEffdate)
				AND ( e1.DESCRIPTION in ( 'Settled/Registered'  , 'Priced'  ) )
				and unitclass.deleted = 0 and c1.company= 1
		)
		group by f.classcode
	END
	IF (@TYPE= '12.dahsingVolume_ELI_byClasscode')
	BEGIN

		SELECT           sum(cast (  isnull(L.Net,0)   as decimal ( 12,2))) AS Subscription_gross_amt_hkd  , f.classcode
		FROM                hitrust.dbo.MXCTRACTTB a
				--RS07JAN2011 exclude third-party transfer in & out
				left outer join hitrust.dbo.mxctractsubtypetb cts on a.ctractsubtype = cts.ctractsubtypekey
				left outer join hitrust.dbo.mxlangdesctb cts_lng on cts.descid =  cts_lng.desckey 
				INNER JOIN hitrust.dbo.MXACCOUNTTB b ON a.ACCTKEY = b.ACCTKEY 
				INNER JOIN hitrust.dbo.MXPORTFOLIOTB c ON b.PORTFOLIOKEY = c.PORTFOLIOKEY 
				INNER JOIN hitrust.dbo.MXCTSTATUSTB d ON a.CTSTATUSKEY = d.CTSTATUSKEY 
				INNER JOIN hitrust.dbo.MXLANGDESCTB e ON d.DESCID = e.DESCKEY 
				INNER JOIN hitrust.dbo.MXUNITCLASSTB f ON a.UNITCLASSKey = f.UNITCLASSKEY 
				INNER JOIN hitrust.dbo.MXFUNDTB G ON f.FUNDKEY = G.FUNDKEY 
				INNER JOIN hitrust.dbo.MXLANGDESCTB funddesc ON funddesc.DESCKEY = G.DESCID 
				INNER JOIN hitrust.dbo.MXCURRENCYTB k ON a.DEALCCY = k.CURRENCYKEY 
				INNER JOIN hitrust.dbo.MXTRANFINSTB L ON a.CTRACTKEY = L.TRANSACTIONKEY AND L.CURRENCYKEY =1 
				INNER JOIN hitrust.dbo.MXCOMMSPLITTB n ON a.CTRACTKEY = n.CTRACTKEY 
				INNER JOIN hitrust.dbo.MXAGENTTB m ON n.AGENTKEY = m.AGENTKEY 
				INNER JOIN hitrust.dbo.VW_OWNERS v ON b.PORTFOLIOKEY = v.PORTFOLIOKEY 
				INNER JOIN DSBDB..TBCURRCOMPANY X ON g.COMPANYKEY = X.COMPANYKEY
				INNER JOIN hitrust.dbo.MXPROFILETB prof ON g.PROFILEKEY = prof.PROFILEKEY  
		WHERE            
			(e.DESCRIPTION <> 'Reversal') 
			AND (a.TRANCODEKEY IN ('BaSales','WrSales','BaRedemptions'))--,'BaSwitchIn','BaSwitchOut','BaTransferIn','BaTransferOut')) 
			AND (a.CANCELLED = 0) AND (n.COMMPERCENT = 100) 
			AND f.DELETED = 0 and  g.COMPANYKEY = 1  and a.company= 1
		--	and  (a.ORDERDATE > '2011/12/31') AND (a.ORDERDATE < '2012/07/01')	--<<<<<<<<<<<<<<<<<<
		--	and  (a.ORDERDATE > '2012/06/30') AND (a.ORDERDATE < '2013/01/01')
			and (a.ORDERDATE > @dtFrEffdate) AND (a.ORDERDATE < @dtToEffdate)
			and (f.CLASSCODE LIKE '1E%')
			and ( e.DESCRIPTION in ( 'Settled/Registered' , 'Executed' , 'Priced'  ) )
			AND ((cts_lng.description not in ( 'TFRIN Transfer In', 'TFROUT Transfer Out')) or cts_lng.description is null)
			AND a.ctractkey not in ( 
				select c1.ctractkey from hitrust.dbo.MXCTRACTTB c1
				INNER JOIN hitrust.dbo.MXUNITCLASSTB unitclass ON c1.UNITCLASSKey = unitclass.UNITCLASSKEY 
				INNER JOIN hitrust.dbo.MXFUNDTB fundtb ON unitclass.FUNDKEY = fundtb.FUNDKEY 
				INNER JOIN hitrust.dbo.MXCTSTATUSTB stat ON c1.CTSTATUSKEY = stat.CTSTATUSKEY 
				INNER JOIN hitrust.dbo.MXLANGDESCTB e1 ON stat.DESCID = e1.DESCKEY 
				where (e1.DESCRIPTION <> 'Reversal') 
				and c1.TRANCODEKEY IN ('BaRedemptions' )
				and fundtb.FUNDcode in ( select BondCode from DSBDB.dbo.TB_LEHMAN )
				and (c1.ssREF not like 'BULK%' or c1.ssREF is null)
		--		and (convert(char(10),c1.ORDERDATE ,111)> '2011/12/31') AND (convert(char(10),c1.ORDERDATE ,111) < '2012/07/01')	--<<<<<<<<<<<<<<<<<<
		--		and (convert(char(10),c1.ORDERDATE ,111)> '2012/06/30') AND (convert(char(10),c1.ORDERDATE ,111) < '2013/01/01')
				and (convert(char(10),c1.ORDERDATE ,111)> @dtFrEffdate) AND (convert(char(10),c1.ORDERDATE ,111) < @dtToEffdate)
				AND ( e1.DESCRIPTION in ( 'Settled/Registered'  , 'Priced'  ) )
				and unitclass.deleted = 0 and c1.company= 1
		)
		group by f.classcode

	END
END

GO
/****** Object:  StoredProcedure [dbo].[sp_Rpt_HKMA_Half_Year_Survey_PBD]    Script Date: 5/17/2022 9:57:52 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_Rpt_HKMA_Half_Year_Survey_PBD]
(
@pXML XML
)
AS

/*
 sqlcmd -s, -W -Q "set nocount on; EXEC Master..sp_Rpt_HKMA_Half_Year_Survey_PBD @pXML ='<ROOT><TYPE>HIB0007</TYPE></ROOT>'" | findstr /v /c:"-" /b > "C:\temp\20210315\result5.txt"

DECLARE @pRtnXML XML
EXEC [sp_Rpt_HKMA_Half_Year_Survey_PBD] '
<ROOT>
		<TYPE>02_DSB-HKMA-section-I-DSB-details</TYPE>

</ROOT>' 

DECLARE @pRtnXML XML
EXEC [sp_Rpt_HKMA_Half_Year_Survey_PBD] '
<ROOT>
		<TYPE>03_DSB-HKMA-section-I-DSB-details-COMM</TYPE>
		<FrEffdate>2020/07/01</FrEffdate>
		<ToEffdate>2021/01/01</ToEffdate>
</ROOT>' 

DECLARE @pRtnXML XML
EXEC [sp_Rpt_HKMA_Half_Year_Survey_PBD] '
<ROOT>
		<TYPE>04_DSB-HKMA-section-I-DSB-details-FX</TYPE>
		<FrEffdate>2020/07/01</FrEffdate>
		<ToEffdate>2021/01/01</ToEffdate>
</ROOT>' 

DECLARE @pRtnXML XML
EXEC [sp_Rpt_HKMA_Half_Year_Survey_PBD] '
<ROOT>
		<TYPE>05_DSB-HKMA-section-I-DSB-summary</TYPE>
		<FrEffdate>2020/07/01</FrEffdate>
		<ToEffdate>2021/01/01</ToEffdate>
</ROOT>' 

DECLARE @pRtnXML XML
EXEC [sp_Rpt_HKMA_Half_Year_Survey_PBD] '
<ROOT>
		<TYPE>06_DSB-HKMA-section-III-part1-DSB-details</TYPE>
		<DATETO>2021/01/01</DATETO>
</ROOT>' 

DECLARE @pRtnXML XML
EXEC [sp_Rpt_HKMA_Half_Year_Survey_PBD] '
<ROOT>
		<TYPE>07_DSB-HKMA-section-III-part1-DSB-details-CVM</TYPE>
		<DATETO>2021/01/01</DATETO>
</ROOT>' 

DECLARE @pRtnXML XML
EXEC [sp_Rpt_HKMA_Half_Year_Survey_PBD] '
<ROOT>
		<TYPE>08_DSB-HKMA-section-III-part1-DSB-summary</TYPE>
		<DATETO>2021/01/01</DATETO>
</ROOT>' 

DECLARE @pRtnXML XML
EXEC [sp_Rpt_HKMA_Half_Year_Survey_PBD] '
<ROOT>
		<TYPE>09_DSB-HKMA-section-III-part2-DSB-details</TYPE>
		<DATETO>2021/01/01</DATETO>
</ROOT>' 

DECLARE @pRtnXML XML
EXEC [sp_Rpt_HKMA_Half_Year_Survey_PBD] '
<ROOT>
		<TYPE>10_DSB-HKMA-section-III-part2-DSB-details-CVM</TYPE>
		<DATETO>2021/01/01</DATETO>
</ROOT>' 

DECLARE @pRtnXML XML
EXEC [sp_Rpt_HKMA_Half_Year_Survey_PBD] '
<ROOT>
		<TYPE>11_DSB-HKMA-section-III-part2-DSB-details-CVM-new-fields</TYPE>
		<DATETO>2021/01/01</DATETO>
</ROOT>' 
 
DECLARE @pRtnXML XML
EXEC [sp_Rpt_HKMA_Half_Year_Survey_PBD] '
<ROOT>
		<TYPE>12_DSB-HKMA-section-III-part2-DSB-summary</TYPE>
		<DATETO>2021/01/01</DATETO>
</ROOT>' 
*/
BEGIN
	DECLARE @TYPE NVARCHAR(200)
	DECLARE @sYMD_para1 NVARCHAR(8)
	DECLARE @sYMD_para2 NVARCHAR(8)
	DECLARE @sDATETO	VARCHAR(10)
	DECLARE @sFrEffdate NVARCHAR(10)
	DECLARE @sToEffdate NVARCHAR(10)
	DECLARE @dtFrEffdate DATETIME
	DECLARE @dtToEffdate DATETIME
	DECLARE @dtDATETO DATETIME

	SELECT 
		@TYPE			= T.C.value('TYPE[1]', 'NVARCHAR(200)'),
		@sYMD_para1			= T.C.value('YMD_para1[1]', 'NVARCHAR(8)'),
		@sYMD_para2			= T.C.value('YMD_para2[1]', 'NVARCHAR(8)'),
		@sDATETO			= T.C.value('DATETO[1]', 'NVARCHAR(10)'),
		@sFrEffdate			= T.C.value('FrEffdate[1]', 'NVARCHAR(10)'),
		@sToEffdate			= T.C.value('ToEffdate[1]', 'NVARCHAR(10)')
		FROM @pXML.nodes('/ROOT') T(C)

	IF (@sFrEffdate IS NOT NULL)
	BEGIN
		SET @dtFrEffdate = (SELECT CONVERT(DATETIME,@sFrEffdate))
	END
	IF (@sToEffdate IS NOT NULL)
	BEGIN
		SET @dtToEffdate = (SELECT CONVERT(DATETIME,@sToEffdate))
	END
	IF (@sDATETO IS NOT NULL)
	BEGIN
		SET @dtDATETO = (SELECT CONVERT(DATETIME,@sDATETO))
	END
  
  IF (@dtDATETO IS NULL AND @dtFrEffdate IS NULL AND @dtToEffdate IS NULL)
  BEGIN
	  IF (MONTH(GETDATE())<=6)
	  BEGIN
		SET	@dtDATETO = CONVERT(DATETIME, CONVERT(NVARCHAR,YEAR(GETDATE())) + '/01/01')
	  END
	  ELSE
	  BEGIN
		SET	@dtDATETO = CONVERT(DATETIME, CONVERT(NVARCHAR,YEAR(GETDATE())) + '/07/01')
	  END
	  SET @dtFrEffdate = DATEADD(MONTH,-6,@dtDATETO)
	  SET @dtToEffdate = @dtDATETO
  END

	IF OBJECT_ID('tempdb..#tmp_mxpricetb') IS NOT NULL DROP TABLE #tmp_mxpricetb
	select	fp.fundkey, fp.navprice 
	INTO #tmp_mxpricetb
		from	HITRUST..mxpricetb fp  WITH (NOLOCK)
		inner	join
		(
			select	fundkey, max(pricedate) as maxpricedate
			from	HITRUST..mxpricetb  WITH (NOLOCK)
			where	deleted = 0 and pricedate < @dtDATETO																	--<<<<<<<<<<<<<<<<<<<<<		DATE_CHANGE
			group
			by	fundkey
		)	mp
		on	mp.fundkey = fp.fundkey and mp.maxpricedate = fp.pricedate

	IF OBJECT_ID('tempdb..#tmp_mxaccbalmovetb') IS NOT NULL DROP TABLE #tmp_mxaccbalmovetb
	select acctkey, max(effdate) as lasteffdate, sum(isnull(confirmedmovement,0)) as bal
	INTO #tmp_mxaccbalmovetb
		from	HITRUST..mxaccbalmovetb
		where	effdate < @dtDATETO																				--<<<<<<<<<<<<<<<<<<<<<		DATE_CHANGE
		group by acctkey 
		having sum(isnull(confirmedmovement,0)) > 0

	IF OBJECT_ID('tempdb..#ENTITY_PORTFOLIO_TB') IS NOT NULL DROP TABLE #ENTITY_PORTFOLIO_TB
	SELECT		PORTFOLIOKEY=0, ENTITY=REPLICATE('A',50), OWNER=0
	INTO		#ENTITY_PORTFOLIO_TB

	TRUNCATE TABLE	#ENTITY_PORTFOLIO_TB

	INSERT INTO	#ENTITY_PORTFOLIO_TB
	EXEC HITRUST..SP_ENTITY

	IF OBJECT_ID('tempdb..#tmp_mxuserdefinedfieldtb') IS NOT NULL DROP TABLE #tmp_mxuserdefinedfieldtb
	select	LD2.DESCRIPTION AS PRODTYPE, UDF.XREFKEY AS FUNDKEY , UDF.CHARFIELD 
	INTO #tmp_mxuserdefinedfieldtb
		FROM	hitrust..mxuserdefinedfieldtb udf WITH (NOLOCK) 
		left join hitrust..mxuserdefinedfieldtypetb udft WITH (NOLOCK) on udft.userdefinedfieldtypekey = udf.userdefinedfieldtypekey and udft.deleted = 0
		left join hitrust..mxlangdesctb ld2 WITH (NOLOCK) on ld2.desckey = udft.descid
		WHERE	udf.deleted = 0 and udf.xrefkeytype = 4
		AND	LD2.DESCRIPTION LIKE 'WMS-%'

	IF (@TYPE= '01_HKMA-fxrates')
	BEGIN
		PRINT ''
		/*
USE BPSS

DROP TABLE FX

CREATE TABLE [DBO].[FX] (
        [CCY] [VARCHAR] (50) NULL ,
        [RATE] [DECIMAL] (20,6) NULL
) ON [PRIMARY]
GO
TRUNCATE TABLE FX
INSERT INTO FX VALUES ('ATS', 0.611624)
		*/
	END
	IF (@TYPE= '02_DSB-HKMA-section-I-DSB-details')
	BEGIN
		select	--distinct
			case f.companykey
			when 1 then '6'
			when 2 then '3'
			end as BankCode
			,left(c.ctractno,12) as Ctract_No
			,left(replace(R.SSNO,'-',space(7)),100) as All_Owners_ID
			,left(p.portfoliono,12) as Port_No
			,'"' + left(p.portfolioname,50) + '"' as Port_Name
			,left(ag.agentname,10) as Agent
			,convert(char(10),c.effdate,111) as Eff_Date
			,convert(char(10),c.orderdate,111) as Order_Date
			,uc.classcode
			,f.fundcode
			,'"' + fn.description + '"' as fundname_eng
			,left(csd.description,20) as Order_Status
			, convert(decimal(10,2),isnull(c.nounit,0)) as Notional_Amt
			, c.reference
			, c.ssref
			,std.description
			,convert(decimal(12,6),isnull(c.price,0)) as Price
			,left(sa.acno,20) as Settle_AC
			,convert(decimal(12,2),isnull(tf.net,0)) as Settle_Amt_HKD
			,
			case
			when uc.classcode not like '1%' then 'Unit Trusts'
			when prodtype = 'WMS-PRODTYPE-BONDS' then 'Debt Securities'
			when prodtype = 'WMS-PRODTYPE-NOTES-AST-LNK' then 'Others'
			when prodtype = 'WMS-PRODTYPE-NOTES-CRD-LNK' then 'Credit-Linked'
			when prodtype = 'WMS-PRODTYPE-NOTES-EQT-LNK' then 'Equity-Linked'
			when prodtype = 'WMS-PRODTYPE-ELI' then 'Equity-Linked'		--KC20120410
			when prodtype = 'WMS-PRODTYPE-NOTES-PCP-PRO' then 'Others'
			when f.fundcode = 'LMN0034' then 'Others'
			when uc.classcode = '1B' then 'Debt Securities'
			when prodtype is null then 'null'
			end as ProductType
		from	HITRUST..mxctracttb c WITH (NOLOCK)
		inner
		join	HITRUST..mxctstatustb cs WITH (NOLOCK) on cs.ctstatuskey = c.ctstatuskey
		inner
		join	HITRUST..mxlangdesctb csd WITH (NOLOCK) on csd.desckey = cs.descid
		inner
		join	HITRUST..mxaccounttb a WITH (NOLOCK) on c.acctkey = a.acctkey
		inner
		join	HITRUST..mxunitclasstb uc WITH (NOLOCK) on uc.unitclasskey = a.unitclasskey and uc.deleted = 0
		inner
		join	HITRUST..mxfundtb f WITH (NOLOCK) on uc.fundkey = f.fundkey AND FUNDCODE NOT LIKE '%DUMMY%'
		inner
		join	HITRUST..mxlangdesctb fn WITH (NOLOCK) on fn.desckey = f.descid
		inner
		join	HITRUST..mxcurrencytb ccy WITH (NOLOCK) on ccy.currencykey = c.dealccy
		inner
		join	HITRUST..mxportfoliotb p WITH (NOLOCK) on a.portfoliokey = p.portfoliokey
		inner
		join	bpss..tb_restricted_txns_all_IDs R WITH (NOLOCK) on R.portkey = p.portfoliokey
		inner
		join	HITRUST..mxprofiletb u WITH (NOLOCK) on u.profilekey = p.profilekey
		inner
		join	HITRUST..mxcommsplittb cm WITH (NOLOCK) on cm.ctractkey = c.ctractkey and commpercent = 100
		inner
		join	HITRUST..mxagenttb ag WITH (NOLOCK) on ag.agentkey = cm.agentkey
		inner
		join	HITRUST..mxsettlesplittb split WITH (NOLOCK) on split.transactionkey = c.ctractkey
		inner
		join	HITRUST..mxsettleactb sa WITH (NOLOCK) on sa.settleackey = split.settlekey
		inner
		join	HITRUST..mxtranfinstb tf WITH (NOLOCK) on tf.transactionkey = c.ctractkey and tf.currencykey = 1
		left
		join	HITRUST..mxctractsubtypetb st WITH (NOLOCK) on c.ctractsubtype = st.ctractsubtypekey
		left
		join	HITRUST..mxlangdesctb std WITH (NOLOCK) on std.desckey = st.descid
		LEFT
		JOIN	(select	LD2.DESCRIPTION AS PRODTYPE, UDF.XREFKEY AS FUNDKEY , UDF.CHARFIELD
			FROM	hitrust..mxuserdefinedfieldtb udf  WITH (NOLOCK)
			left join hitrust..mxuserdefinedfieldtypetb udft WITH (NOLOCK) on udft.userdefinedfieldtypekey = udf.userdefinedfieldtypekey and udft.deleted = 0
			left join hitrust..mxlangdesctb ld2 WITH (NOLOCK) on ld2.desckey = udft.descid

			WHERE	udf.deleted = 0 and udf.xrefkeytype = 4
			AND	LD2.DESCRIPTION LIKE 'WMS-%') PT ON PT.FUNDKEY = F.FUNDKEY
		where	substring (p.portfoliono, 9, 1) NOT IN ('0','1', '3', '4', '6', '9') -- PB Customers
		and f.companykey = 1 
		and csd.description in ('Priced', 'Settled/Registered')
		and	trancodekey in ( 'BaSales','WrSales','BaSwitchIn')
		and	(c.orderdate >= @dtFrEffdate or c.effdate >= @dtFrEffdate)								--<<<<<<<<<<<<<<<<<<<<<		DATE_CHANGE
		and	(c.orderdate < @dtToEffdate and c.effdate < @dtToEffdate)										--<<<<<<<<<<<<<<<<<<<<<		DATE_CHANGE
		-- and	ag.agentname not like '07%'
		and	(std.description is null or std.description <> 'TFRIN Transfer In')
		and	(reference is null or reference <> 'conversion in')
		and	(reference is null or reference <> 'adjustment')	--KC20120111
		--and	c.reference <> "adjustment"		--KC20110712
		and	left(c.ctractno, 3) <> 'RED'	--KC20120410
		and	u.relno not in ('UT029312', 'UN001862')		--KC20120410
	END
	IF (@TYPE= '03_DSB-HKMA-section-I-DSB-details-COMM')
	BEGIN
		-- INSERT INTO ##TMP_OUTPUT
		select	--distinct
			case f.companykey
			when 1 then '6'
			when 2 then '3'
			end as BankCode
			,left(c.ctractno,12) as Ctract_No
			,tf.COMMISSION as COMM
			,left(replace(R.SSNO,'-',space(7)),100) as All_Owners_ID
			,left(p.portfoliono,12) as Port_No
			,'"' + left(p.portfolioname,50) + '"' as Port_Name
			,left(ag.agentname,10) as Agent
			,convert(char(10),c.effdate,111) as Eff_Date
			,convert(char(10),c.orderdate,111) as Order_Date
			,uc.classcode
			,f.fundcode
			,'"' + fn.description + '"' as fundname_eng
			,left(csd.description,20) as Order_Status
			, convert(decimal(10,2),isnull(c.nounit,0)) as Notional_Amt
			, c.reference
			, c.ssref
			,std.description
			,convert(decimal(12,6),isnull(c.price,0)) as Price
			,left(sa.acno,20) as Settle_AC
			,convert(decimal(12,2),isnull(tf.net,0)) as Settle_Amt_HKD
			,
			case
			when uc.classcode not like '1%' then 'Unit Trusts'
			when prodtype = 'WMS-PRODTYPE-BONDS' then 'Debt Securities'
			when prodtype = 'WMS-PRODTYPE-NOTES-AST-LNK' then 'Others'
			when prodtype = 'WMS-PRODTYPE-NOTES-CRD-LNK' then 'Credit-Linked'
			when prodtype = 'WMS-PRODTYPE-NOTES-EQT-LNK' then 'Equity-Linked'
			when prodtype = 'WMS-PRODTYPE-ELI' then 'Equity-Linked'		--KC20120410
			when prodtype = 'WMS-PRODTYPE-NOTES-PCP-PRO' then 'Others'
			when f.fundcode = 'LMN0034' then 'Others'
			when uc.classcode = '1B' then 'Debt Securities'
			when prodtype is null then 'null'
			end as ProductType
		from	HITRUST..mxctracttb c  WITH (NOLOCK)
		inner
		join	HITRUST..mxctstatustb cs  WITH (NOLOCK) on cs.ctstatuskey = c.ctstatuskey
		inner
		join	HITRUST..mxlangdesctb csd  WITH (NOLOCK) on csd.desckey = cs.descid
		inner
		join	HITRUST..mxaccounttb a  WITH (NOLOCK) on c.acctkey = a.acctkey
		inner
		join	HITRUST..mxunitclasstb uc  WITH (NOLOCK) on uc.unitclasskey = a.unitclasskey and uc.deleted = 0
		inner
		join	HITRUST..mxfundtb f  WITH (NOLOCK) on uc.fundkey = f.fundkey AND FUNDCODE NOT LIKE '%DUMMY%'
		inner
		join	HITRUST..mxlangdesctb fn  WITH (NOLOCK) on fn.desckey = f.descid
		inner
		join	HITRUST..mxcurrencytb ccy  WITH (NOLOCK) on ccy.currencykey = c.dealccy
		inner
		join	HITRUST..mxportfoliotb p  WITH (NOLOCK) on a.portfoliokey = p.portfoliokey
		inner
		join	bpss..tb_restricted_txns_all_IDs R  WITH (NOLOCK) on R.portkey = p.portfoliokey
		inner
		join	HITRUST..mxprofiletb u  WITH (NOLOCK) on u.profilekey = p.profilekey
		inner
		join	HITRUST..mxcommsplittb cm  WITH (NOLOCK) on cm.ctractkey = c.ctractkey and commpercent = 100
		inner
		join	HITRUST..mxagenttb ag  WITH (NOLOCK) on ag.agentkey = cm.agentkey
		inner
		join	HITRUST..mxsettlesplittb split  WITH (NOLOCK) on split.transactionkey = c.ctractkey
		inner
		join	HITRUST..mxsettleactb sa  WITH (NOLOCK) on sa.settleackey = split.settlekey
		inner
		join	HITRUST..mxtranfinstb tf  WITH (NOLOCK) on tf.transactionkey = c.ctractkey and tf.currencykey = 1
		left
		join	HITRUST..mxctractsubtypetb st  WITH (NOLOCK) on c.ctractsubtype = st.ctractsubtypekey
		left
		join	HITRUST..mxlangdesctb std WITH (NOLOCK) on std.desckey = st.descid
		LEFT
		JOIN	(select	LD2.DESCRIPTION AS PRODTYPE, UDF.XREFKEY AS FUNDKEY , UDF.CHARFIELD
			FROM	hitrust..mxuserdefinedfieldtb udf  WITH (NOLOCK)
			left join hitrust..mxuserdefinedfieldtypetb udft WITH (NOLOCK) on udft.userdefinedfieldtypekey = udf.userdefinedfieldtypekey and udft.deleted = 0
			left join hitrust..mxlangdesctb ld2 WITH (NOLOCK) on ld2.desckey = udft.descid

			WHERE	udf.deleted = 0 and udf.xrefkeytype = 4
			AND	LD2.DESCRIPTION LIKE 'WMS-%') PT ON PT.FUNDKEY = F.FUNDKEY
		where	substring (p.portfoliono, 9, 1) NOT IN ('0','1', '3', '4', '6', '9') -- PB Customers
		and f.companykey = 1 
		and csd.description in ('Priced', 'Settled/Registered')
		and	trancodekey in ( 'BaSales','WrSales','BaSwitchIn')
		and	(c.orderdate >= @dtFrEffdate or c.effdate >= @dtFrEffdate)										--<<<<<<<<<<<<<<<<<<<<< 	DATE_CHANGE
		and	(c.orderdate < @dtToEffdate and c.effdate < @dtToEffdate)												--<<<<<<<<<<<<<<<<<<<<<		DATE_CHANGE
		-- and	ag.agentname not like '07%'
		and	(std.description is null or std.description <> 'TFRIN Transfer In')
		and	(reference is null or reference <> 'conversion in')
		and	(reference is null or reference <> 'adjustment')	--KC20120111
		--and	c.reference <> "adjustment"		--KC20110712
		and	left(c.ctractno, 3) <> 'RED'	--KC20120410
		and	u.relno not in ('UT029312', 'UN001862')		--KC20120410
 
	END
	IF (@TYPE= '04_DSB-HKMA-section-I-DSB-details-FX')
	BEGIN
		select	--distinct
			case f.companykey
			when 1 then '6'
			when 2 then '3'
			end as BankCode
			,left(c.ctractno,12) as Ctract_No
			,left(replace(R.SSNO,'-',space(7)),100) as All_Owners_ID
			,left(p.portfoliono,12) as Port_No
			,'"' + left(p.portfolioname,50) + '"' as Port_Name
			,left(ag.agentname,10) as Agent
			,convert(char(10),c.effdate,111) as Eff_Date
			,convert(char(10),c.orderdate,111) as Order_Date
			,uc.classcode
			,f.fundcode
			,'"' + fn.description + '"' as fundname_eng
			,left(csd.description,20) as Order_Status
			, convert(decimal(10,2),isnull(c.nounit,0)) as Notional_Amt
			, c.reference
			, c.ssref
			,std.description
			,convert(decimal(12,6),isnull(c.price,0)) as Price
			,left(sa.acno,20) as Settle_AC
			,convert(decimal(12,2),isnull(tf.net,0)) as Settle_Amt_HKD
			,convert(decimal(12,2),isnull(tfx.net,0)) as Settle_Amt
	
			,
			case
			when uc.classcode not like '1%' then 'Unit Trusts'
			when prodtype = 'WMS-PRODTYPE-BONDS' then 'Debt Securities'
			when prodtype = 'WMS-PRODTYPE-NOTES-AST-LNK' then 'Others'
			when prodtype = 'WMS-PRODTYPE-NOTES-CRD-LNK' then 'Credit-Linked'
			when prodtype = 'WMS-PRODTYPE-NOTES-EQT-LNK' then 'Equity-Linked'
			when prodtype = 'WMS-PRODTYPE-ELI' then 'Equity-Linked'		--KC20120410
			when prodtype = 'WMS-PRODTYPE-NOTES-PCP-PRO' then 'Others'
			when f.fundcode = 'LMN0034' then 'Others'
			when uc.classcode = '1B' then 'Debt Securities'
			when prodtype is null then 'null'
			end as ProductType
		from	HITRUST..mxctracttb c  WITH (NOLOCK)
		inner
		join	HITRUST..mxctstatustb cs WITH (NOLOCK) on cs.ctstatuskey = c.ctstatuskey
		inner
		join	HITRUST..mxlangdesctb csd WITH (NOLOCK) on csd.desckey = cs.descid
		inner
		join	HITRUST..mxaccounttb a WITH (NOLOCK) on c.acctkey = a.acctkey
		inner
		join	HITRUST..mxunitclasstb uc WITH (NOLOCK) on uc.unitclasskey = a.unitclasskey and uc.deleted = 0
		inner
		join	HITRUST..mxfundtb f WITH (NOLOCK) on uc.fundkey = f.fundkey AND FUNDCODE NOT LIKE '%DUMMY%'
		inner
		join	HITRUST..mxlangdesctb fn WITH (NOLOCK) on fn.desckey = f.descid
		inner
		join	HITRUST..mxcurrencytb ccy WITH (NOLOCK) on ccy.currencykey = c.dealccy
		inner
		join	HITRUST..mxportfoliotb p WITH (NOLOCK) on a.portfoliokey = p.portfoliokey
		inner
		join	bpss..tb_restricted_txns_all_IDs R WITH (NOLOCK) on R.portkey = p.portfoliokey
		inner
		join	HITRUST..mxprofiletb u WITH (NOLOCK) on u.profilekey = p.profilekey
		inner
		join	HITRUST..mxcommsplittb cm WITH (NOLOCK) on cm.ctractkey = c.ctractkey and commpercent = 100
		inner
		join	HITRUST..mxagenttb ag WITH (NOLOCK) on ag.agentkey = cm.agentkey
		inner
		join	HITRUST..mxsettlesplittb split WITH (NOLOCK) on split.transactionkey = c.ctractkey
		inner
		join	HITRUST..mxsettleactb sa WITH (NOLOCK) on sa.settleackey = split.settlekey
		inner
		join	HITRUST..mxtranfinstb tf WITH (NOLOCK) on tf.transactionkey = c.ctractkey and tf.currencykey = 1
		left
		join	HITRUST..mxtranfinstb tfx WITH (NOLOCK) on tfx.transactionkey = c.ctractkey and tfx.currencykey = c.dealccy and tfx.currencykey <> 1
		left
		join	HITRUST..mxctractsubtypetb st WITH (NOLOCK) on c.ctractsubtype = st.ctractsubtypekey
		left
		join	HITRUST..mxlangdesctb std WITH (NOLOCK) on std.desckey = st.descid
		--left
		--join	hitrust..mxcountrytb ct on ct.countrykey = CA.country

		LEFT
		JOIN	(select	LD2.DESCRIPTION AS PRODTYPE, UDF.XREFKEY AS FUNDKEY , UDF.CHARFIELD
			FROM	hitrust..mxuserdefinedfieldtb udf  WITH (NOLOCK)
			left join hitrust..mxuserdefinedfieldtypetb udft WITH (NOLOCK) on udft.userdefinedfieldtypekey = udf.userdefinedfieldtypekey and udft.deleted = 0
			left join hitrust..mxlangdesctb ld2 WITH (NOLOCK) on ld2.desckey = udft.descid

			WHERE	udf.deleted = 0 and udf.xrefkeytype = 4
			AND	LD2.DESCRIPTION LIKE 'WMS-%') PT ON PT.FUNDKEY = F.FUNDKEY 
		where	substring (p.portfoliono, 9, 1) NOT IN ('0','1', '3', '4', '6', '9') -- PB Customers
		and f.companykey = 1 
		and csd.description in ('Priced', 'Settled/Registered')
		and	trancodekey in ( 'BaSales','WrSales','BaSwitchIn')
		and	(c.orderdate >= @dtFrEffdate or c.effdate >= @dtFrEffdate)								--<<<<<<<<<<<<<<<<<<<<<		DATE_CHANGE
		and	(c.orderdate < @dtToEffdate and c.effdate < @dtToEffdate)								--<<<<<<<<<<<<<<<<<<<<<		DATE_CHANGE
		-- and	ag.agentname not like '07%'
		and	(std.description is null or std.description <> 'TFRIN Transfer In')
		and	(reference is null or reference <> 'conversion in')
		and	(reference is null or reference <> 'adjustment')	--KC20120111
		--and	c.reference <> "adjustment"		--KC20110712

		and	left(c.ctractno, 3) <> 'RED'	--KC20120410
		and	u.relno not in ('UT029312', 'UN001862')		--KC20120410
	END
	IF (@TYPE= '05_DSB-HKMA-section-I-DSB-summary')
	BEGIN
		IF OBJECT_ID('tempdb..#RESULT') IS NOT NULL DROP TABLE #RESULT
	 
 		select	--distinct
			Settle_Amt_HKD = tf.net
			,
			case
			when uc.classcode not like '1%' then 'Unit Trusts'
			when prodtype = 'WMS-PRODTYPE-BONDS' then 'Debt Securities'
			when prodtype = 'WMS-PRODTYPE-NOTES-AST-LNK' then 'Others'
			when prodtype = 'WMS-PRODTYPE-NOTES-CRD-LNK' then 'Credit-Linked'
			when prodtype = 'WMS-PRODTYPE-NOTES-EQT-LNK' then 'Equity-Linked'
			when prodtype = 'WMS-PRODTYPE-ELI' then 'Equity-Linked'		--KC20120410
			when prodtype = 'WMS-PRODTYPE-NOTES-PCP-PRO' then 'Others'
			when f.fundcode = 'LMN0034' then 'Others'
			when uc.classcode = '1B' then 'Debt Securities'
			when prodtype is null then 'null'
			end as ProductType
		INTO	#RESULT

		from	HITRUST..mxctracttb c WITH (NOLOCK)
		inner
		join	HITRUST..mxctstatustb cs WITH (NOLOCK) on cs.ctstatuskey = c.ctstatuskey
		inner
		join	HITRUST..mxlangdesctb csd WITH (NOLOCK) on csd.desckey = cs.descid
		inner
		join	HITRUST..mxaccounttb a WITH (NOLOCK) on c.acctkey = a.acctkey
		inner
		join	HITRUST..mxunitclasstb uc WITH (NOLOCK) on uc.unitclasskey = a.unitclasskey and uc.deleted = 0
		inner
		join	HITRUST..mxfundtb f WITH (NOLOCK) on uc.fundkey = f.fundkey AND FUNDCODE NOT LIKE '%DUMMY%'
		inner
		join	HITRUST..mxlangdesctb fn WITH (NOLOCK) on fn.desckey = f.descid
		inner
		join	HITRUST..mxcurrencytb ccy WITH (NOLOCK) on ccy.currencykey = c.dealccy
		inner
		join	HITRUST..mxportfoliotb p WITH (NOLOCK) on a.portfoliokey = p.portfoliokey
		inner
		join	bpss..tb_restricted_txns_all_IDs R WITH (NOLOCK) on R.portkey = p.portfoliokey
		inner
		join	HITRUST..mxprofiletb u WITH (NOLOCK) on u.profilekey = p.profilekey
		inner
		join	HITRUST..mxcommsplittb cm  WITH (NOLOCK) on cm.ctractkey = c.ctractkey and commpercent = 100
		inner
		join	HITRUST..mxagenttb ag WITH (NOLOCK) on ag.agentkey = cm.agentkey
		inner
		join	HITRUST..mxsettlesplittb split WITH (NOLOCK) on split.transactionkey = c.ctractkey
		inner
		join	HITRUST..mxsettleactb sa WITH (NOLOCK) on sa.settleackey = split.settlekey
		inner
		join	HITRUST..mxtranfinstb tf WITH (NOLOCK) on tf.transactionkey = c.ctractkey and tf.currencykey = 1
		left
		join	HITRUST..mxctractsubtypetb st WITH (NOLOCK) on c.ctractsubtype = st.ctractsubtypekey
		left
		join	HITRUST..mxlangdesctb std WITH (NOLOCK) on std.desckey = st.descid
		LEFT
		JOIN	(select	LD2.DESCRIPTION AS PRODTYPE, UDF.XREFKEY AS FUNDKEY , UDF.CHARFIELD
			FROM	hitrust..mxuserdefinedfieldtb udf  WITH (NOLOCK)
			left join hitrust..mxuserdefinedfieldtypetb udft WITH (NOLOCK) on udft.userdefinedfieldtypekey = udf.userdefinedfieldtypekey and udft.deleted = 0
			left join hitrust..mxlangdesctb ld2 WITH (NOLOCK) on ld2.desckey = udft.descid

			WHERE	udf.deleted = 0 and udf.xrefkeytype = 4
			AND	LD2.DESCRIPTION LIKE 'WMS-%') PT ON PT.FUNDKEY = F.FUNDKEY
		where	substring (p.portfoliono, 9, 1) NOT IN ('0','1', '3', '4', '6', '9') -- PB Customers
		and f.companykey = 1 
		and csd.description in ('Priced', 'Settled/Registered')
		and	trancodekey in ( 'BaSales','WrSales','BaSwitchIn')
		and	(c.orderdate >= @dtFrEffdate or c.effdate >= @dtFrEffdate)								--<<<<<<<<<<<<<<<<<<<<<		DATE_CHANGE
		and	(c.orderdate < @dtToEffdate and c.effdate < @dtToEffdate)										--<<<<<<<<<<<<<<<<<<<<<		DATE_CHANGE
		-- and	ag.agentname not like '07%'
		and	(std.description is null or std.description <> 'TFRIN Transfer In')
		and	(reference is null or reference <> 'conversion in')
		and	(reference is null or reference <> 'adjustment')	--KC20120111
		--and	c.reference <> "adjustment"		--KC20110712
		and	left(c.ctractno, 3) <> 'RED'	--KC20120410
		and	u.relno not in ('UT029312', 'UN001862')		--KC20120410

		SELECT		Settle_Amt_HKD_SUM = 	SUM(Settle_Amt_HKD)
				,[Mutual funds/UT]=	RTRIM(CASE WHEN ProductType='Unit Trusts' THEN CAST(COUNT(*) AS CHAR) ELSE '' END)
				,[Credit-linked]=	RTRIM(CASE WHEN ProductType='Credit-Linked' THEN CAST(COUNT(*) AS CHAR) ELSE '' END)
				,[Equity-linked]=	RTRIM(CASE WHEN ProductType='Equity-Linked' THEN CAST(COUNT(*) AS CHAR) ELSE '' END)
				,[Equity (ac/de)cumulators] = ''
				,[Interest rate-linked] = ''
				,[Debt securities]=	RTRIM(CASE WHEN ProductType='Debt Securities' THEN CAST(COUNT(*) AS CHAR) ELSE '' END)
				,[Others]=		RTRIM(CASE WHEN ProductType='Others' THEN CAST(COUNT(*) AS CHAR) ELSE '' END)
				,[Exception]=		RTRIM(CASE WHEN ProductType='NULL' THEN CAST(COUNT(*) AS CHAR) ELSE '' END)
		FROM		#RESULT
		GROUP BY	ProductType
	END
	IF (@TYPE= '06_DSB-HKMA-section-III-part1-DSB-details')
	BEGIN
		select	distinct
			case
			when uc.classcode not like '1%' then 'Unit Trusts'
			when prodtype = 'WMS-PRODTYPE-BONDS' then 'Debt Securities'
			when prodtype = 'WMS-PRODTYPE-NOTES-AST-LNK' then 'Others'
			when prodtype = 'WMS-PRODTYPE-NOTES-CRD-LNK' then 'Credit-Linked'
			when prodtype = 'WMS-PRODTYPE-NOTES-EQT-LNK' then 'Equity-Linked'
			when prodtype = 'WMS-PRODTYPE-ELI' then 'Equity-Linked'		--KC20120410
			when prodtype = 'WMS-PRODTYPE-NOTES-PCP-PRO' then 'Others'
			when f.fundcode = 'LMN0034' then 'Others'
			when uc.classcode = '1B' then 'Debt Securities'
			when prodtype is null then 'null'
			end as ProductType
	 
			,#ENTITY_PORTFOLIO_TB.ENTITY
	 
			,HKDamt = round(sum(fx.rate * bal * pp.navprice),0) 
		from	HITRUST..mxaccounttb a  WITH (NOLOCK)
		inner
		join	#tmp_mxaccbalmovetb ax 
			on a.acctkey = ax.acctkey
		inner
		join	HITRUST..mxportfoliotb p  WITH (NOLOCK) on p.portfoliokey = a.portfoliokey
		inner
		join	HITRUST..mxprofiletb pf WITH (NOLOCK) on pf.profilekey = p.profilekey
		inner
		join	HITRUST..mxprofiletypetb pft WITH (NOLOCK) on pft.profiletypekey = pf.profiletypekey
		--inner
		--join	mxlangdesctb pftd on pftd.desckey = pft.descid and pftd.description <> 'Private Banking'
		inner
		join	HITRUST..mxunitclasstb uc WITH (NOLOCK) on uc.unitclasskey = a.unitclasskey and uc.deleted = 0 and uc.classcode not like '1%'
		inner
		join	HITRUST..mxfundtb f WITH (NOLOCK) on f.fundkey = uc.fundkey and f.companykey = 1 AND FUNDCODE NOT LIKE '%DUMMY%'
		inner
		join	HITRUST..mxlangdesctb fn WITH (NOLOCK) on fn.desckey = f.descid
		inner
		join	HITRUST..mxcurrencytb cc WITH (NOLOCK) on cc.currencykey = f.currency
		--/*
		inner
		join	BPSS..fx fx WITH (NOLOCK) on fx.ccy = cc.currencyiso
		inner
		join
			#tmp_mxpricetb pp WITH (NOLOCK) on pp.fundkey = f.fundkey
		--*/
		LEFT
		JOIN	(select	LD2.DESCRIPTION AS PRODTYPE, UDF.XREFKEY AS FUNDKEY , UDF.CHARFIELD
			FROM	hitrust..mxuserdefinedfieldtb udf  WITH (NOLOCK)
			left join hitrust..mxuserdefinedfieldtypetb udft WITH (NOLOCK) on udft.userdefinedfieldtypekey = udf.userdefinedfieldtypekey and udft.deleted = 0
			left join hitrust..mxlangdesctb ld2 WITH (NOLOCK) on ld2.desckey = udft.descid

			WHERE	udf.deleted = 0 and udf.xrefkeytype = 4
			AND	LD2.DESCRIPTION LIKE 'WMS-%') PT ON PT.FUNDKEY = F.FUNDKEY


		INNER JOIN	#ENTITY_PORTFOLIO_TB
			ON	#ENTITY_PORTFOLIO_TB.PORTFOLIOKEY = P.PORTFOLIOKEY

		where	substring (p.portfoliono, 9, 1) NOT IN ('0','1', '3', '4', '6', '9') -- PB Customers
		and 
		f.fundcode not in
		('LMN0009','LMN0010','LMN0032','LMN0035','LMN0033', 'LMN0034','LMB0001','LMB0002','LMB0003','LMB0004','LMB0005','LMB0006','LMB0007','LMB0009','LMB0010','LMB0011','LMB0012','LMB0014','LMB0015','LMB0016','LMB0017','LMB0018','LMB0019','LMB0020','LMB0021','LMB0022','LMB0023','LMB0024','LMB0025','LMB0026','LMB0027','LMB0028','LMB0029','LMB0030','LMB0031','LMB0032','LMB0033','LMB0034','LMB0035','LMB0036','LMB0037','LMB0038','LMB0039','LMB0040','LMB0041',
		'LMB0042','LMB0043','LMB0044','LMB0045','LMB0046','LMB0047','LMB0048','LMB0049','LMB0050','DAN0002','DAN0003','DAN0004','DAN0005','DAN0010','DAN0011','DAN0012','DAN0013','DAN0022','DAN0023','DAN0024','DAN0025','DAN0026','DAN0027','DAN0028','DAN0029','DAN0030','DAN0031','DAN0032','DAN0033','DAN0034','DAN0035','DAN0036','DAN0037',
		'DAN0038','DAN0039','DAN0040','DAN0041','DAN0042','DAN0043','DAN0044','DAN0045','UBN0015','UBN0016','MSN0003','MSN0004','MSN0005','MSN0006','MSN0007','MSN0008','LMP0006','LMP0007','LMP0008','LMP0009','LMP0010','LMP0011','LMP0012','LMP0013','LMP0014','LMP0015','LMP0016','LMP0017','LMP0018','LMP0019','LMP0020','LMP0021','LMP0022','LMP0023','LMP0025')

		and	pf.relno not in ('UT029312', 'UN001862')		--KC20120410

		group
		by	case
			when uc.classcode not like '1%' then 'Unit Trusts'
			when prodtype = 'WMS-PRODTYPE-BONDS' then 'Debt Securities'
			when prodtype = 'WMS-PRODTYPE-NOTES-AST-LNK' then 'Others'
			when prodtype = 'WMS-PRODTYPE-NOTES-CRD-LNK' then 'Credit-Linked'
			when prodtype = 'WMS-PRODTYPE-NOTES-EQT-LNK' then 'Equity-Linked'
			when prodtype = 'WMS-PRODTYPE-ELI' then 'Equity-Linked'		--KC20120410
			when prodtype = 'WMS-PRODTYPE-NOTES-PCP-PRO' then 'Others'
			when f.fundcode = 'LMN0034' then 'Others'
			when uc.classcode = '1B' then 'Debt Securities'
			when prodtype is null then 'null'
			end
	 
		,#ENTITY_PORTFOLIO_TB.ENTITY
  
	END
	IF (@TYPE= '07_DSB-HKMA-section-III-part1-DSB-details-CVM')
	BEGIN
		select	distinct
			case
			when uc.classcode not like '1%' then 'Unit Trusts'
			when prodtype = 'WMS-PRODTYPE-BONDS' then 'Debt Securities'
			when prodtype = 'WMS-PRODTYPE-NOTES-AST-LNK' then 'Others'
			when prodtype = 'WMS-PRODTYPE-NOTES-CRD-LNK' then 'Credit-Linked'
			when prodtype = 'WMS-PRODTYPE-NOTES-EQT-LNK' then 'Equity-Linked'
			when prodtype = 'WMS-PRODTYPE-ELI' then 'Equity-Linked'		--KC20120410
			when prodtype = 'WMS-PRODTYPE-NOTES-PCP-PRO' then 'Others'
			when f.fundcode = 'LMN0034' then 'Others'
			when uc.classcode = '1B' then 'Debt Securities'
			when prodtype is null then 'null'
			end as ProductType, 
			p.portfoliono,
			#ENTITY_PORTFOLIO_TB.ENTITY,
			cc.currencyiso,
			pp.navprice,
			fx.rate as fxrate, 
			HKDamt = round(fx.rate * bal * pp.navprice,0),
			bal as holdings,
		--	sum(bal) sumbal, 
		--	, count(*) as portcount
			f.fundkey,
			f.fundcode, 
			'"' + fn.description + '"' as prodname
		--	, pftd.description as clienttype
		--	, p.portfoliono, uc.classcode, ax.*, PT.*
		from	HITRUST..mxaccounttb a  WITH (NOLOCK)
		inner
		join #tmp_mxaccbalmovetb ax 
			on a.acctkey = ax.acctkey
		inner
		join	HITRUST..mxportfoliotb p WITH (NOLOCK) on p.portfoliokey = a.portfoliokey
		inner
		join	HITRUST..mxprofiletb pf WITH (NOLOCK) on pf.profilekey = p.profilekey
		inner
		join	HITRUST..mxprofiletypetb pft WITH (NOLOCK) on pft.profiletypekey = pf.profiletypekey
		--inner
		--join	mxlangdesctb pftd on pftd.desckey = pft.descid and pftd.description <> 'Private Banking'
		inner
		join	HITRUST..mxunitclasstb uc WITH (NOLOCK) on uc.unitclasskey = a.unitclasskey and uc.deleted = 0 and uc.classcode not like '1%'
		inner
		join	HITRUST..mxfundtb f WITH (NOLOCK) on f.fundkey = uc.fundkey and f.companykey = 1 AND FUNDCODE NOT LIKE '%DUMMY%'
		inner
		join	HITRUST..mxlangdesctb fn WITH (NOLOCK) on fn.desckey = f.descid
		inner
		join	HITRUST..mxcurrencytb cc WITH (NOLOCK) on cc.currencykey = f.currency
		--/*
		inner
		join	BPSS..fx fx WITH (NOLOCK) on fx.ccy = cc.currencyiso
		inner
		join #tmp_mxpricetb pp on pp.fundkey = f.fundkey
		--*/
		LEFT
		JOIN	(select	LD2.DESCRIPTION AS PRODTYPE, UDF.XREFKEY AS FUNDKEY , UDF.CHARFIELD
			FROM	hitrust..mxuserdefinedfieldtb udf  WITH (NOLOCK)
			left join hitrust..mxuserdefinedfieldtypetb udft WITH (NOLOCK) on udft.userdefinedfieldtypekey = udf.userdefinedfieldtypekey and udft.deleted = 0
			left join hitrust..mxlangdesctb ld2 WITH (NOLOCK) on ld2.desckey = udft.descid

			WHERE	udf.deleted = 0 and udf.xrefkeytype = 4
			AND	LD2.DESCRIPTION LIKE 'WMS-%') PT ON PT.FUNDKEY = F.FUNDKEY

		INNER JOIN	#ENTITY_PORTFOLIO_TB
			ON	#ENTITY_PORTFOLIO_TB.PORTFOLIOKEY = P.PORTFOLIOKEY

		where	substring (p.portfoliono, 9, 1) NOT IN ('0','1', '3', '4', '6', '9') -- PB Customers
		and 
		f.fundcode not in
		('LMN0009','LMN0010','LMN0032','LMN0035','LMN0033', 'LMN0034','LMB0001','LMB0002','LMB0003','LMB0004','LMB0005','LMB0006','LMB0007',
		'LMB0009','LMB0010','LMB0011','LMB0012','LMB0014','LMB0015','LMB0016','LMB0017','LMB0018','LMB0019','LMB0020','LMB0021','LMB0022','LMB0023','LMB0024','LMB0025','LMB0026','LMB0027','LMB0028','LMB0029','LMB0030','LMB0031','LMB0032','LMB0033','LMB0034','LMB0035','LMB0036','LMB0037','LMB0038',
		'LMB0039','LMB0040','LMB0041','LMB0042','LMB0043','LMB0044','LMB0045','LMB0046','LMB0047','LMB0048','LMB0049','LMB0050','DAN0002','DAN0003','DAN0004','DAN0005','DAN0010','DAN0011','DAN0012','DAN0013','DAN0022','DAN0023','DAN0024','DAN0025',
		'DAN0026','DAN0027','DAN0028','DAN0029','DAN0030','DAN0031','DAN0032','DAN0033','DAN0034','DAN0035','DAN0036','DAN0037','DAN0038','DAN0039','DAN0040','DAN0041','DAN0042','DAN0043','DAN0044','DAN0045','UBN0015','UBN0016','MSN0003',
		'MSN0004','MSN0005','MSN0006','MSN0007','MSN0008','LMP0006','LMP0007','LMP0008','LMP0009','LMP0010','LMP0011','LMP0012','LMP0013','LMP0014','LMP0015','LMP0016','LMP0017','LMP0018','LMP0019','LMP0020','LMP0021','LMP0022','LMP0023','LMP0025')
		and	pf.relno not in ('UT029312', 'UN001862')		--KC20120410
		ORDER
		BY	producttype, #ENTITY_PORTFOLIO_TB.ENTITY, p.portfoliono	--,producttype , UC.CLASSCODE, F.FUNDCODE
	END
	IF (@TYPE= '08_DSB-HKMA-section-III-part1-DSB-summary')
	BEGIN
		select	ProductType, count(ENTITY) as ENTITYCount, sum(HKDamt) as HKDamtSum
		from
		(
		select	distinct
			case
			when uc.classcode not like '1%' then 'Unit Trusts'
			when prodtype = 'WMS-PRODTYPE-BONDS' then 'Debt Securities'
			when prodtype = 'WMS-PRODTYPE-NOTES-AST-LNK' then 'Others'
			when prodtype = 'WMS-PRODTYPE-NOTES-CRD-LNK' then 'Credit-Linked'
			when prodtype = 'WMS-PRODTYPE-NOTES-EQT-LNK' then 'Equity-Linked'
			when prodtype = 'WMS-PRODTYPE-ELI' then 'Equity-Linked'		--KC20120410
			when prodtype = 'WMS-PRODTYPE-NOTES-PCP-PRO' then 'Others'
			when f.fundcode = 'LMN0034' then 'Others'
			when uc.classcode = '1B' then 'Debt Securities'
			when prodtype is null then 'null'
			end as ProductType, 
			#ENTITY_PORTFOLIO_TB.ENTITY
			,HKDamt = round(sum(fx.rate * bal * pp.navprice),0)
		from	HITRUST..mxaccounttb a WITH (NOLOCK)
		inner
		join #tmp_mxaccbalmovetb ax 
			on a.acctkey = ax.acctkey
		inner
		join	HITRUST..mxportfoliotb p WITH (NOLOCK) on p.portfoliokey = a.portfoliokey
		inner
		join	HITRUST..mxprofiletb pf WITH (NOLOCK) on pf.profilekey = p.profilekey
		inner
		join	HITRUST..mxprofiletypetb pft WITH (NOLOCK) on pft.profiletypekey = pf.profiletypekey
		--inner
		--join	mxlangdesctb pftd on pftd.desckey = pft.descid and pftd.description <> 'Private Banking'
		inner
		join	HITRUST..mxunitclasstb uc WITH (NOLOCK) on uc.unitclasskey = a.unitclasskey and uc.deleted = 0 and uc.classcode not like '1%'
		inner
		join	HITRUST..mxfundtb f WITH (NOLOCK) on f.fundkey = uc.fundkey and f.companykey = 1 AND FUNDCODE NOT LIKE '%DUMMY%'
		inner
		join	HITRUST..mxlangdesctb fn WITH (NOLOCK) on fn.desckey = f.descid
		inner
		join	HITRUST..mxcurrencytb cc WITH (NOLOCK) on cc.currencykey = f.currency
		--/*
		inner
		join	BPSS..fx fx WITH (NOLOCK) on fx.ccy = cc.currencyiso
		inner
		join
			#tmp_mxpricetb pp WITH (NOLOCK) on pp.fundkey = f.fundkey
		--*/
		LEFT
		JOIN	(select	LD2.DESCRIPTION AS PRODTYPE, UDF.XREFKEY AS FUNDKEY , UDF.CHARFIELD
			FROM	hitrust..mxuserdefinedfieldtb udf  WITH (NOLOCK)
			left join hitrust..mxuserdefinedfieldtypetb udft WITH (NOLOCK) on udft.userdefinedfieldtypekey = udf.userdefinedfieldtypekey and udft.deleted = 0
			left join hitrust..mxlangdesctb ld2 WITH (NOLOCK) on ld2.desckey = udft.descid

			WHERE	udf.deleted = 0 and udf.xrefkeytype = 4
			AND	LD2.DESCRIPTION LIKE 'WMS-%') PT ON PT.FUNDKEY = F.FUNDKEY


		INNER JOIN	#ENTITY_PORTFOLIO_TB
			ON	#ENTITY_PORTFOLIO_TB.PORTFOLIOKEY = P.PORTFOLIOKEY

		where	substring (p.portfoliono, 9, 1) NOT IN ('0','1', '3', '4', '6', '9') -- PB Customers
		and 
		f.fundcode not in
		('LMN0009','LMN0010','LMN0032','LMN0035','LMN0033', 'LMN0034','LMB0001','LMB0002','LMB0003','LMB0004','LMB0005','LMB0006','LMB0007','LMB0009','LMB0010','LMB0011','LMB0012','LMB0014',
		'LMB0015','LMB0016','LMB0017','LMB0018','LMB0019','LMB0020','LMB0021','LMB0022','LMB0023','LMB0024','LMB0025','LMB0026','LMB0027','LMB0028','LMB0029','LMB0030','LMB0031','LMB0032','LMB0033','LMB0034','LMB0035','LMB0036','LMB0037','LMB0038','LMB0039','LMB0040','LMB0041',
		'LMB0042','LMB0043','LMB0044','LMB0045','LMB0046','LMB0047','LMB0048','LMB0049','LMB0050','DAN0002','DAN0003','DAN0004','DAN0005','DAN0010','DAN0011','DAN0012','DAN0013','DAN0022','DAN0023','DAN0024','DAN0025','DAN0026','DAN0027','DAN0028','DAN0029','DAN0030','DAN0031','DAN0032','DAN0033','DAN0034','DAN0035','DAN0036','DAN0037','DAN0038','DAN0039','DAN0040','DAN0041',
		'DAN0042','DAN0043','DAN0044','DAN0045','UBN0015','UBN0016','MSN0003','MSN0004','MSN0005','MSN0006','MSN0007','MSN0008','LMP0006','LMP0007','LMP0008','LMP0009','LMP0010','LMP0011','LMP0012','LMP0013','LMP0014','LMP0015','LMP0016','LMP0017','LMP0018','LMP0019','LMP0020','LMP0021','LMP0022','LMP0023','LMP0025')
		and	pf.relno not in ('UT029312', 'UN001862')		--KC20120410
		group
		by	case
			when uc.classcode not like '1%' then 'Unit Trusts'
			when prodtype = 'WMS-PRODTYPE-BONDS' then 'Debt Securities'
			when prodtype = 'WMS-PRODTYPE-NOTES-AST-LNK' then 'Others'
			when prodtype = 'WMS-PRODTYPE-NOTES-CRD-LNK' then 'Credit-Linked'
			when prodtype = 'WMS-PRODTYPE-NOTES-EQT-LNK' then 'Equity-Linked'
			when prodtype = 'WMS-PRODTYPE-ELI' then 'Equity-Linked'		--KC20120410
			when prodtype = 'WMS-PRODTYPE-NOTES-PCP-PRO' then 'Others'
			when f.fundcode = 'LMN0034' then 'Others'
			when uc.classcode = '1B' then 'Debt Securities'
			when prodtype is null then 'null'
			end
			,#ENTITY_PORTFOLIO_TB.ENTITY
		) x	group by producttype
	END
	IF (@TYPE= '09_DSB-HKMA-section-III-part2-DSB-details')
	BEGIN
		select	distinct
			case
			when uc.classcode not like '1%' then 'Unit Trusts'
			when prodtype = 'WMS-PRODTYPE-BONDS' then 'Debt Securities'
			when prodtype = 'WMS-PRODTYPE-NOTES-AST-LNK' then 'Others'
			when prodtype = 'WMS-PRODTYPE-NOTES-CRD-LNK' then 'Credit-Linked'
			when prodtype = 'WMS-PRODTYPE-NOTES-EQT-LNK' then 'Equity-Linked'
			when prodtype = 'WMS-PRODTYPE-ELI' then 'Equity-Linked'		--KC20120410
			when prodtype = 'WMS-PRODTYPE-NOTES-PCP-PRO' then 'Others'
			when f.fundcode = 'LMN0034' then 'Others'
			when uc.classcode = '1B' then 'Debt Securities'
			when prodtype is null then 'Others'		--KC20110712
			end as ProductType, 
			p.portfoliono,
			#ENTITY_PORTFOLIO_TB.ENTITY
			, sum(convert(decimal(15,2),tfhkd.net)) as TxnAmtHKDold
			, sum(case isnull(std.description, 'nosubtype')
				when 'TFRIN Transfer In' then
					case when c.effdate >= '2010/10/01' AND c.effdate < '2011/01/01' then convert(decimal(15,2),nounit / tfdeal.fxrate)
					else convert(decimal(15,2),tfhkd.net)
					end
				else convert(decimal(15,2),tfhkd.net)
			  end) as TxnAmtHKD
		--	, convert(decimal(12,2),tfdeal.net) as TxnAmtinDealCcy, tfdeal.fxrate as HKDtoDealFx
		--	, std.description as SubTypeDesc
		--	, pftd.description as clienttype
		--	, p.portfoliono, uc.classcode, ax.*, PT.*
		from	HITRUST..mxaccounttb a WITH (NOLOCK)
		inner
		join	#tmp_mxaccbalmovetb ax  WITH (NOLOCK)
			on a.acctkey = ax.acctkey
		inner
		join	HITRUST..mxportfoliotb p WITH (NOLOCK) on p.portfoliokey = a.portfoliokey
		inner
		join	HITRUST..mxprofiletb pf WITH (NOLOCK) on pf.profilekey = p.profilekey
		inner
		join	HITRUST..mxprofiletypetb pft WITH (NOLOCK) on pft.profiletypekey = pf.profiletypekey
		--inner
		--join	mxlangdesctb pftd on pftd.desckey = pft.descid and pftd.description <> 'Private Banking'
		inner
		join	HITRUST..mxunitclasstb uc WITH (NOLOCK) on uc.unitclasskey = a.unitclasskey and uc.deleted = 0 and uc.classcode like '1%'
		inner
		join	HITRUST..mxfundtb f WITH (NOLOCK) on f.fundkey = uc.fundkey and f.companykey = 1 AND FUNDCODE NOT LIKE '%DUMMY%'
		inner
		join	HITRUST..mxlangdesctb fn WITH (NOLOCK) on fn.desckey = f.descid
		inner
		join	HITRUST..mxcurrencytb cc WITH (NOLOCK) on cc.currencykey = f.currency
		--/*
		inner
		join	BPSS..fx fx WITH (NOLOCK) on fx.ccy = cc.currencyiso

		inner
		join	HITRUST..mxctracttb c WITH (NOLOCK) on c.acctkey = a.acctkey and c.effdate < @dtDATETO														--<<<<<<<<<<<<<<<<<<<<<		DATE_CHANGE
		inner join hitrust..mxctstatustb cs WITH (NOLOCK) on c.ctstatuskey = cs.ctstatuskey and c.company = cs.company
		inner join hitrust..mxlangdesctb csd WITH (NOLOCK) on cs.descid = csd.desckey 
			and csd.description in ('priced','settled/registered','executed','upfront settled')
		inner
		join	HITRUST..mxtranfinstb tfhkd WITH (NOLOCK) on tfhkd.transactionkey = c.ctractkey and tfhkd.currencykey = 1
		left
		join	HITRUST..mxtranfinstb tfdeal WITH (NOLOCK) on tfdeal.transactionkey = c.ctractkey and tfdeal.currencykey = c.dealccy


		LEFT JOIN HITRUST..MXCTRACTSUBTYPETB st WITH (NOLOCK) ON
				c.CTRACTSUBTYPE = st.CTRACTSUBTYPEKEY

		LEFT JOIN HITRUST..MXLANGDESCTB std WITH (NOLOCK) ON 
				st.DESCID = std.DESCKEY
		LEFT
		JOIN #tmp_mxuserdefinedfieldtb PT WITH (NOLOCK) ON PT.FUNDKEY = F.FUNDKEY

		INNER JOIN	#ENTITY_PORTFOLIO_TB
			ON	#ENTITY_PORTFOLIO_TB.PORTFOLIOKEY = P.PORTFOLIOKEY
		where	substring (p.portfoliono, 9, 1) NOT IN ('0','1', '3', '4', '6', '9') -- PB Customers
		and 
		f.fundcode not in
		('LMN0009','LMN0010','LMN0032','LMN0035','LMN0033', 'LMN0034',
		'LMB0001','LMB0002','LMB0003','LMB0004','LMB0005','LMB0006',
		'LMB0007','LMB0009','LMB0010','LMB0011','LMB0012','LMB0014',
		'LMB0015','LMB0016','LMB0017','LMB0018','LMB0019','LMB0020',
		'LMB0021','LMB0022','LMB0023','LMB0024','LMB0025','LMB0026',
		'LMB0027','LMB0028','LMB0029','LMB0030','LMB0031','LMB0032',
		'LMB0033','LMB0034','LMB0035','LMB0036','LMB0037','LMB0038',
		'LMB0039','LMB0040','LMB0041','LMB0042','LMB0043','LMB0044',
		'LMB0045','LMB0046','LMB0047','LMB0048','LMB0049','LMB0050',
		'DAN0002','DAN0003','DAN0004','DAN0005','DAN0010','DAN0011',
		'DAN0012','DAN0013','DAN0022','DAN0023','DAN0024','DAN0025',
		'DAN0026','DAN0027','DAN0028','DAN0029','DAN0030','DAN0031',
		'DAN0032','DAN0033','DAN0034','DAN0035','DAN0036','DAN0037',
		'DAN0038','DAN0039','DAN0040','DAN0041','DAN0042','DAN0043',
		'DAN0044','DAN0045','UBN0015','UBN0016','MSN0003','MSN0004',
		'MSN0005','MSN0006','MSN0007','MSN0008','LMP0006','LMP0007',
		'LMP0008','LMP0009','LMP0010','LMP0011','LMP0012','LMP0013',
		'LMP0014','LMP0015','LMP0016','LMP0017','LMP0018','LMP0019',
		'LMP0020','LMP0021','LMP0022','LMP0023','LMP0025')

		and	left(c.ctractno, 3) <> 'RED'	--KC20120410
		and	pf.relno not in ('UT029312', 'UN001862')		--KC20120410

		group
		by	case
			when uc.classcode not like '1%' then 'Unit Trusts'
			when prodtype = 'WMS-PRODTYPE-BONDS' then 'Debt Securities'
			when prodtype = 'WMS-PRODTYPE-NOTES-AST-LNK' then 'Others'
			when prodtype = 'WMS-PRODTYPE-NOTES-CRD-LNK' then 'Credit-Linked'
			when prodtype = 'WMS-PRODTYPE-NOTES-EQT-LNK' then 'Equity-Linked'
			when prodtype = 'WMS-PRODTYPE-ELI' then 'Equity-Linked'		--KC20120410
			when prodtype = 'WMS-PRODTYPE-NOTES-PCP-PRO' then 'Others'
			when f.fundcode = 'LMN0034' then 'Others'
			when uc.classcode = '1B' then 'Debt Securities'
			when prodtype is null then 'Others'		--kc20110712
			end
			, p.portfoliono
			,#ENTITY_PORTFOLIO_TB.ENTITY
	
		ORDER
		BY	producttype, #ENTITY_PORTFOLIO_TB.ENTITY, p.portfoliono 	--,producttype , UC.CLASSCODE, F.FUNDCODE
 
		PRINT ''
	END
	IF (@TYPE= '10_DSB-HKMA-section-III-part2-DSB-details-CVM')
	BEGIN
		select	distinct
			case
			when uc.classcode not like '1%' then 'Unit Trusts'
			when prodtype = 'WMS-PRODTYPE-BONDS' then 'Debt Securities'
			when prodtype = 'WMS-PRODTYPE-NOTES-AST-LNK' then 'Others'
			when prodtype = 'WMS-PRODTYPE-NOTES-CRD-LNK' then 'Credit-Linked'
			when prodtype = 'WMS-PRODTYPE-NOTES-EQT-LNK' then 'Equity-Linked'
			when prodtype = 'WMS-PRODTYPE-ELI' then 'Equity-Linked'		--KC20120410
			when prodtype = 'WMS-PRODTYPE-NOTES-PCP-PRO' then 'Others'
			when f.fundcode = 'LMN0034' then 'Others'
			when uc.classcode = '1B' then 'Debt Securities'
			when prodtype is null then 'Others'		--KC20110712
			end as ProductType, 
			p.portfoliono,
			#ENTITY_PORTFOLIO_TB.ENTITY,
			cc.currencyiso,
			bal as holdings,
			f.fundkey,
			f.fundcode
			, '"'+fn.description+'"' as prodname
			, c.ctractno, c.effdate, csd.description as ctstatus, c.nounit, c.price
			, c.reference	--, c.ssref as IpoApply
			, convert(decimal(15,2),tfhkd.net) as TxnAmtHKDold
			, case isnull(std.description, 'nosubtype')
				when 'TFRIN Transfer In' then
					case when c.effdate >= '2010/10/01' and c.effdate < '2011/01/01' then convert(decimal(15,2),nounit / tfdeal.fxrate)
					else convert(decimal(15,2),tfhkd.net)
					end
				else convert(decimal(15,2),tfhkd.net)
			  end as TxnAmtHKD

			, convert(decimal(15,2),tfdeal.net) as TxnAmtinDealCcyold

			, case isnull(std.description,'nosubtype')
				when 'TFRIN Transfer In' then 
					case when c.effdate >= '2010/10/01' and c.effdate < '2011/01/01' then nounit
					else convert(decimal(15,2),tfdeal.net)
					end
				else convert(decimal(15,2),tfdeal.net)
			  end as TxnAmtinDealCcy

			, tfdeal.fxrate as HKDtoDealFx
			, std.description as SubTypeDesc
		from	HITRUST..mxaccounttb a  WITH (NOLOCK)
		inner
		join	#tmp_mxaccbalmovetb ax 
			on a.acctkey = ax.acctkey
		inner
		join	HITRUST..mxportfoliotb p WITH (NOLOCK) on p.portfoliokey = a.portfoliokey
		inner
		join	HITRUST..mxprofiletb pf WITH (NOLOCK) on pf.profilekey = p.profilekey
		inner
		join	HITRUST..mxprofiletypetb pft WITH (NOLOCK) on pft.profiletypekey = pf.profiletypekey
		--inner
		--join	mxlangdesctb pftd on pftd.desckey = pft.descid and pftd.description <> 'Private Banking'
		inner
		join	HITRUST..mxunitclasstb uc WITH (NOLOCK) on uc.unitclasskey = a.unitclasskey and uc.deleted = 0 and uc.classcode like '1%'
		inner
		join	HITRUST..mxfundtb f WITH (NOLOCK) on f.fundkey = uc.fundkey and f.companykey = 1 AND FUNDCODE NOT LIKE '%DUMMY%'
		inner
		join	HITRUST..mxlangdesctb fn WITH (NOLOCK) on fn.desckey = f.descid
		inner
		join	HITRUST..mxcurrencytb cc WITH (NOLOCK) on cc.currencykey = f.currency
		--/*
		inner
		join	BPSS..fx fx WITH (NOLOCK) on fx.ccy = cc.currencyiso

		inner
		join	HITRUST..mxctracttb c WITH (NOLOCK) on c.acctkey = a.acctkey and c.effdate < @dtDATETO												--<<<<<<<<<<<<<<<<<<<<<		DATE_CHANGE
		inner join hitrust..mxctstatustb cs WITH (NOLOCK) on c.ctstatuskey = cs.ctstatuskey and c.company = cs.company
		inner join hitrust..mxlangdesctb csd WITH (NOLOCK) on cs.descid = csd.desckey 
			and csd.description in ('priced','settled/registered','executed','upfront settled')
		inner
		join	HITRUST..mxtranfinstb tfhkd WITH (NOLOCK) on tfhkd.transactionkey = c.ctractkey and tfhkd.currencykey = 1
		left
		join	HITRUST..mxtranfinstb tfdeal WITH (NOLOCK) on tfdeal.transactionkey = c.ctractkey and tfdeal.currencykey = c.dealccy
		LEFT JOIN HITRUST..MXCTRACTSUBTYPETB st WITH (NOLOCK) ON
				c.CTRACTSUBTYPE = st.CTRACTSUBTYPEKEY

		LEFT JOIN HITRUST..MXLANGDESCTB std WITH (NOLOCK) ON 
				st.DESCID = std.DESCKEY
		LEFT
		JOIN #tmp_mxuserdefinedfieldtb PT ON PT.FUNDKEY = F.FUNDKEY

		INNER JOIN	#ENTITY_PORTFOLIO_TB
			ON	#ENTITY_PORTFOLIO_TB.PORTFOLIOKEY = P.PORTFOLIOKEY
		where	substring (p.portfoliono, 9, 1) NOT IN ('0','1', '3', '4', '6', '9') -- PB Customers
		and 
		f.fundcode not in
		('LMN0009','LMN0010','LMN0032','LMN0035','LMN0033', 'LMN0034',
		'LMB0001','LMB0002','LMB0003','LMB0004','LMB0005','LMB0006',
		'LMB0007','LMB0009','LMB0010','LMB0011','LMB0012','LMB0014',
		'LMB0015','LMB0016','LMB0017','LMB0018','LMB0019','LMB0020',
		'LMB0021','LMB0022','LMB0023','LMB0024','LMB0025','LMB0026',
		'LMB0027','LMB0028','LMB0029','LMB0030','LMB0031','LMB0032',
		'LMB0033','LMB0034','LMB0035','LMB0036','LMB0037','LMB0038',
		'LMB0039','LMB0040','LMB0041','LMB0042','LMB0043','LMB0044',
		'LMB0045','LMB0046','LMB0047','LMB0048','LMB0049','LMB0050',
		'DAN0002','DAN0003','DAN0004','DAN0005','DAN0010','DAN0011',
		'DAN0012','DAN0013','DAN0022','DAN0023','DAN0024','DAN0025',
		'DAN0026','DAN0027','DAN0028','DAN0029','DAN0030','DAN0031',
		'DAN0032','DAN0033','DAN0034','DAN0035','DAN0036','DAN0037',
		'DAN0038','DAN0039','DAN0040','DAN0041','DAN0042','DAN0043',
		'DAN0044','DAN0045','UBN0015','UBN0016','MSN0003','MSN0004',
		'MSN0005','MSN0006','MSN0007','MSN0008','LMP0006','LMP0007',
		'LMP0008','LMP0009','LMP0010','LMP0011','LMP0012','LMP0013',
		'LMP0014','LMP0015','LMP0016','LMP0017','LMP0018','LMP0019',
		'LMP0020','LMP0021','LMP0022','LMP0023','LMP0025')

		and	left(c.ctractno, 3) <> 'RED'	--KC20120410
		and	pf.relno not in ('UT029312', 'UN001862')		--KC20120410
		ORDER
		BY	producttype, #ENTITY_PORTFOLIO_TB.ENTITY, p.portfoliono	--,producttype , UC.CLASSCODE, F.FUNDCODE
		 
	END
	IF (@TYPE= '11_DSB-HKMA-section-III-part2-DSB-details-CVM-new-fields')
	BEGIN
		select	distinct
			case
			when uc.classcode not like '1%' then 'Unit Trusts'
			when prodtype = 'WMS-PRODTYPE-BONDS' then 'Debt Securities'
			when prodtype = 'WMS-PRODTYPE-NOTES-AST-LNK' then 'Others'
			when prodtype = 'WMS-PRODTYPE-NOTES-CRD-LNK' then 'Credit-Linked'
			when prodtype = 'WMS-PRODTYPE-NOTES-EQT-LNK' then 'Equity-Linked'
			when prodtype = 'WMS-PRODTYPE-ELI' then 'Equity-Linked'		--KC20120410
			when prodtype = 'WMS-PRODTYPE-NOTES-PCP-PRO' then 'Others'
			when f.fundcode = 'LMN0034' then 'Others'
			when uc.classcode = '1B' then 'Debt Securities'
			when prodtype is null then 'Others'		--KC20110712
			end as ProductType, 
			p.portfoliono,
			#ENTITY_PORTFOLIO_TB.ENTITY,
			cc.currencyiso,
		--	pp.navprice,
		--	fx.rate as fxrate, 
		--	HKDamt = round(fx.rate * bal * pp.navprice,0),
			bal as holdings,
		--	sum(bal) sumbal, 
		--	, count(*) as portcount
			f.fundkey,
			f.fundcode, '"'+fn.description+'"' as prodname
			, c.ctractno, c.effdate, csd.description as ctstatus, c.nounit, c.price
			, c.reference	--, c.ssref as IpoApply

			, convert(decimal(15,2),tfhkd.net) as TxnAmtHKDold

			, case isnull(std.description, 'nosubtype')
				when 'TFRIN Transfer In' then
					case when c.effdate >= '2010/10/01' and c.effdate < '2011/01/01' then convert(decimal(15,2),nounit / tfdeal.fxrate)
					else convert(decimal(15,2),tfhkd.net)
					end
				else convert(decimal(15,2),tfhkd.net)
			  end as TxnAmtHKD

			, convert(decimal(15,2),tfdeal.net) as TxnAmtinDealCcyold

			, case isnull(std.description,'nosubtype')
				when 'TFRIN Transfer In' then 
					case when c.effdate >= '2010/10/01' and c.effdate < '2011/01/01' then nounit
					else convert(decimal(15,2),tfdeal.net)
					end
				else convert(decimal(15,2),tfdeal.net)
			  end as TxnAmtinDealCcy

			, tfdeal.fxrate as HKDtoDealFx
	
			--KC20121015[
			,left(isnull(ag.agentname,''),10) as AgentCode
			,c.ssref
			,left(isnull(sa.acno,''),20) as Settle_AC
			--KC20121015]
			, std.description as SubTypeDesc
		--	, pftd.description as clienttype
		--	, p.portfoliono, uc.classcode, ax.*, PT.*
		from	HITRUST..mxaccounttb a  WITH (NOLOCK)
		inner
		join #tmp_mxaccbalmovetb ax 
			on a.acctkey = ax.acctkey
		inner
		join	HITRUST..mxportfoliotb p WITH (NOLOCK) on p.portfoliokey = a.portfoliokey
		inner
		join	HITRUST..mxprofiletb pf WITH (NOLOCK) on pf.profilekey = p.profilekey
		inner
		join	HITRUST..mxprofiletypetb pft WITH (NOLOCK) on pft.profiletypekey = pf.profiletypekey
		--inner
		--join	mxlangdesctb pftd on pftd.desckey = pft.descid and pftd.description <> 'Private Banking'
		inner
		join	HITRUST..mxunitclasstb uc WITH (NOLOCK) on uc.unitclasskey = a.unitclasskey and uc.deleted = 0 and uc.classcode like '1%'
		inner
		join	HITRUST..mxfundtb f WITH (NOLOCK) on f.fundkey = uc.fundkey and f.companykey = 1 AND FUNDCODE NOT LIKE '%DUMMY%'
		inner
		join	HITRUST..mxlangdesctb fn WITH (NOLOCK) on fn.desckey = f.descid
		inner
		join	HITRUST..mxcurrencytb cc WITH (NOLOCK) on cc.currencykey = f.currency
		--/*
		inner
		join	BPSS..fx fx WITH (NOLOCK) on fx.ccy = cc.currencyiso

		inner
		join	HITRUST..mxctracttb c WITH (NOLOCK) on c.acctkey = a.acctkey and c.effdate < @dtDATETO										--<<<<<<<<<<<<<<<<<<<<<		DATE_CHANGE
		inner join hitrust..mxctstatustb cs WITH (NOLOCK) on c.ctstatuskey = cs.ctstatuskey and c.company = cs.company
		inner join hitrust..mxlangdesctb csd WITH (NOLOCK) on cs.descid = csd.desckey 
			and csd.description in ('priced','settled/registered','executed','upfront settled')
		inner
		join	HITRUST..mxtranfinstb tfhkd WITH (NOLOCK) on tfhkd.transactionkey = c.ctractkey and tfhkd.currencykey = 1
		left
		join	HITRUST..mxtranfinstb tfdeal WITH (NOLOCK) on tfdeal.transactionkey = c.ctractkey and tfdeal.currencykey = c.dealccy
		LEFT JOIN HITRUST..MXCTRACTSUBTYPETB st WITH (NOLOCK) ON
				c.CTRACTSUBTYPE = st.CTRACTSUBTYPEKEY
		LEFT JOIN HITRUST..MXLANGDESCTB std WITH (NOLOCK) ON 
				st.DESCID = std.DESCKEY
		LEFT
		JOIN #tmp_mxuserdefinedfieldtb PT ON PT.FUNDKEY = F.FUNDKEY

		INNER JOIN	#ENTITY_PORTFOLIO_TB WITH (NOLOCK)
			ON	#ENTITY_PORTFOLIO_TB.PORTFOLIOKEY = P.PORTFOLIOKEY
		left
		join	HITRUST..mxcommsplittb cm WITH (NOLOCK) on cm.ctractkey = c.ctractkey and commpercent = 100
		left
		join	HITRUST..mxagenttb ag WITH (NOLOCK) on ag.agentkey = cm.agentkey

		left
		join	HITRUST..mxsettlesplittb split WITH (NOLOCK) on split.transactionkey = c.ctractkey
		left
		join	HITRUST..mxsettleactb sa WITH (NOLOCK) on sa.settleackey = split.settlekey	
		where	substring (p.portfoliono, 9, 1) NOT IN ('0','1', '3', '4', '6', '9') -- PB Customers
		and 
		f.fundcode not in
		('LMN0009','LMN0010','LMN0032','LMN0035','LMN0033', 'LMN0034',
		'LMB0001','LMB0002','LMB0003','LMB0004','LMB0005','LMB0006',
		'LMB0007','LMB0009','LMB0010','LMB0011','LMB0012','LMB0014',
		'LMB0015','LMB0016','LMB0017','LMB0018','LMB0019','LMB0020',
		'LMB0021','LMB0022','LMB0023','LMB0024','LMB0025','LMB0026',
		'LMB0027','LMB0028','LMB0029','LMB0030','LMB0031','LMB0032',
		'LMB0033','LMB0034','LMB0035','LMB0036','LMB0037','LMB0038',
		'LMB0039','LMB0040','LMB0041','LMB0042','LMB0043','LMB0044',
		'LMB0045','LMB0046','LMB0047','LMB0048','LMB0049','LMB0050',
		'DAN0002','DAN0003','DAN0004','DAN0005','DAN0010','DAN0011',
		'DAN0012','DAN0013','DAN0022','DAN0023','DAN0024','DAN0025',
		'DAN0026','DAN0027','DAN0028','DAN0029','DAN0030','DAN0031',
		'DAN0032','DAN0033','DAN0034','DAN0035','DAN0036','DAN0037',
		'DAN0038','DAN0039','DAN0040','DAN0041','DAN0042','DAN0043',
		'DAN0044','DAN0045','UBN0015','UBN0016','MSN0003','MSN0004',
		'MSN0005','MSN0006','MSN0007','MSN0008','LMP0006','LMP0007',
		'LMP0008','LMP0009','LMP0010','LMP0011','LMP0012','LMP0013',
		'LMP0014','LMP0015','LMP0016','LMP0017','LMP0018','LMP0019',
		'LMP0020','LMP0021','LMP0022','LMP0023','LMP0025')
		and	left(c.ctractno, 3) <> 'RED'	--KC20120410
		and	pf.relno not in ('UT029312', 'UN001862')		--KC20120410
		ORDER
		BY	producttype, #ENTITY_PORTFOLIO_TB.ENTITY, p.portfoliono	--,producttype , UC.CLASSCODE, F.FUNDCODE
		 
	END
	IF (@TYPE= '12_DSB-HKMA-section-III-part2-DSB-summary')
	BEGIN
		select	ProductType, count(ENTITY) as ENTITYCount, sum(TxnAmtHKD) as SumTxnAmtHKD
		from
		(
		select	distinct
			case
			when uc.classcode not like '1%' then 'Unit Trusts'
			when prodtype = 'WMS-PRODTYPE-BONDS' then 'Debt Securities'
			when prodtype = 'WMS-PRODTYPE-NOTES-AST-LNK' then 'Others'
			when prodtype = 'WMS-PRODTYPE-NOTES-CRD-LNK' then 'Credit-Linked'
			when prodtype = 'WMS-PRODTYPE-NOTES-EQT-LNK' then 'Equity-Linked'
			when prodtype = 'WMS-PRODTYPE-ELI' then 'Equity-Linked'		--KC20120410
			when prodtype = 'WMS-PRODTYPE-NOTES-PCP-PRO' then 'Others'
			when f.fundcode = 'LMN0034' then 'Others'
			when uc.classcode = '1B' then 'Debt Securities'
			when prodtype is null then 'Others'		--KC20110712
			end as ProductType, 
			#ENTITY_PORTFOLIO_TB.ENTITY

			, sum(case isnull(std.description, 'nosubtype')
				when 'TFRIN Transfer In' then
					--case when c.effdate >=   '2010/10/01' AND c.effdate < '2011/01/01' then convert(decimal(15,2),nounit / tfdeal.fxrate)
					case when c.effdate >=  '2010/10/01' AND c.effdate < '2011/01/01' then convert(decimal(15,2),nounit / tfdeal.fxrate)
					else convert(decimal(15,2),tfhkd.net)
					end
				else convert(decimal(15,2),tfhkd.net)
				end) as TxnAmtHKD
		from	HITRUST..mxaccounttb a WITH (NOLOCK)
		inner
		join	#tmp_mxaccbalmovetb ax 
			on a.acctkey = ax.acctkey
		inner
		join	HITRUST..mxportfoliotb p WITH (NOLOCK) on p.portfoliokey = a.portfoliokey
		inner
		join	HITRUST..mxprofiletb pf WITH (NOLOCK) on pf.profilekey = p.profilekey
		inner
		join	HITRUST..mxprofiletypetb pft WITH (NOLOCK) on pft.profiletypekey = pf.profiletypekey
		inner
		join	HITRUST..mxunitclasstb uc WITH (NOLOCK) on uc.unitclasskey = a.unitclasskey and uc.deleted = 0 and uc.classcode like '1%'
		inner
		join	HITRUST..mxfundtb f WITH (NOLOCK) on f.fundkey = uc.fundkey and f.companykey = 1 AND FUNDCODE NOT LIKE '%DUMMY%'
		inner
		join	HITRUST..mxlangdesctb fn WITH (NOLOCK) on fn.desckey = f.descid
		inner
		join	HITRUST..mxcurrencytb cc WITH (NOLOCK) on cc.currencykey = f.currency
		inner
		join	BPSS..fx fx WITH (NOLOCK) on fx.ccy = cc.currencyiso
		inner
		join	HITRUST..mxctracttb c WITH (NOLOCK) on c.acctkey = a.acctkey and c.effdate < @dtDATETO												--<<<<<<<<<<<<<<<<<<<<<		DATE_CHANGE
		inner join hitrust..mxctstatustb cs WITH (NOLOCK) on c.ctstatuskey = cs.ctstatuskey and c.company = cs.company
		inner join hitrust..mxlangdesctb csd WITH (NOLOCK) on cs.descid = csd.desckey 
			and csd.description in ('priced','settled/registered','executed','upfront settled')
		inner
		join	HITRUST..mxtranfinstb tfhkd WITH (NOLOCK) on tfhkd.transactionkey = c.ctractkey and tfhkd.currencykey = 1
		left
		join	HITRUST..mxtranfinstb tfdeal WITH (NOLOCK) on tfdeal.transactionkey = c.ctractkey and tfdeal.currencykey = c.dealccy
		LEFT JOIN HITRUST..MXCTRACTSUBTYPETB st WITH (NOLOCK) ON
				c.CTRACTSUBTYPE = st.CTRACTSUBTYPEKEY
		LEFT JOIN HITRUST..MXLANGDESCTB std WITH (NOLOCK) ON 
				st.DESCID = std.DESCKEY
		LEFT
		JOIN	(select	LD2.DESCRIPTION AS PRODTYPE, UDF.XREFKEY AS FUNDKEY , UDF.CHARFIELD
			FROM	hitrust..mxuserdefinedfieldtb udf  WITH (NOLOCK)
			left join hitrust..mxuserdefinedfieldtypetb udft WITH (NOLOCK) on udft.userdefinedfieldtypekey = udf.userdefinedfieldtypekey and udft.deleted = 0
			left join hitrust..mxlangdesctb ld2 WITH (NOLOCK) on ld2.desckey = udft.descid

			WHERE	udf.deleted = 0 and udf.xrefkeytype = 4
			AND	LD2.DESCRIPTION LIKE 'WMS-%') PT ON PT.FUNDKEY = F.FUNDKEY

		INNER JOIN	#ENTITY_PORTFOLIO_TB
			ON	#ENTITY_PORTFOLIO_TB.PORTFOLIOKEY = P.PORTFOLIOKEY
		where	substring (p.portfoliono, 9, 1) NOT IN ('0','1', '3', '4', '6', '9') -- PB Customers
		and 
		f.fundcode not in
		('LMN0009','LMN0010','LMN0032','LMN0035','LMN0033', 'LMN0034',
		'LMB0001','LMB0002','LMB0003','LMB0004','LMB0005','LMB0006',
		'LMB0007','LMB0009','LMB0010','LMB0011','LMB0012','LMB0014',
		'LMB0015','LMB0016','LMB0017','LMB0018','LMB0019','LMB0020',
		'LMB0021','LMB0022','LMB0023','LMB0024','LMB0025','LMB0026',
		'LMB0027','LMB0028','LMB0029','LMB0030','LMB0031','LMB0032',
		'LMB0033','LMB0034','LMB0035','LMB0036','LMB0037','LMB0038',
		'LMB0039','LMB0040','LMB0041','LMB0042','LMB0043','LMB0044',
		'LMB0045','LMB0046','LMB0047','LMB0048','LMB0049','LMB0050',
		'DAN0002','DAN0003','DAN0004','DAN0005','DAN0010','DAN0011',
		'DAN0012','DAN0013','DAN0022','DAN0023','DAN0024','DAN0025',
		'DAN0026','DAN0027','DAN0028','DAN0029','DAN0030','DAN0031',
		'DAN0032','DAN0033','DAN0034','DAN0035','DAN0036','DAN0037',
		'DAN0038','DAN0039','DAN0040','DAN0041','DAN0042','DAN0043',
		'DAN0044','DAN0045','UBN0015','UBN0016','MSN0003','MSN0004',
		'MSN0005','MSN0006','MSN0007','MSN0008','LMP0006','LMP0007',
		'LMP0008','LMP0009','LMP0010','LMP0011','LMP0012','LMP0013',
		'LMP0014','LMP0015','LMP0016','LMP0017','LMP0018','LMP0019',
		'LMP0020','LMP0021','LMP0022','LMP0023','LMP0025')
		and	left(c.ctractno, 3) <> 'RED'	--KC20120410
		and	pf.relno not in ('UT029312', 'UN001862')		--KC20120410
		group
		by	case
			when uc.classcode not like '1%' then 'Unit Trusts'
			when prodtype = 'WMS-PRODTYPE-BONDS' then 'Debt Securities'
			when prodtype = 'WMS-PRODTYPE-NOTES-AST-LNK' then 'Others'
			when prodtype = 'WMS-PRODTYPE-NOTES-CRD-LNK' then 'Credit-Linked'
			when prodtype = 'WMS-PRODTYPE-NOTES-EQT-LNK' then 'Equity-Linked'
			when prodtype = 'WMS-PRODTYPE-ELI' then 'Equity-Linked'		--KC20120410
			when prodtype = 'WMS-PRODTYPE-NOTES-PCP-PRO' then 'Others'
			when f.fundcode = 'LMN0034' then 'Others'
			when uc.classcode = '1B' then 'Debt Securities'
			when prodtype is null then 'Others'		--KC20110712
			end

			,#ENTITY_PORTFOLIO_TB.ENTITY

		) x	group by ProductType
		 
		PRINT ''
	END
END

GO
/****** Object:  StoredProcedure [dbo].[sp_Rpt_HKMA_Quarterly_Survey_Preparation]    Script Date: 5/17/2022 9:57:52 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_Rpt_HKMA_Quarterly_Survey_Preparation]
(
@pXML XML
)
AS
/*
 sqlcmd -s, -W -Q "set nocount on; EXEC Master..sp_Rpt_HKMA_Quarterly_Survey_Preparation @pXML ='<ROOT><TYPE>HIB0007</TYPE></ROOT>'" | findstr /v /c:"-" /b > "C:\temp\20210315\result5.txt"

 DECLARE @pRtnXML XML
EXEC [sp_Rpt_HKMA_Quarterly_Survey_Preparation] '
<ROOT>
		<TYPE>01_HKMA-fxrates</TYPE>
</ROOT>' 


DECLARE @pRtnXML XML
EXEC [sp_Rpt_HKMA_Quarterly_Survey_Preparation] '
<ROOT>
		<TYPE>02_DSB-HKMA-section-I-DSB-details</TYPE>
		<FrEffdate>2020/07/01</FrEffdate>
		<ToEffdate>2021/01/01</ToEffdate>
</ROOT>' 

DECLARE @pRtnXML XML
EXEC [sp_Rpt_HKMA_Quarterly_Survey_Preparation] '
<ROOT>
		<TYPE>03_DSB-HKMA-section-I-DSB-details-COMM</TYPE>
		<FrEffdate>2020/07/01</FrEffdate>
		<ToEffdate>2021/01/01</ToEffdate>
</ROOT>' 

DECLARE @pRtnXML XML
EXEC [sp_Rpt_HKMA_Quarterly_Survey_Preparation] '
<ROOT>
		<TYPE>04_DSB-HKMA-section-I-DSB-details-FX</TYPE>
		<FrEffdate>2020/07/01</FrEffdate>
		<ToEffdate>2021/01/01</ToEffdate>
</ROOT>' 

DECLARE @pRtnXML XML
EXEC [sp_Rpt_HKMA_Quarterly_Survey_Preparation] '
<ROOT>
		<TYPE>05_DSB-HKMA-section-I-DSB-summary</TYPE>
		<FrEffdate>2020/07/01</FrEffdate>
		<ToEffdate>2021/01/01</ToEffdate>
</ROOT>' 

DECLARE @pRtnXML XML
EXEC [sp_Rpt_HKMA_Quarterly_Survey_Preparation] '
<ROOT>
		<TYPE>06_DSB-HKMA-section-III-part1-DSB-details</TYPE>
		<DATETO>2021/01/01</DATETO>
</ROOT>' 

DECLARE @pRtnXML XML
EXEC [sp_Rpt_HKMA_Quarterly_Survey_Preparation] '
<ROOT>
		<TYPE>07_DSB-HKMA-section-III-part1-DSB-details-CVM</TYPE>
		<DATETO>2021/01/01</DATETO>
</ROOT>' 

DECLARE @pRtnXML XML
EXEC [sp_Rpt_HKMA_Quarterly_Survey_Preparation] '
<ROOT>
		<TYPE>08_DSB-HKMA-section-III-part1-DSB-summary</TYPE>
		<DATETO>2021/01/01</DATETO>
</ROOT>' 

DECLARE @pRtnXML XML
EXEC [sp_Rpt_HKMA_Quarterly_Survey_Preparation] '
<ROOT>
		<TYPE>09_DSB-HKMA-section-III-part2-DSB-details</TYPE>
		<DATETO>2021/01/01</DATETO>
</ROOT>' 

DECLARE @pRtnXML XML
EXEC [sp_Rpt_HKMA_Quarterly_Survey_Preparation] '
<ROOT>
		<TYPE>10_DSB-HKMA-section-III-part2-DSB-details-CVM</TYPE>
		<DATETO>2021/01/01</DATETO>
</ROOT>' 

DECLARE @pRtnXML XML
EXEC [sp_Rpt_HKMA_Quarterly_Survey_Preparation] '
<ROOT>
		<TYPE>11_DSB-HKMA-section-III-part2-DSB-details-CVM-new-fields</TYPE>
		<DATETO>2021/01/01</DATETO>
</ROOT>' 
 
DECLARE @pRtnXML XML
EXEC [sp_Rpt_HKMA_Quarterly_Survey_Preparation] '
<ROOT>
		<TYPE>12_DSB-HKMA-section-III-part2-DSB-summary</TYPE>
		<DATETO>2021/01/01</DATETO>
</ROOT>' 
*/
BEGIN
	DECLARE @TYPE NVARCHAR(200)
	DECLARE @sYMD_para1 NVARCHAR(8)
	DECLARE @sYMD_para2 NVARCHAR(8)
	DECLARE @sDATETO	VARCHAR(10)
	DECLARE @sFrEffdate NVARCHAR(10)
	DECLARE @sToEffdate NVARCHAR(10)
	DECLARE @dtFrEffdate DATETIME
	DECLARE @dtToEffdate DATETIME
	DECLARE @dtDATETO DATETIME
	DECLARE @sScript NVARCHAR(MAX)

	SELECT 
		@TYPE			= T.C.value('TYPE[1]', 'NVARCHAR(200)'),
		@sYMD_para1			= T.C.value('YMD_para1[1]', 'NVARCHAR(8)'),
		@sYMD_para2			= T.C.value('YMD_para2[1]', 'NVARCHAR(8)'),
		@sDATETO			= T.C.value('DATETO[1]', 'NVARCHAR(10)'),
		@sFrEffdate			= T.C.value('FrEffdate[1]', 'NVARCHAR(10)'),
		@sToEffdate			= T.C.value('ToEffdate[1]', 'NVARCHAR(10)')
		FROM @pXML.nodes('/ROOT') T(C)

	IF (@sFrEffdate IS NOT NULL)
	BEGIN
		SET @dtFrEffdate = (SELECT CONVERT(DATETIME,@sFrEffdate))
	END
	IF (@sToEffdate IS NOT NULL)
	BEGIN
		SET @dtToEffdate = (SELECT CONVERT(DATETIME,@sToEffdate))
	END
	IF (@sDATETO IS NOT NULL)
	BEGIN
		SET @dtDATETO = (SELECT CONVERT(DATETIME,@sDATETO))
	END

	IF OBJECT_ID('tempdb..#ENTITY_PORTFOLIO_TB') IS NOT NULL DROP TABLE #ENTITY_PORTFOLIO_TB
	IF OBJECT_ID('tempdb..#tmp_mxpricetb') IS NOT NULL DROP TABLE #tmp_mxpricetb

	SELECT		PORTFOLIOKEY=0, ENTITY=REPLICATE('A',50), OWNER=0
	INTO		#ENTITY_PORTFOLIO_TB

	TRUNCATE TABLE	#ENTITY_PORTFOLIO_TB
	INSERT INTO	#ENTITY_PORTFOLIO_TB
	EXEC HITRUST..SP_ENTITY

 	SELECT fundkey, max(pricedate) as maxpricedate
	INTO #tmp_mxpricetb
	FROM HITRUST..mxpricetb  WITH (NOLOCK)
	WHERE deleted = 0 and pricedate <  @dtDATETO															--<<<<<<<<<<<<<<<<<<<<<		DATE_CHANGE
	GROUP BY fundkey
  
  IF (@dtDATETO IS NULL AND @dtFrEffdate IS NULL AND @dtToEffdate IS NULL)
  BEGIN
	  IF (MONTH(GETDATE())<=3)
	  BEGIN
		SET	@dtDATETO = CONVERT(DATETIME, CONVERT(NVARCHAR,YEAR(GETDATE())) + '/01/01')
	  END
	  ELSE IF (MONTH(GETDATE())<=6 AND MONTH(GETDATE()) >3)
	  BEGIN
		SET	@dtDATETO = CONVERT(DATETIME, CONVERT(NVARCHAR,YEAR(GETDATE())) + '/03/01')
	  END
	  ELSE IF (MONTH(GETDATE())<=9 AND MONTH(GETDATE()) >6)
	  BEGIN
		SET	@dtDATETO = CONVERT(DATETIME, CONVERT(NVARCHAR,YEAR(GETDATE())) + '/07/01')
	  END
	  ELSE IF (MONTH(GETDATE())<=12 AND MONTH(GETDATE()) >9)
	  BEGIN
		SET	@dtDATETO = CONVERT(DATETIME, CONVERT(NVARCHAR,YEAR(GETDATE())) + '/10/01')
	  END
	  SET @dtFrEffdate = DATEADD(MONTH,-3,@dtDATETO)
	  SET @dtToEffdate = @dtDATETO
  END

  select @dtFrEffdate,@dtToEffdate

	IF (@TYPE= '01_HKMA-fxrates')
	BEGIN
		SELECT @dtFrEffdate,@dtToEffdate,  CONVERT(NVARCHAR,EOMONTH(DATEADD(DAY,-1,@dtToEffdate)),112)

		/*
		USE [BPSS]

		CREATE TABLE FX_TEMP
		(
			rData NVARCHAR(MAX)
		)

		*/
		SET @sScript = '
		SET QUOTED_IDENTIFIER ON
		truncate table BPSS..FX_TEMP
		truncate table BPSS..FX

		BULK INSERT BPSS..FX_TEMP
		FROM ''\\uatvutdb02\migration\Survey Template\FXZINXR_'+ CONVERT(NVARCHAR,EOMONTH(DATEADD(DAY,-1,@dtToEffdate)),112) +'.TXT''
		WITH (  
		DATAFILETYPE = ''char'',  
		FIELDTERMINATOR = '','',  
		ROWTERMINATOR = ''0x0A'',
		CODEPAGE=''65001'' 
		);  

		INSERT INTO BPSS..FX
		SELECT SUBSTRING(rData,2,3),CONVERT(NUMERIC(14,7),SUBSTRING(rData,34,7))/1000000 FROM BPSS..FX_TEMP WHERE LEFT(rData,1) = ''2''
		'

		EXECUTE (@sScript)
		SELECT * FROM BPSS..FX
	END
	IF (@TYPE= '02_DSB-HKMA-section-I-DSB-details')
	BEGIN
			select	--distinct
				case f.companykey
				when 1 then '6'
				when 2 then '3'
				end as BankCode
				,left(c.ctractno,12) as Ctract_No
				,left(replace(R.SSNO,'-',space(7)),100) as All_Owners_ID
				,left(p.portfoliono,12) as Port_No
				,'"' + left(p.portfolioname,50) + '"' as Port_Name
				,left(ag.agentname,10) as Agent
				,convert(char(10),c.effdate,111) as Eff_Date
				,convert(char(10),c.orderdate,111) as Order_Date
				,uc.classcode
				,f.fundcode
				,'"' + fn.description + '"' as fundname_eng
				,left(csd.description,20) as Order_Status
				, convert(decimal(10,2),isnull(c.nounit,0)) as Notional_Amt
				, c.reference
				, c.ssref
				,std.description
				,convert(decimal(12,6),isnull(c.price,0)) as Price
				,left(sa.acno,20) as Settle_AC
				,convert(decimal(12,2),isnull(tf.net,0)) as Settle_Amt_HKD
				,
				case
				when uc.classcode not like '1%' then 'Unit Trusts'
				when prodtype = 'WMS-PRODTYPE-BONDS' then 'Debt Securities'
				when prodtype = 'WMS-PRODTYPE-NOTES-AST-LNK' then 'Others'
				when prodtype = 'WMS-PRODTYPE-NOTES-CRD-LNK' then 'Credit-Linked'
				when prodtype = 'WMS-PRODTYPE-NOTES-EQT-LNK' then 'Equity-Linked'
				when prodtype = 'WMS-PRODTYPE-ELI' then 'Equity-Linked'		--KC20120410
				when prodtype = 'WMS-PRODTYPE-NOTES-PCP-PRO' then 'Others'
				when f.fundcode = 'LMN0034' then 'Others'
				when uc.classcode = '1B' then 'Debt Securities'
				when prodtype is null then 'null'
				end as ProductType
			from	HITRUST..mxctracttb c
			inner
			join	HITRUST..mxctstatustb cs on cs.ctstatuskey = c.ctstatuskey
			inner
			join	HITRUST..mxlangdesctb csd on csd.desckey = cs.descid
			inner
			join	HITRUST..mxaccounttb a on c.acctkey = a.acctkey
			inner
			join	HITRUST..mxunitclasstb uc on uc.unitclasskey = a.unitclasskey and uc.deleted = 0
			inner
			join	HITRUST..mxfundtb f on uc.fundkey = f.fundkey AND FUNDCODE NOT LIKE '%DUMMY%'
			inner
			join	HITRUST..mxlangdesctb fn on fn.desckey = f.descid
			inner
			join	HITRUST..mxcurrencytb ccy on ccy.currencykey = c.dealccy
			inner
			join	HITRUST..mxportfoliotb p on a.portfoliokey = p.portfoliokey
			inner
			join	bpss..tb_restricted_txns_all_IDs R on R.portkey = p.portfoliokey
			inner
			join	HITRUST..mxprofiletb u on u.profilekey = p.profilekey
			inner
			join	HITRUST..mxcommsplittb cm on cm.ctractkey = c.ctractkey and commpercent = 100
			inner
			join	HITRUST..mxagenttb ag on ag.agentkey = cm.agentkey
			inner
			join	HITRUST..mxsettlesplittb split on split.transactionkey = c.ctractkey
			inner
			join	HITRUST..mxsettleactb sa on sa.settleackey = split.settlekey
			inner
			join	HITRUST..mxtranfinstb tf on tf.transactionkey = c.ctractkey and tf.currencykey = 1
			left
			join	HITRUST..mxctractsubtypetb st on c.ctractsubtype = st.ctractsubtypekey
			left
			join	HITRUST..mxlangdesctb std on std.desckey = st.descid
			LEFT
			JOIN	(select	LD2.DESCRIPTION AS PRODTYPE, UDF.XREFKEY AS FUNDKEY , UDF.CHARFIELD
				FROM	hitrust..mxuserdefinedfieldtb udf 
				left join hitrust..mxuserdefinedfieldtypetb udft on udft.userdefinedfieldtypekey = udf.userdefinedfieldtypekey and udft.deleted = 0
				left join hitrust..mxlangdesctb ld2 on ld2.desckey = udft.descid

				WHERE	udf.deleted = 0 and udf.xrefkeytype = 4
				AND	LD2.DESCRIPTION LIKE 'WMS-%') PT ON PT.FUNDKEY = F.FUNDKEY
			where substring (p.portfoliono, 9, 1)  IN ('1', '3', '4', '6', '9','0')
			and f.companykey = 1 
			and csd.description in ('Priced', 'Settled/Registered')
			and	trancodekey in ( 'BaSales','WrSales','BaSwitchIn')
			and	(c.orderdate >= @dtFrEffdate or c.effdate >= @dtFrEffdate)								--<<<<<<<<<<<<<<<<<<<<<		DATE_CHANGE
			and	(c.orderdate < @dtToEffdate and c.effdate < @dtToEffdate)										--<<<<<<<<<<<<<<<<<<<<<		DATE_CHANGE
			-- and	ag.agentname not like '07%'
			and	(std.description is null or std.description <> 'TFRIN Transfer In')
			and	(reference is null or reference <> 'conversion in')
			and	(reference is null or reference <> 'adjustment')	--KC20120111
			--and	c.reference <> "adjustment"		--KC20110712
			and	left(c.ctractno, 3) <> 'RED'	--KC20120410
			and	u.relno not in ('UT029312', 'UN001862')		--KC20120410
			and ag.agentname not like '3900%'	--PC20180411
		PRINT ''
	END
	IF (@TYPE= '03_DSB-HKMA-section-I-DSB-details-COMM')
	BEGIN
		select	--distinct
			case f.companykey
			when 1 then '6'
			when 2 then '3'
			end as BankCode
			,left(c.ctractno,12) as Ctract_No
			,tf.COMMISSION as COMM
			,left(replace(R.SSNO,'-',space(7)),100) as All_Owners_ID
			,left(p.portfoliono,12) as Port_No
			,'"' + left(p.portfolioname,50) + '"' as Port_Name
			,left(ag.agentname,10) as Agent
			,convert(char(10),c.effdate,111) as Eff_Date
			,convert(char(10),c.orderdate,111) as Order_Date
			,uc.classcode
			,f.fundcode
			,'"' + fn.description + '"' as fundname_eng
			,left(csd.description,20) as Order_Status
			, convert(decimal(10,2),isnull(c.nounit,0)) as Notional_Amt
			, c.reference
			, c.ssref
			,std.description
			,convert(decimal(12,6),isnull(c.price,0)) as Price
			,left(sa.acno,20) as Settle_AC
			,convert(decimal(12,2),isnull(tf.net,0)) as Settle_Amt_HKD
			,
			case
			when uc.classcode not like '1%' then 'Unit Trusts'
			when prodtype = 'WMS-PRODTYPE-BONDS' then 'Debt Securities'
			when prodtype = 'WMS-PRODTYPE-NOTES-AST-LNK' then 'Others'
			when prodtype = 'WMS-PRODTYPE-NOTES-CRD-LNK' then 'Credit-Linked'
			when prodtype = 'WMS-PRODTYPE-NOTES-EQT-LNK' then 'Equity-Linked'
			when prodtype = 'WMS-PRODTYPE-ELI' then 'Equity-Linked'		--KC20120410
			when prodtype = 'WMS-PRODTYPE-NOTES-PCP-PRO' then 'Others'
			when f.fundcode = 'LMN0034' then 'Others'
			when uc.classcode = '1B' then 'Debt Securities'
			when prodtype is null then 'null'
			end as ProductType
		from	HITRUST..mxctracttb c
		inner
		join	HITRUST..mxctstatustb cs on cs.ctstatuskey = c.ctstatuskey
		inner
		join	HITRUST..mxlangdesctb csd on csd.desckey = cs.descid
		inner
		join	HITRUST..mxaccounttb a on c.acctkey = a.acctkey
		inner
		join	HITRUST..mxunitclasstb uc on uc.unitclasskey = a.unitclasskey and uc.deleted = 0
		inner
		join	HITRUST..mxfundtb f on uc.fundkey = f.fundkey AND FUNDCODE NOT LIKE '%DUMMY%'
		inner
		join	HITRUST..mxlangdesctb fn on fn.desckey = f.descid
		inner
		join	HITRUST..mxcurrencytb ccy on ccy.currencykey = c.dealccy
		inner
		join	HITRUST..mxportfoliotb p on a.portfoliokey = p.portfoliokey
		inner
		join	bpss..tb_restricted_txns_all_IDs R on R.portkey = p.portfoliokey
		inner
		join	HITRUST..mxprofiletb u on u.profilekey = p.profilekey
		inner
		join	HITRUST..mxcommsplittb cm on cm.ctractkey = c.ctractkey and commpercent = 100
		inner
		join	HITRUST..mxagenttb ag on ag.agentkey = cm.agentkey
		inner
		join	HITRUST..mxsettlesplittb split on split.transactionkey = c.ctractkey
		inner
		join	HITRUST..mxsettleactb sa on sa.settleackey = split.settlekey
		inner
		join	HITRUST..mxtranfinstb tf on tf.transactionkey = c.ctractkey and tf.currencykey = 1
		left
		join	HITRUST..mxctractsubtypetb st on c.ctractsubtype = st.ctractsubtypekey
		left
		join	HITRUST..mxlangdesctb std on std.desckey = st.descid
		LEFT
		JOIN	(select	LD2.DESCRIPTION AS PRODTYPE, UDF.XREFKEY AS FUNDKEY , UDF.CHARFIELD
			FROM	hitrust..mxuserdefinedfieldtb udf 
			left join hitrust..mxuserdefinedfieldtypetb udft on udft.userdefinedfieldtypekey = udf.userdefinedfieldtypekey and udft.deleted = 0
			left join hitrust..mxlangdesctb ld2 on ld2.desckey = udft.descid
			WHERE	udf.deleted = 0 and udf.xrefkeytype = 4
			AND	LD2.DESCRIPTION LIKE 'WMS-%') PT ON PT.FUNDKEY = F.FUNDKEY
		where substring (p.portfoliono, 9, 1)  IN ('1', '3', '4', '6', '9','0')
		and f.companykey = 1 
		and csd.description in ('Priced', 'Settled/Registered')
		and	trancodekey in ( 'BaSales','WrSales','BaSwitchIn')
		and	(c.orderdate >= @dtFrEffdate or c.effdate >= @dtFrEffdate)										--<<<<<<<<<<<<<<<<<<<<< 	DATE_CHANGE
		and	(c.orderdate < @dtToEffdate and c.effdate < @dtToEffdate)												--<<<<<<<<<<<<<<<<<<<<<		DATE_CHANGE
		-- and	ag.agentname not like '07%'
		and	(std.description is null or std.description <> 'TFRIN Transfer In')
		and	(reference is null or reference <> 'conversion in')
		and	(reference is null or reference <> 'adjustment')	--KC20120111
		--and	c.reference <> "adjustment"		--KC20110712
		and	left(c.ctractno, 3) <> 'RED'	--KC20120410
		and	u.relno not in ('UT029312', 'UN001862')		--KC20120410
		and ag.agentname not like '3900%'	--PC20180411 
	END
	IF (@TYPE= '04_DSB-HKMA-section-I-DSB-details-FX')
	BEGIN
			select	--distinct
				case f.companykey
				when 1 then '6'
				when 2 then '3'
				end as BankCode
				,left(c.ctractno,12) as Ctract_No
				,left(replace(R.SSNO,'-',space(7)),100) as All_Owners_ID
				,left(p.portfoliono,12) as Port_No
				,'"' + left(p.portfolioname,50) + '"' as Port_Name
				,left(ag.agentname,10) as Agent
				,convert(char(10),c.effdate,111) as Eff_Date
				,convert(char(10),c.orderdate,111) as Order_Date
				,uc.classcode
				,f.fundcode
				,'"' + fn.description + '"' as fundname_eng
				,left(csd.description,20) as Order_Status
				, convert(decimal(10,2),isnull(c.nounit,0)) as Notional_Amt
				, c.reference
				, c.ssref
				,std.description
				,convert(decimal(12,6),isnull(c.price,0)) as Price
				,left(sa.acno,20) as Settle_AC
				,convert(decimal(12,2),isnull(tf.net,0)) as Settle_Amt_HKD
				,convert(decimal(12,2),isnull(tfx.net,0)) as Settle_Amt
				,
				case
				when uc.classcode not like '1%' then 'Unit Trusts'
				when prodtype = 'WMS-PRODTYPE-BONDS' then 'Debt Securities'
				when prodtype = 'WMS-PRODTYPE-NOTES-AST-LNK' then 'Others'
				when prodtype = 'WMS-PRODTYPE-NOTES-CRD-LNK' then 'Credit-Linked'
				when prodtype = 'WMS-PRODTYPE-NOTES-EQT-LNK' then 'Equity-Linked'
				when prodtype = 'WMS-PRODTYPE-ELI' then 'Equity-Linked'		--KC20120410
				when prodtype = 'WMS-PRODTYPE-NOTES-PCP-PRO' then 'Others'
				when f.fundcode = 'LMN0034' then 'Others'
				when uc.classcode = '1B' then 'Debt Securities'
				when prodtype is null then 'null'
				end as ProductType
			from	HITRUST..mxctracttb c
			inner
			join	HITRUST..mxctstatustb cs on cs.ctstatuskey = c.ctstatuskey
			inner
			join	HITRUST..mxlangdesctb csd on csd.desckey = cs.descid
			inner
			join	HITRUST..mxaccounttb a on c.acctkey = a.acctkey
			inner
			join	HITRUST..mxunitclasstb uc on uc.unitclasskey = a.unitclasskey and uc.deleted = 0
			inner
			join	HITRUST..mxfundtb f on uc.fundkey = f.fundkey AND FUNDCODE NOT LIKE '%DUMMY%'
			inner
			join	HITRUST..mxlangdesctb fn on fn.desckey = f.descid
			inner
			join	HITRUST..mxcurrencytb ccy on ccy.currencykey = c.dealccy
			inner
			join	HITRUST..mxportfoliotb p on a.portfoliokey = p.portfoliokey
			inner
			join	bpss..tb_restricted_txns_all_IDs R on R.portkey = p.portfoliokey
			inner
			join	HITRUST..mxprofiletb u on u.profilekey = p.profilekey
			inner
			join	HITRUST..mxcommsplittb cm on cm.ctractkey = c.ctractkey and commpercent = 100
			inner
			join	HITRUST..mxagenttb ag on ag.agentkey = cm.agentkey
			inner
			join	HITRUST..mxsettlesplittb split on split.transactionkey = c.ctractkey
			inner
			join	HITRUST..mxsettleactb sa on sa.settleackey = split.settlekey
			inner
			join	HITRUST..mxtranfinstb tf on tf.transactionkey = c.ctractkey and tf.currencykey = 1
			left
			join	HITRUST..mxtranfinstb tfx on tfx.transactionkey = c.ctractkey and tfx.currencykey = c.dealccy and tfx.currencykey <> 1
			left
			join	HITRUST..mxctractsubtypetb st on c.ctractsubtype = st.ctractsubtypekey
			left
			join	HITRUST..mxlangdesctb std on std.desckey = st.descid
			LEFT
			JOIN	(select	LD2.DESCRIPTION AS PRODTYPE, UDF.XREFKEY AS FUNDKEY , UDF.CHARFIELD
				FROM	hitrust..mxuserdefinedfieldtb udf 
				left join hitrust..mxuserdefinedfieldtypetb udft on udft.userdefinedfieldtypekey = udf.userdefinedfieldtypekey and udft.deleted = 0
				left join hitrust..mxlangdesctb ld2 on ld2.desckey = udft.descid
				WHERE	udf.deleted = 0 and udf.xrefkeytype = 4
				AND	LD2.DESCRIPTION LIKE 'WMS-%') PT ON PT.FUNDKEY = F.FUNDKEY
			where substring (p.portfoliono, 9, 1)  IN ('1', '3', '4', '6', '9','0')
			and f.companykey = 1 
			and csd.description in ('Priced', 'Settled/Registered')
			and	trancodekey in ( 'BaSales','WrSales','BaSwitchIn')
			and	(c.orderdate >= @dtFrEffdate or c.effdate >= @dtFrEffdate)								--<<<<<<<<<<<<<<<<<<<<<		DATE_CHANGE
			and	(c.orderdate < @dtToEffdate and c.effdate < @dtToEffdate)								--<<<<<<<<<<<<<<<<<<<<<		DATE_CHANGE
			-- and	ag.agentname not like '07%'
			and	(std.description is null or std.description <> 'TFRIN Transfer In')
			and	(reference is null or reference <> 'conversion in')
			and	(reference is null or reference <> 'adjustment')	--KC20120111
			and	left(c.ctractno, 3) <> 'RED'	--KC20120410
			and	u.relno not in ('UT029312', 'UN001862')		--KC20120410
			and ag.agentname not like '3900%'	--PC20180411
	END
	IF (@TYPE= '05_DSB-HKMA-section-I-DSB-summary')
	BEGIN
			select	--distinct
				Settle_Amt_HKD = tf.net,
				case
				when uc.classcode not like '1%' then 'Unit Trusts'
				when prodtype = 'WMS-PRODTYPE-BONDS' then 'Debt Securities'
				when prodtype = 'WMS-PRODTYPE-NOTES-AST-LNK' then 'Others'
				when prodtype = 'WMS-PRODTYPE-NOTES-CRD-LNK' then 'Credit-Linked'
				when prodtype = 'WMS-PRODTYPE-NOTES-EQT-LNK' then 'Equity-Linked'
				when prodtype = 'WMS-PRODTYPE-ELI' then 'Equity-Linked'		--KC20120410
				when prodtype = 'WMS-PRODTYPE-NOTES-PCP-PRO' then 'Others'
				when f.fundcode = 'LMN0034' then 'Others'
				when uc.classcode = '1B' then 'Debt Securities'
				when prodtype is null then 'null'
				end as ProductType
			INTO	#RESULT
			from	HITRUST..mxctracttb c
			inner
			join	HITRUST..mxctstatustb cs on cs.ctstatuskey = c.ctstatuskey
			inner
			join	HITRUST..mxlangdesctb csd on csd.desckey = cs.descid
			inner
			join	HITRUST..mxaccounttb a on c.acctkey = a.acctkey
			inner
			join	HITRUST..mxunitclasstb uc on uc.unitclasskey = a.unitclasskey and uc.deleted = 0
			inner
			join	HITRUST..mxfundtb f on uc.fundkey = f.fundkey AND FUNDCODE NOT LIKE '%DUMMY%'
			inner
			join	HITRUST..mxlangdesctb fn on fn.desckey = f.descid
			inner
			join	HITRUST..mxcurrencytb ccy on ccy.currencykey = c.dealccy
			inner
			join	HITRUST..mxportfoliotb p on a.portfoliokey = p.portfoliokey
			inner
			join	bpss..tb_restricted_txns_all_IDs R on R.portkey = p.portfoliokey
			inner
			join	HITRUST..mxprofiletb u on u.profilekey = p.profilekey
			inner
			join	HITRUST..mxcommsplittb cm on cm.ctractkey = c.ctractkey and commpercent = 100
			inner
			join	HITRUST..mxagenttb ag on ag.agentkey = cm.agentkey
			inner
			join	HITRUST..mxsettlesplittb split on split.transactionkey = c.ctractkey
			inner
			join	HITRUST..mxsettleactb sa on sa.settleackey = split.settlekey
			inner
			join	HITRUST..mxtranfinstb tf on tf.transactionkey = c.ctractkey and tf.currencykey = 1
			left
			join	HITRUST..mxctractsubtypetb st on c.ctractsubtype = st.ctractsubtypekey
			left
			join	HITRUST..mxlangdesctb std on std.desckey = st.descid
			LEFT
			JOIN	(select	LD2.DESCRIPTION AS PRODTYPE, UDF.XREFKEY AS FUNDKEY , UDF.CHARFIELD
				FROM	hitrust..mxuserdefinedfieldtb udf 
				left join hitrust..mxuserdefinedfieldtypetb udft on udft.userdefinedfieldtypekey = udf.userdefinedfieldtypekey and udft.deleted = 0
				left join hitrust..mxlangdesctb ld2 on ld2.desckey = udft.descid

				WHERE	udf.deleted = 0 and udf.xrefkeytype = 4
				AND	LD2.DESCRIPTION LIKE 'WMS-%') PT ON PT.FUNDKEY = F.FUNDKEY
			where substring (p.portfoliono, 9, 1)  IN ('1', '3', '4', '6', '9','0')
			and f.companykey = 1 
			and csd.description in ('Priced', 'Settled/Registered')
			and	trancodekey in ( 'BaSales','WrSales','BaSwitchIn')
			and	(c.orderdate >= @dtFrEffdate or c.effdate >= @dtFrEffdate)								--<<<<<<<<<<<<<<<<<<<<<		DATE_CHANGE
			and	(c.orderdate < @dtToEffdate and c.effdate < @dtToEffdate)										--<<<<<<<<<<<<<<<<<<<<<		DATE_CHANGE
			-- and	ag.agentname not like '07%'
			and	(std.description is null or std.description <> 'TFRIN Transfer In')
			and	(reference is null or reference <> 'conversion in')
			and	(reference is null or reference <> 'adjustment')	--KC20120111
			--and	c.reference <> "adjustment"		--KC20110712
			and	left(c.ctractno, 3) <> 'RED'	--KC20120410
			and	u.relno not in ('UT029312', 'UN001862')		--KC20120410
			and ag.agentname not like '3900%'	--PC20180411
			SELECT		Settle_Amt_HKD_SUM = 	SUM(Settle_Amt_HKD)
					,[Mutual funds/UT]=	RTRIM(CASE WHEN ProductType='Unit Trusts' THEN CAST(COUNT(*) AS CHAR) ELSE '' END)
					,[Credit-linked]=	RTRIM(CASE WHEN ProductType='Credit-Linked' THEN CAST(COUNT(*) AS CHAR) ELSE '' END)
					,[Equity-linked]=	RTRIM(CASE WHEN ProductType='Equity-Linked' THEN CAST(COUNT(*) AS CHAR) ELSE '' END)
					,[Equity (ac/de)cumulators] = ''
					,[Interest rate-linked] = ''
					,[Debt securities]=	RTRIM(CASE WHEN ProductType='Debt Securities' THEN CAST(COUNT(*) AS CHAR) ELSE '' END)
					,[Others]=		RTRIM(CASE WHEN ProductType='Others' THEN CAST(COUNT(*) AS CHAR) ELSE '' END)
					,[Exception]=		RTRIM(CASE WHEN ProductType='NULL' THEN CAST(COUNT(*) AS CHAR) ELSE '' END)
			FROM		#RESULT
			GROUP BY	ProductType
	END
	IF (@TYPE= '06_DSB-HKMA-section-III-part1-DSB-details')
	BEGIN
		select	distinct
			case
			when uc.classcode not like '1%' then 'Unit Trusts'
			when prodtype = 'WMS-PRODTYPE-BONDS' then 'Debt Securities'
			when prodtype = 'WMS-PRODTYPE-NOTES-AST-LNK' then 'Others'
			when prodtype = 'WMS-PRODTYPE-NOTES-CRD-LNK' then 'Credit-Linked'
			when prodtype = 'WMS-PRODTYPE-NOTES-EQT-LNK' then 'Equity-Linked'
			when prodtype = 'WMS-PRODTYPE-ELI' then 'Equity-Linked'		--KC20120410
			when prodtype = 'WMS-PRODTYPE-NOTES-PCP-PRO' then 'Others'
			when f.fundcode = 'LMN0034' then 'Others'
			when uc.classcode = '1B' then 'Debt Securities'
			when prodtype is null then 'null'
			end as ProductType
			,#ENTITY_PORTFOLIO_TB.ENTITY
			,HKDamt = round(sum(fx.rate * bal * pp.navprice),0)
		from	HITRUST..mxaccounttb a WITH (NOLOCK)
		inner
		join	( select acctkey, max(effdate) as lasteffdate, sum(isnull(confirmedmovement,0)) as bal
			from	HITRUST..mxaccbalmovetb  WITH (NOLOCK)
			where	effdate < @dtDATETO																				--<<<<<<<<<<<<<<<<<<<<<		DATE_CHANGE
			group by acctkey 
			having sum(isnull(confirmedmovement,0)) > 0) ax 
			on a.acctkey = ax.acctkey
		inner
		join	HITRUST..mxportfoliotb p  WITH (NOLOCK) on p.portfoliokey = a.portfoliokey
		inner
		join	HITRUST..mxprofiletb pf  WITH (NOLOCK) on pf.profilekey = p.profilekey
		inner
		join	HITRUST..mxprofiletypetb pft  WITH (NOLOCK) on pft.profiletypekey = pf.profiletypekey
		inner
		join	HITRUST..mxunitclasstb uc  WITH (NOLOCK) on uc.unitclasskey = a.unitclasskey and uc.deleted = 0 and uc.classcode not like '1%'
		inner
		join	HITRUST..mxfundtb f  WITH (NOLOCK) on f.fundkey = uc.fundkey and f.companykey = 1 AND FUNDCODE NOT LIKE '%DUMMY%'
		inner
		join	HITRUST..mxlangdesctb fn  WITH (NOLOCK) on fn.desckey = f.descid
		inner
		join	HITRUST..mxcurrencytb cc  WITH (NOLOCK) on cc.currencykey = f.currency
		--/*
		inner
		join	BPSS..fx fx  WITH (NOLOCK) on fx.ccy = cc.currencyiso
		inner
		join
			(select	fp.fundkey, fp.navprice
			from	HITRUST..mxpricetb fp  WITH (NOLOCK)
			inner	join #tmp_mxpricetb	mp
			on	mp.fundkey = fp.fundkey and mp.maxpricedate = fp.pricedate
			) pp on pp.fundkey = f.fundkey
		--*/
		LEFT
		JOIN	(select	LD2.DESCRIPTION AS PRODTYPE, UDF.XREFKEY AS FUNDKEY , UDF.CHARFIELD
			FROM	hitrust..mxuserdefinedfieldtb udf   WITH (NOLOCK)
			left join hitrust..mxuserdefinedfieldtypetb udft  WITH (NOLOCK) on udft.userdefinedfieldtypekey = udf.userdefinedfieldtypekey and udft.deleted = 0
			left join hitrust..mxlangdesctb ld2  WITH (NOLOCK) on ld2.desckey = udft.descid

			WHERE	udf.deleted = 0 and udf.xrefkeytype = 4
			AND	LD2.DESCRIPTION LIKE 'WMS-%') PT ON PT.FUNDKEY = F.FUNDKEY


		INNER JOIN	#ENTITY_PORTFOLIO_TB  WITH (NOLOCK)
			ON	#ENTITY_PORTFOLIO_TB.PORTFOLIOKEY = P.PORTFOLIOKEY
		INNER JOIN hitrust..mxagenttb TB_AGENT  WITH (NOLOCK)    on p.AGENTKEY = TB_AGENT.AGENTKEY	--20201012 Penny Chu 
		where substring (p.portfoliono, 9, 1)  IN ('1', '3', '4', '6', '9','0')
		and 
		f.fundcode not in
		('LMN0009','LMN0010','LMN0032','LMN0035','LMN0033', 'LMN0034','LMB0001','LMB0002','LMB0003','LMB0004','LMB0005','LMB0006','LMB0007','LMB0009','LMB0010','LMB0011','LMB0012','LMB0014','LMB0015','LMB0016','LMB0017','LMB0018',
		'LMB0019','LMB0020','LMB0021','LMB0022','LMB0023','LMB0024','LMB0025','LMB0026','LMB0027','LMB0028','LMB0029','LMB0030','LMB0031','LMB0032','LMB0033','LMB0034','LMB0035','LMB0036','LMB0037','LMB0038','LMB0039','LMB0040','LMB0041','LMB0042','LMB0043','LMB0044','LMB0045','LMB0046','LMB0047',
		'LMB0048','LMB0049','LMB0050','DAN0002','DAN0003','DAN0004','DAN0005','DAN0010','DAN0011','DAN0012','DAN0013','DAN0022','DAN0023','DAN0024','DAN0025','DAN0026','DAN0027','DAN0028','DAN0029','DAN0030','DAN0031','DAN0032',
		'DAN0033','DAN0034','DAN0035','DAN0036','DAN0037','DAN0038','DAN0039','DAN0040','DAN0041','DAN0042','DAN0043','DAN0044','DAN0045','UBN0015','UBN0016','MSN0003','MSN0004','MSN0005','MSN0006','MSN0007','MSN0008',
		'LMP0006','LMP0007','LMP0008','LMP0009','LMP0010','LMP0011','LMP0012','LMP0013','LMP0014','LMP0015','LMP0016','LMP0017','LMP0018','LMP0019','LMP0020','LMP0021','LMP0022','LMP0023','LMP0025')

		and	pf.relno not in ('UT029312', 'UN001862')		--KC20120410
		AND TB_AGENT.AGENTNAME NOT LIKE '3900%'	--PC20201012
		group
		by	case
			when uc.classcode not like '1%' then 'Unit Trusts'
			when prodtype = 'WMS-PRODTYPE-BONDS' then 'Debt Securities'
			when prodtype = 'WMS-PRODTYPE-NOTES-AST-LNK' then 'Others'
			when prodtype = 'WMS-PRODTYPE-NOTES-CRD-LNK' then 'Credit-Linked'
			when prodtype = 'WMS-PRODTYPE-NOTES-EQT-LNK' then 'Equity-Linked'
			when prodtype = 'WMS-PRODTYPE-ELI' then 'Equity-Linked'		--KC20120410
			when prodtype = 'WMS-PRODTYPE-NOTES-PCP-PRO' then 'Others'
			when f.fundcode = 'LMN0034' then 'Others'
			when uc.classcode = '1B' then 'Debt Securities'
			when prodtype is null then 'null'
			end
		,#ENTITY_PORTFOLIO_TB.ENTITY
 
	END
	IF (@TYPE= '07_DSB-HKMA-section-III-part1-DSB-details-CVM')
	BEGIN
		select	distinct
			case
			when uc.classcode not like '1%' then 'Unit Trusts'
			when prodtype = 'WMS-PRODTYPE-BONDS' then 'Debt Securities'
			when prodtype = 'WMS-PRODTYPE-NOTES-AST-LNK' then 'Others'
			when prodtype = 'WMS-PRODTYPE-NOTES-CRD-LNK' then 'Credit-Linked'
			when prodtype = 'WMS-PRODTYPE-NOTES-EQT-LNK' then 'Equity-Linked'
			when prodtype = 'WMS-PRODTYPE-ELI' then 'Equity-Linked'		--KC20120410
			when prodtype = 'WMS-PRODTYPE-NOTES-PCP-PRO' then 'Others'
			when f.fundcode = 'LMN0034' then 'Others'
			when uc.classcode = '1B' then 'Debt Securities'
			when prodtype is null then 'null'
			end as ProductType, 
			p.portfoliono,
			#ENTITY_PORTFOLIO_TB.ENTITY,
			cc.currencyiso,
			pp.navprice,
			fx.rate as fxrate, 
			HKDamt = round(fx.rate * bal * pp.navprice,0),
			bal as holdings,
		--	sum(bal) sumbal, 
		--	, count(*) as portcount
			f.fundkey,
			f.fundcode, 
			'"' + fn.description + '"' as prodname
		--	, pftd.description as clienttype
		--	, p.portfoliono, uc.classcode, ax.*, PT.*
		from	HITRUST..mxaccounttb a
		inner
		join	( select acctkey, max(effdate) as lasteffdate, sum(isnull(confirmedmovement,0)) as bal
			from	HITRUST..mxaccbalmovetb
			where	effdate < @dtDATETO																		--<<<<<<<<<<<<<<<<<<<<<		DATE_CHANGE
			group by acctkey 
			having sum(isnull(confirmedmovement,0)) > 0) ax 
			on a.acctkey = ax.acctkey
		inner
		join	HITRUST..mxportfoliotb p on p.portfoliokey = a.portfoliokey
		inner
		join	HITRUST..mxprofiletb pf on pf.profilekey = p.profilekey
		inner
		join	HITRUST..mxprofiletypetb pft on pft.profiletypekey = pf.profiletypekey
		--inner
		--join	mxlangdesctb pftd on pftd.desckey = pft.descid and pftd.description <> 'Private Banking'
		inner
		join	HITRUST..mxunitclasstb uc on uc.unitclasskey = a.unitclasskey and uc.deleted = 0 and uc.classcode not like '1%'
		inner
		join	HITRUST..mxfundtb f on f.fundkey = uc.fundkey and f.companykey = 1 AND FUNDCODE NOT LIKE '%DUMMY%'
		inner
		join	HITRUST..mxlangdesctb fn on fn.desckey = f.descid
		inner
		join	HITRUST..mxcurrencytb cc on cc.currencykey = f.currency
		--/*
		inner
		join	BPSS..fx fx on fx.ccy = cc.currencyiso
		inner
		join
			(select	fp.fundkey, fp.navprice
			from	HITRUST..mxpricetb fp
			inner	join #tmp_mxpricetb	mp
			on	mp.fundkey = fp.fundkey and mp.maxpricedate = fp.pricedate
			) pp on pp.fundkey = f.fundkey
		--*/
		LEFT
		JOIN	(select	LD2.DESCRIPTION AS PRODTYPE, UDF.XREFKEY AS FUNDKEY , UDF.CHARFIELD
			FROM	hitrust..mxuserdefinedfieldtb udf 
			left join hitrust..mxuserdefinedfieldtypetb udft on udft.userdefinedfieldtypekey = udf.userdefinedfieldtypekey and udft.deleted = 0
			left join hitrust..mxlangdesctb ld2 on ld2.desckey = udft.descid

			WHERE	udf.deleted = 0 and udf.xrefkeytype = 4
			AND	LD2.DESCRIPTION LIKE 'WMS-%') PT ON PT.FUNDKEY = F.FUNDKEY
		INNER JOIN hitrust..mxagenttb TB_AGENT with (nolock) on p.AGENTKEY = TB_AGENT.AGENTKEY	--20201012 Penny Chu 
		INNER JOIN	#ENTITY_PORTFOLIO_TB
			ON	#ENTITY_PORTFOLIO_TB.PORTFOLIOKEY = P.PORTFOLIOKEY
		where substring (p.portfoliono, 9, 1)  IN ('1', '3', '4', '6', '9','0')
		and 
		f.fundcode not in
		('LMN0009','LMN0010','LMN0032','LMN0035','LMN0033', 'LMN0034','LMB0001','LMB0002','LMB0003','LMB0004','LMB0005','LMB0006','LMB0007','LMB0009','LMB0010','LMB0011','LMB0012','LMB0014','LMB0015','LMB0016','LMB0017','LMB0018','LMB0019','LMB0020','LMB0021','LMB0022','LMB0023','LMB0024','LMB0025','LMB0026','LMB0027','LMB0028','LMB0029','LMB0030','LMB0031','LMB0032','LMB0033','LMB0034',
		'LMB0035','LMB0036','LMB0037','LMB0038','LMB0039','LMB0040','LMB0041','LMB0042','LMB0043','LMB0044','LMB0045','LMB0046','LMB0047','LMB0048','LMB0049','LMB0050','DAN0002','DAN0003','DAN0004','DAN0005','DAN0010','DAN0011','DAN0012','DAN0013','DAN0022','DAN0023','DAN0024','DAN0025','DAN0026','DAN0027','DAN0028','DAN0029','DAN0030','DAN0031','DAN0032','DAN0033','DAN0034','DAN0035','DAN0036','DAN0037','DAN0038','DAN0039','DAN0040','DAN0041',
		'DAN0042','DAN0043','DAN0044','DAN0045','UBN0015','UBN0016','MSN0003','MSN0004','MSN0005','MSN0006','MSN0007','MSN0008','LMP0006','LMP0007','LMP0008','LMP0009','LMP0010','LMP0011','LMP0012','LMP0013','LMP0014','LMP0015','LMP0016','LMP0017','LMP0018','LMP0019','LMP0020','LMP0021','LMP0022','LMP0023','LMP0025')
		and	pf.relno not in ('UT029312', 'UN001862')		--KC20120410
		AND TB_AGENT.AGENTNAME NOT LIKE '3900%'	--PC20201012
		--GROUP BY P.PORTFOLIONO
		ORDER
		BY	producttype, #ENTITY_PORTFOLIO_TB.ENTITY, p.portfoliono	--,producttype , UC.CLASSCODE, F.FUNDCODE
	END
	IF (@TYPE= '08_DSB-HKMA-section-III-part1-DSB-summary')
	BEGIN
		select	ProductType, count(ENTITY) as ENTITYCount, sum(HKDamt) as HKDamtSum
		from
		(

		select	distinct
			case
			when uc.classcode not like '1%' then 'Unit Trusts'
			when prodtype = 'WMS-PRODTYPE-BONDS' then 'Debt Securities'
			when prodtype = 'WMS-PRODTYPE-NOTES-AST-LNK' then 'Others'
			when prodtype = 'WMS-PRODTYPE-NOTES-CRD-LNK' then 'Credit-Linked'
			when prodtype = 'WMS-PRODTYPE-NOTES-EQT-LNK' then 'Equity-Linked'
			when prodtype = 'WMS-PRODTYPE-ELI' then 'Equity-Linked'		--KC20120410
			when prodtype = 'WMS-PRODTYPE-NOTES-PCP-PRO' then 'Others'
			when f.fundcode = 'LMN0034' then 'Others'
			when uc.classcode = '1B' then 'Debt Securities'
			when prodtype is null then 'null'
			end as ProductType,  
			#ENTITY_PORTFOLIO_TB.ENTITY 
			,HKDamt = round(sum(fx.rate * bal * pp.navprice),0) 
		from	HITRUST..mxaccounttb a
		inner
		join	( select acctkey, max(effdate) as lasteffdate, sum(isnull(confirmedmovement,0)) as bal
			from	HITRUST..mxaccbalmovetb
			where	effdate < @dtDATETO																						--<<<<<<<<<<<<<<<<<<<<<		DATE_CHANGE
			group by acctkey 
			having sum(isnull(confirmedmovement,0)) > 0) ax 
			on a.acctkey = ax.acctkey
		inner
		join	HITRUST..mxportfoliotb p on p.portfoliokey = a.portfoliokey
		inner
		join	HITRUST..mxprofiletb pf on pf.profilekey = p.profilekey
		inner
		join	HITRUST..mxprofiletypetb pft on pft.profiletypekey = pf.profiletypekey
		inner
		join	HITRUST..mxunitclasstb uc on uc.unitclasskey = a.unitclasskey and uc.deleted = 0 and uc.classcode not like '1%'
		inner
		join	HITRUST..mxfundtb f on f.fundkey = uc.fundkey and f.companykey = 1 AND FUNDCODE NOT LIKE '%DUMMY%'
		inner
		join	HITRUST..mxlangdesctb fn on fn.desckey = f.descid
		inner
		join	HITRUST..mxcurrencytb cc on cc.currencykey = f.currency
		--/*
		inner
		join	BPSS..fx fx on fx.ccy = cc.currencyiso
		inner
		join
			(select	fp.fundkey, fp.navprice
			from	HITRUST..mxpricetb fp
			inner	join #tmp_mxpricetb	mp
			on	mp.fundkey = fp.fundkey and mp.maxpricedate = fp.pricedate
			) pp on pp.fundkey = f.fundkey
		--*/
		LEFT
		JOIN	(select	LD2.DESCRIPTION AS PRODTYPE, UDF.XREFKEY AS FUNDKEY , UDF.CHARFIELD
			FROM	hitrust..mxuserdefinedfieldtb udf 
			left join hitrust..mxuserdefinedfieldtypetb udft on udft.userdefinedfieldtypekey = udf.userdefinedfieldtypekey and udft.deleted = 0
			left join hitrust..mxlangdesctb ld2 on ld2.desckey = udft.descid

			WHERE	udf.deleted = 0 and udf.xrefkeytype = 4
			AND	LD2.DESCRIPTION LIKE 'WMS-%') PT ON PT.FUNDKEY = F.FUNDKEY

		INNER JOIN hitrust..mxagenttb TB_AGENT with (nolock) on p.AGENTKEY = TB_AGENT.AGENTKEY	--20201012 Penny Chu 
		INNER JOIN	#ENTITY_PORTFOLIO_TB
			ON	#ENTITY_PORTFOLIO_TB.PORTFOLIOKEY = P.PORTFOLIOKEY

		where substring (p.portfoliono, 9, 1)  IN ('1', '3', '4', '6', '9','0')
		and 
		f.fundcode not in
		('LMN0009','LMN0010','LMN0032','LMN0035','LMN0033', 'LMN0034','LMB0001','LMB0002','LMB0003','LMB0004','LMB0005','LMB0006','LMB0007','LMB0009','LMB0010',
		'LMB0011','LMB0012','LMB0014','LMB0015','LMB0016','LMB0017','LMB0018','LMB0019','LMB0020','LMB0021','LMB0022','LMB0023','LMB0024','LMB0025','LMB0026',
		'LMB0027','LMB0028','LMB0029','LMB0030','LMB0031','LMB0032','LMB0033','LMB0034','LMB0035','LMB0036','LMB0037','LMB0038','LMB0039','LMB0040','LMB0041',
		'LMB0042','LMB0043','LMB0044','LMB0045','LMB0046','LMB0047','LMB0048','LMB0049','LMB0050','DAN0002','DAN0003','DAN0004','DAN0005','DAN0010','DAN0011',
		'DAN0012','DAN0013','DAN0022','DAN0023','DAN0024','DAN0025','DAN0026','DAN0027','DAN0028','DAN0029','DAN0030','DAN0031','DAN0032','DAN0033','DAN0034',
		'DAN0035','DAN0036','DAN0037','DAN0038','DAN0039','DAN0040','DAN0041','DAN0042','DAN0043','DAN0044','DAN0045','UBN0015','UBN0016','MSN0003','MSN0004',
		'MSN0005','MSN0006','MSN0007','MSN0008','LMP0006','LMP0007','LMP0008','LMP0009','LMP0010','LMP0011','LMP0012','LMP0013','LMP0014','LMP0015','LMP0016',
		'LMP0017','LMP0018','LMP0019','LMP0020','LMP0021','LMP0022','LMP0023','LMP0025')

		and	pf.relno not in ('UT029312', 'UN001862')		--KC20120410
		AND TB_AGENT.AGENTNAME NOT LIKE '3900%'	--PC20201012
		group
		by	case
			when uc.classcode not like '1%' then 'Unit Trusts'
			when prodtype = 'WMS-PRODTYPE-BONDS' then 'Debt Securities'
			when prodtype = 'WMS-PRODTYPE-NOTES-AST-LNK' then 'Others'
			when prodtype = 'WMS-PRODTYPE-NOTES-CRD-LNK' then 'Credit-Linked'
			when prodtype = 'WMS-PRODTYPE-NOTES-EQT-LNK' then 'Equity-Linked'
			when prodtype = 'WMS-PRODTYPE-ELI' then 'Equity-Linked'		--KC20120410
			when prodtype = 'WMS-PRODTYPE-NOTES-PCP-PRO' then 'Others'
			when f.fundcode = 'LMN0034' then 'Others'
			when uc.classcode = '1B' then 'Debt Securities'
			when prodtype is null then 'null'
			end 
			,#ENTITY_PORTFOLIO_TB.ENTITY
		) x	group by producttype 
	END
	IF (@TYPE= '09_DSB-HKMA-section-III-part2-DSB-details')
	BEGIN
		select	distinct
			case
			when uc.classcode not like '1%' then 'Unit Trusts'
			when prodtype = 'WMS-PRODTYPE-BONDS' then 'Debt Securities'
			when prodtype = 'WMS-PRODTYPE-NOTES-AST-LNK' then 'Others'
			when prodtype = 'WMS-PRODTYPE-NOTES-CRD-LNK' then 'Credit-Linked'
			when prodtype = 'WMS-PRODTYPE-NOTES-EQT-LNK' then 'Equity-Linked'
			when prodtype = 'WMS-PRODTYPE-ELI' then 'Equity-Linked'		--KC20120410
			when prodtype = 'WMS-PRODTYPE-NOTES-PCP-PRO' then 'Others'
			when f.fundcode = 'LMN0034' then 'Others'
			when uc.classcode = '1B' then 'Debt Securities'
			when prodtype is null then 'Others'		--KC20110712
			end as ProductType, 

			p.portfoliono,
			#ENTITY_PORTFOLIO_TB.ENTITY
	
			, sum(convert(decimal(15,2),tfhkd.net)) as TxnAmtHKDold
			, sum(case isnull(std.description, 'nosubtype')
				when 'TFRIN Transfer In' then
					case when c.effdate >= '2010/10/01' AND c.effdate < '2011/01/01' then convert(decimal(15,2),nounit / tfdeal.fxrate)
					else convert(decimal(15,2),tfhkd.net)
					end
				else convert(decimal(15,2),tfhkd.net)
			  end) as TxnAmtHKD
		from	HITRUST..mxaccounttb a
		inner
		join	( select acctkey, max(effdate) as lasteffdate, sum(isnull(confirmedmovement,0)) as bal
			from	HITRUST..mxaccbalmovetb
			where	effdate < @dtDATETO																								--<<<<<<<<<<<<<<<<<<<<<		DATE_CHANGE
			group by acctkey 
			having sum(isnull(confirmedmovement,0)) > 0) ax 
			on a.acctkey = ax.acctkey
		inner
		join	HITRUST..mxportfoliotb p on p.portfoliokey = a.portfoliokey
		inner
		join	HITRUST..mxprofiletb pf on pf.profilekey = p.profilekey
		inner
		join	HITRUST..mxprofiletypetb pft on pft.profiletypekey = pf.profiletypekey
		inner
		join	HITRUST..mxunitclasstb uc on uc.unitclasskey = a.unitclasskey and uc.deleted = 0 and uc.classcode like '1%'
		inner
		join	HITRUST..mxfundtb f on f.fundkey = uc.fundkey and f.companykey = 1 AND FUNDCODE NOT LIKE '%DUMMY%'
		inner
		join	HITRUST..mxlangdesctb fn on fn.desckey = f.descid
		inner
		join	HITRUST..mxcurrencytb cc on cc.currencykey = f.currency
		inner
		join	BPSS..fx fx on fx.ccy = cc.currencyiso
		inner
		join	HITRUST..mxctracttb c on c.acctkey = a.acctkey and c.effdate < @dtDATETO														--<<<<<<<<<<<<<<<<<<<<<		DATE_CHANGE
		inner join hitrust..mxctstatustb cs on c.ctstatuskey = cs.ctstatuskey and c.company = cs.company
		inner join hitrust..mxlangdesctb csd on cs.descid = csd.desckey 
			and csd.description in ('priced','settled/registered','executed','upfront settled')
		inner
		join	HITRUST..mxtranfinstb tfhkd on tfhkd.transactionkey = c.ctractkey and tfhkd.currencykey = 1
		left
		join	HITRUST..mxtranfinstb tfdeal on tfdeal.transactionkey = c.ctractkey and tfdeal.currencykey = c.dealccy
		LEFT JOIN HITRUST..MXCTRACTSUBTYPETB st ON
				c.CTRACTSUBTYPE = st.CTRACTSUBTYPEKEY
		LEFT JOIN HITRUST..MXLANGDESCTB std ON 
				st.DESCID = std.DESCKEY
		LEFT
		JOIN	(select	LD2.DESCRIPTION AS PRODTYPE, UDF.XREFKEY AS FUNDKEY , UDF.CHARFIELD
			FROM	hitrust..mxuserdefinedfieldtb udf 
			left join hitrust..mxuserdefinedfieldtypetb udft on udft.userdefinedfieldtypekey = udf.userdefinedfieldtypekey and udft.deleted = 0
			left join hitrust..mxlangdesctb ld2 on ld2.desckey = udft.descid
			WHERE	udf.deleted = 0 and udf.xrefkeytype = 4
			AND	LD2.DESCRIPTION LIKE 'WMS-%') PT ON PT.FUNDKEY = F.FUNDKEY
		INNER JOIN	#ENTITY_PORTFOLIO_TB
			ON	#ENTITY_PORTFOLIO_TB.PORTFOLIOKEY = P.PORTFOLIOKEY
		--PC20180411 Exclude agent 3900-OCBD start
		LEFT join	HITRUST..mxcommsplittb cm with (nolock) on cm.ctractkey = c.ctractkey and commpercent = 100
		LEFT join	HITRUST..mxagenttb ag with (nolock) on ag.agentkey = cm.agentkey
		where substring (p.portfoliono, 9, 1)  IN ('1', '3', '4', '6', '9','0')
		and 
		f.fundcode not in
		('LMN0009','LMN0010','LMN0032','LMN0035','LMN0033', 'LMN0034',
		'LMB0001','LMB0002','LMB0003','LMB0004','LMB0005','LMB0006',
		'LMB0007','LMB0009','LMB0010','LMB0011','LMB0012','LMB0014',
		'LMB0015','LMB0016','LMB0017','LMB0018','LMB0019','LMB0020',
		'LMB0021','LMB0022','LMB0023','LMB0024','LMB0025','LMB0026',
		'LMB0027','LMB0028','LMB0029','LMB0030','LMB0031','LMB0032',
		'LMB0033','LMB0034','LMB0035','LMB0036','LMB0037','LMB0038',
		'LMB0039','LMB0040','LMB0041','LMB0042','LMB0043','LMB0044',
		'LMB0045','LMB0046','LMB0047','LMB0048','LMB0049','LMB0050',
		'DAN0002','DAN0003','DAN0004','DAN0005','DAN0010','DAN0011',
		'DAN0012','DAN0013','DAN0022','DAN0023','DAN0024','DAN0025',
		'DAN0026','DAN0027','DAN0028','DAN0029','DAN0030','DAN0031',
		'DAN0032','DAN0033','DAN0034','DAN0035','DAN0036','DAN0037',
		'DAN0038','DAN0039','DAN0040','DAN0041','DAN0042','DAN0043',
		'DAN0044','DAN0045','UBN0015','UBN0016','MSN0003','MSN0004',
		'MSN0005','MSN0006','MSN0007','MSN0008','LMP0006','LMP0007',
		'LMP0008','LMP0009','LMP0010','LMP0011','LMP0012','LMP0013',
		'LMP0014','LMP0015','LMP0016','LMP0017','LMP0018','LMP0019',
		'LMP0020','LMP0021','LMP0022','LMP0023','LMP0025')

		and	left(c.ctractno, 3) <> 'RED'	--KC20120410
		and	pf.relno not in ('UT029312', 'UN001862')		--KC20120410
		and isnull(ag.agentname,'') not like '3900%'	--PC20180411
		group
		by	case
			when uc.classcode not like '1%' then 'Unit Trusts'
			when prodtype = 'WMS-PRODTYPE-BONDS' then 'Debt Securities'
			when prodtype = 'WMS-PRODTYPE-NOTES-AST-LNK' then 'Others'
			when prodtype = 'WMS-PRODTYPE-NOTES-CRD-LNK' then 'Credit-Linked'
			when prodtype = 'WMS-PRODTYPE-NOTES-EQT-LNK' then 'Equity-Linked'
			when prodtype = 'WMS-PRODTYPE-ELI' then 'Equity-Linked'		--KC20120410
			when prodtype = 'WMS-PRODTYPE-NOTES-PCP-PRO' then 'Others'
			when f.fundcode = 'LMN0034' then 'Others'
			when uc.classcode = '1B' then 'Debt Securities'
			when prodtype is null then 'Others'		--kc20110712
			end
			, p.portfoliono
			,#ENTITY_PORTFOLIO_TB.ENTITY
		ORDER
		BY	producttype, #ENTITY_PORTFOLIO_TB.ENTITY, p.portfoliono 	--,producttype , UC.CLASSCODE, F.FUNDCODE
	END
	IF (@TYPE= '10_DSB-HKMA-section-III-part2-DSB-details-CVM')
	BEGIN

		select	distinct
			case
			when uc.classcode not like '1%' then 'Unit Trusts'
			when prodtype = 'WMS-PRODTYPE-BONDS' then 'Debt Securities'
			when prodtype = 'WMS-PRODTYPE-NOTES-AST-LNK' then 'Others'
			when prodtype = 'WMS-PRODTYPE-NOTES-CRD-LNK' then 'Credit-Linked'
			when prodtype = 'WMS-PRODTYPE-NOTES-EQT-LNK' then 'Equity-Linked'
			when prodtype = 'WMS-PRODTYPE-ELI' then 'Equity-Linked'		--KC20120410
			when prodtype = 'WMS-PRODTYPE-NOTES-PCP-PRO' then 'Others'
			when f.fundcode = 'LMN0034' then 'Others'
			when uc.classcode = '1B' then 'Debt Securities'
			when prodtype is null then 'Others'		--KC20110712
			end as ProductType, 
			p.portfoliono,
			#ENTITY_PORTFOLIO_TB.ENTITY,
			cc.currencyiso,
			bal as holdings,
			f.fundkey,
			f.fundcode, fn.description as prodname
			, c.ctractno, c.effdate, csd.description as ctstatus, c.nounit, c.price
			, c.reference	--, c.ssref as IpoApply

			, convert(decimal(15,2),tfhkd.net) as TxnAmtHKDold

			, case isnull(std.description, 'nosubtype')
				when 'TFRIN Transfer In' then
					case when c.effdate >= '2010/10/01' and c.effdate < '2011/01/01' then convert(decimal(15,2),nounit / tfdeal.fxrate)
					else convert(decimal(15,2),tfhkd.net)
					end
				else convert(decimal(15,2),tfhkd.net)
			  end as TxnAmtHKD

			, convert(decimal(15,2),tfdeal.net) as TxnAmtinDealCcyold

			, case isnull(std.description,'nosubtype')
				when 'TFRIN Transfer In' then 
					case when c.effdate >= '2010/10/01' and c.effdate < '2011/01/01' then nounit
					else convert(decimal(15,2),tfdeal.net)
					end
				else convert(decimal(15,2),tfdeal.net)
			  end as TxnAmtinDealCcy
			, tfdeal.fxrate as HKDtoDealFx
			, std.description as SubTypeDesc
		from	HITRUST..mxaccounttb a
		inner
		join	( select acctkey, max(effdate) as lasteffdate, sum(isnull(confirmedmovement,0)) as bal
			from	HITRUST..mxaccbalmovetb
			where	effdate < @dtDATETO																						--<<<<<<<<<<<<<<<<<<<<<		DATE_CHANGE
			group by acctkey 
			having sum(isnull(confirmedmovement,0)) > 0) ax 
			on a.acctkey = ax.acctkey
		inner
		join	HITRUST..mxportfoliotb p on p.portfoliokey = a.portfoliokey
		inner
		join	HITRUST..mxprofiletb pf on pf.profilekey = p.profilekey
		inner
		join	HITRUST..mxprofiletypetb pft on pft.profiletypekey = pf.profiletypekey
		inner
		join	HITRUST..mxunitclasstb uc on uc.unitclasskey = a.unitclasskey and uc.deleted = 0 and uc.classcode like '1%'
		inner
		join	HITRUST..mxfundtb f on f.fundkey = uc.fundkey and f.companykey = 1 AND FUNDCODE NOT LIKE '%DUMMY%'
		inner
		join	HITRUST..mxlangdesctb fn on fn.desckey = f.descid
		inner
		join	HITRUST..mxcurrencytb cc on cc.currencykey = f.currency
		inner
		join	BPSS..fx fx on fx.ccy = cc.currencyiso
		inner
		join	HITRUST..mxctracttb c on c.acctkey = a.acctkey and c.effdate < @dtDATETO												--<<<<<<<<<<<<<<<<<<<<<		DATE_CHANGE
		inner join hitrust..mxctstatustb cs on c.ctstatuskey = cs.ctstatuskey and c.company = cs.company
		inner join hitrust..mxlangdesctb csd on cs.descid = csd.desckey 
			and csd.description in ('priced','settled/registered','executed','upfront settled')
		inner
		join	HITRUST..mxtranfinstb tfhkd on tfhkd.transactionkey = c.ctractkey and tfhkd.currencykey = 1
		left
		join	HITRUST..mxtranfinstb tfdeal on tfdeal.transactionkey = c.ctractkey and tfdeal.currencykey = c.dealccy
		LEFT JOIN HITRUST..MXCTRACTSUBTYPETB st ON
				c.CTRACTSUBTYPE = st.CTRACTSUBTYPEKEY
		LEFT JOIN HITRUST..MXLANGDESCTB std ON 
				st.DESCID = std.DESCKEY
		LEFT
		JOIN	(select	LD2.DESCRIPTION AS PRODTYPE, UDF.XREFKEY AS FUNDKEY , UDF.CHARFIELD
			FROM	hitrust..mxuserdefinedfieldtb udf 
			left join hitrust..mxuserdefinedfieldtypetb udft on udft.userdefinedfieldtypekey = udf.userdefinedfieldtypekey and udft.deleted = 0
			left join hitrust..mxlangdesctb ld2 on ld2.desckey = udft.descid

			WHERE	udf.deleted = 0 and udf.xrefkeytype = 4
			AND	LD2.DESCRIPTION LIKE 'WMS-%') PT ON PT.FUNDKEY = F.FUNDKEY

		INNER JOIN	#ENTITY_PORTFOLIO_TB
			ON	#ENTITY_PORTFOLIO_TB.PORTFOLIOKEY = P.PORTFOLIOKEY
		--PC20180411 Exclude agent 3900-OCBD start
		LEFT join	HITRUST..mxcommsplittb cm with (nolock) on cm.ctractkey = c.ctractkey and commpercent = 100
		LEFT join	HITRUST..mxagenttb ag with (nolock) on ag.agentkey = cm.agentkey
		where substring (p.portfoliono, 9, 1)  IN ('1', '3', '4', '6', '9','0')
		and 
		f.fundcode not in
		('LMN0009','LMN0010','LMN0032','LMN0035','LMN0033', 'LMN0034',
		'LMB0001','LMB0002','LMB0003','LMB0004','LMB0005','LMB0006',
		'LMB0007','LMB0009','LMB0010','LMB0011','LMB0012','LMB0014',
		'LMB0015','LMB0016','LMB0017','LMB0018','LMB0019','LMB0020',
		'LMB0021','LMB0022','LMB0023','LMB0024','LMB0025','LMB0026',
		'LMB0027','LMB0028','LMB0029','LMB0030','LMB0031','LMB0032',
		'LMB0033','LMB0034','LMB0035','LMB0036','LMB0037','LMB0038',
		'LMB0039','LMB0040','LMB0041','LMB0042','LMB0043','LMB0044',
		'LMB0045','LMB0046','LMB0047','LMB0048','LMB0049','LMB0050',
		'DAN0002','DAN0003','DAN0004','DAN0005','DAN0010','DAN0011',
		'DAN0012','DAN0013','DAN0022','DAN0023','DAN0024','DAN0025',
		'DAN0026','DAN0027','DAN0028','DAN0029','DAN0030','DAN0031',
		'DAN0032','DAN0033','DAN0034','DAN0035','DAN0036','DAN0037',
		'DAN0038','DAN0039','DAN0040','DAN0041','DAN0042','DAN0043',
		'DAN0044','DAN0045','UBN0015','UBN0016','MSN0003','MSN0004',
		'MSN0005','MSN0006','MSN0007','MSN0008','LMP0006','LMP0007',
		'LMP0008','LMP0009','LMP0010','LMP0011','LMP0012','LMP0013',
		'LMP0014','LMP0015','LMP0016','LMP0017','LMP0018','LMP0019',
		'LMP0020','LMP0021','LMP0022','LMP0023','LMP0025')
		and	left(c.ctractno, 3) <> 'RED'	--KC20120410
		and	pf.relno not in ('UT029312', 'UN001862')		--KC20120410
		and isnull(ag.agentname,'') not like '3900%'	--PC20180411
		--GROUP BY P.PORTFOLIONO
		ORDER
		BY	producttype, #ENTITY_PORTFOLIO_TB.ENTITY, p.portfoliono	--,producttype , UC.CLASSCODE, F.FUNDCODE

	END
	IF (@TYPE= '11_DSB-HKMA-section-III-part2-DSB-details-CVM-new-fields')
	BEGIN
		select	distinct
			case
			when uc.classcode not like '1%' then 'Unit Trusts'
			when prodtype = 'WMS-PRODTYPE-BONDS' then 'Debt Securities'
			when prodtype = 'WMS-PRODTYPE-NOTES-AST-LNK' then 'Others'
			when prodtype = 'WMS-PRODTYPE-NOTES-CRD-LNK' then 'Credit-Linked'
			when prodtype = 'WMS-PRODTYPE-NOTES-EQT-LNK' then 'Equity-Linked'
			when prodtype = 'WMS-PRODTYPE-ELI' then 'Equity-Linked'		--KC20120410
			when prodtype = 'WMS-PRODTYPE-NOTES-PCP-PRO' then 'Others'
			when f.fundcode = 'LMN0034' then 'Others'
			when uc.classcode = '1B' then 'Debt Securities'
			when prodtype is null then 'Others'		--KC20110712
			end as ProductType, 
			p.portfoliono,
			#ENTITY_PORTFOLIO_TB.ENTITY,
			cc.currencyiso,
			bal as holdings,
			f.fundkey,
			f.fundcode, '"'+fn.description+'"' as prodname
			, c.ctractno, c.effdate, csd.description as ctstatus, c.nounit, c.price
			, c.reference	--, c.ssref as IpoApply
			, convert(decimal(15,2),tfhkd.net) as TxnAmtHKDold
			, case isnull(std.description, 'nosubtype')
				when 'TFRIN Transfer In' then
					case when c.effdate >= '2010/10/01' and c.effdate < '2011/01/01' then convert(decimal(15,2),nounit / tfdeal.fxrate)
					else convert(decimal(15,2),tfhkd.net)
					end
				else convert(decimal(15,2),tfhkd.net)
			  end as TxnAmtHKD
			, convert(decimal(15,2),tfdeal.net) as TxnAmtinDealCcyold
			, case isnull(std.description,'nosubtype')
				when 'TFRIN Transfer In' then 
					case when c.effdate >= '2010/10/01' and c.effdate < '2011/01/01' then nounit
					else convert(decimal(15,2),tfdeal.net)
					end
				else convert(decimal(15,2),tfdeal.net)
			  end as TxnAmtinDealCcy
			, tfdeal.fxrate as HKDtoDealFx
			--KC20121015[
			,left(isnull(ag.agentname,''),10) as AgentCode
			,c.ssref
			,left(isnull(sa.acno,''),20) as Settle_AC
			--KC20121015]
			, std.description as SubTypeDesc
		from	HITRUST..mxaccounttb a
		inner
		join	( select acctkey, max(effdate) as lasteffdate, sum(isnull(confirmedmovement,0)) as bal
			from	HITRUST..mxaccbalmovetb
			where	effdate < @dtDATETO																				--<<<<<<<<<<<<<<<<<<<<<		DATE_CHANGE
			group by acctkey 
			having sum(isnull(confirmedmovement,0)) > 0) ax 
			on a.acctkey = ax.acctkey
		inner
		join	HITRUST..mxportfoliotb p on p.portfoliokey = a.portfoliokey
		inner
		join	HITRUST..mxprofiletb pf on pf.profilekey = p.profilekey
		inner
		join	HITRUST..mxprofiletypetb pft on pft.profiletypekey = pf.profiletypekey
		inner
		join	HITRUST..mxunitclasstb uc on uc.unitclasskey = a.unitclasskey and uc.deleted = 0 and uc.classcode like '1%'
		inner
		join	HITRUST..mxfundtb f on f.fundkey = uc.fundkey and f.companykey = 1 AND FUNDCODE NOT LIKE '%DUMMY%'
		inner
		join	HITRUST..mxlangdesctb fn on fn.desckey = f.descid
		inner
		join	HITRUST..mxcurrencytb cc on cc.currencykey = f.currency
		inner
		join	BPSS..fx fx on fx.ccy = cc.currencyiso
		inner
		join	HITRUST..mxctracttb c on c.acctkey = a.acctkey and c.effdate < @dtDATETO										--<<<<<<<<<<<<<<<<<<<<<		DATE_CHANGE
		inner join hitrust..mxctstatustb cs on c.ctstatuskey = cs.ctstatuskey and c.company = cs.company
		inner join hitrust..mxlangdesctb csd on cs.descid = csd.desckey 
			and csd.description in ('priced','settled/registered','executed','upfront settled','0')
		inner
		join	HITRUST..mxtranfinstb tfhkd on tfhkd.transactionkey = c.ctractkey and tfhkd.currencykey = 1
		left
		join	HITRUST..mxtranfinstb tfdeal on tfdeal.transactionkey = c.ctractkey and tfdeal.currencykey = c.dealccy
		LEFT JOIN HITRUST..MXCTRACTSUBTYPETB st ON
				c.CTRACTSUBTYPE = st.CTRACTSUBTYPEKEY
		LEFT JOIN HITRUST..MXLANGDESCTB std ON 
				st.DESCID = std.DESCKEY
		LEFT
		JOIN	(select	LD2.DESCRIPTION AS PRODTYPE, UDF.XREFKEY AS FUNDKEY , UDF.CHARFIELD
			FROM	hitrust..mxuserdefinedfieldtb udf 
			left join hitrust..mxuserdefinedfieldtypetb udft on udft.userdefinedfieldtypekey = udf.userdefinedfieldtypekey and udft.deleted = 0
			left join hitrust..mxlangdesctb ld2 on ld2.desckey = udft.descid

			WHERE	udf.deleted = 0 and udf.xrefkeytype = 4
			AND	LD2.DESCRIPTION LIKE 'WMS-%') PT ON PT.FUNDKEY = F.FUNDKEY

		INNER JOIN	#ENTITY_PORTFOLIO_TB
			ON	#ENTITY_PORTFOLIO_TB.PORTFOLIOKEY = P.PORTFOLIOKEY
		left
		join	HITRUST..mxcommsplittb cm on cm.ctractkey = c.ctractkey and commpercent = 100
		left
		join	HITRUST..mxagenttb ag on ag.agentkey = cm.agentkey

		left
		join	HITRUST..mxsettlesplittb split on split.transactionkey = c.ctractkey
		left
		join	HITRUST..mxsettleactb sa on sa.settleackey = split.settlekey	
		where substring (p.portfoliono, 9, 1)  IN ('1', '3', '4', '6', '9','0')
		and 
		f.fundcode not in
		('LMN0009','LMN0010','LMN0032','LMN0035','LMN0033', 'LMN0034',
		'LMB0001','LMB0002','LMB0003','LMB0004','LMB0005','LMB0006',
		'LMB0007','LMB0009','LMB0010','LMB0011','LMB0012','LMB0014',
		'LMB0015','LMB0016','LMB0017','LMB0018','LMB0019','LMB0020',
		'LMB0021','LMB0022','LMB0023','LMB0024','LMB0025','LMB0026',
		'LMB0027','LMB0028','LMB0029','LMB0030','LMB0031','LMB0032',
		'LMB0033','LMB0034','LMB0035','LMB0036','LMB0037','LMB0038',
		'LMB0039','LMB0040','LMB0041','LMB0042','LMB0043','LMB0044',
		'LMB0045','LMB0046','LMB0047','LMB0048','LMB0049','LMB0050',
		'DAN0002','DAN0003','DAN0004','DAN0005','DAN0010','DAN0011',
		'DAN0012','DAN0013','DAN0022','DAN0023','DAN0024','DAN0025',
		'DAN0026','DAN0027','DAN0028','DAN0029','DAN0030','DAN0031',
		'DAN0032','DAN0033','DAN0034','DAN0035','DAN0036','DAN0037',
		'DAN0038','DAN0039','DAN0040','DAN0041','DAN0042','DAN0043',
		'DAN0044','DAN0045','UBN0015','UBN0016','MSN0003','MSN0004',
		'MSN0005','MSN0006','MSN0007','MSN0008','LMP0006','LMP0007',
		'LMP0008','LMP0009','LMP0010','LMP0011','LMP0012','LMP0013',
		'LMP0014','LMP0015','LMP0016','LMP0017','LMP0018','LMP0019',
		'LMP0020','LMP0021','LMP0022','LMP0023','LMP0025')
		and	left(c.ctractno, 3) <> 'RED'	--KC20120410
		and	pf.relno not in ('UT029312', 'UN001862')		--KC20120410
		and isnull(ag.agentname,'') not like '3900%'	--PC20180411
		ORDER
		BY	producttype, #ENTITY_PORTFOLIO_TB.ENTITY, p.portfoliono	--,producttype , UC.CLASSCODE, F.FUNDCODE
	END
	IF (@TYPE= '12_DSB-HKMA-section-III-part2-DSB-summary')
	BEGIN
		select	ProductType, count(ENTITY) as ENTITYCount, sum(TxnAmtHKD) as SumTxnAmtHKD
		from
		(
		select	distinct
			case
			when uc.classcode not like '1%' then 'Unit Trusts'
			when prodtype = 'WMS-PRODTYPE-BONDS' then 'Debt Securities'
			when prodtype = 'WMS-PRODTYPE-NOTES-AST-LNK' then 'Others'
			when prodtype = 'WMS-PRODTYPE-NOTES-CRD-LNK' then 'Credit-Linked'
			when prodtype = 'WMS-PRODTYPE-NOTES-EQT-LNK' then 'Equity-Linked'
			when prodtype = 'WMS-PRODTYPE-ELI' then 'Equity-Linked'		--KC20120410
			when prodtype = 'WMS-PRODTYPE-NOTES-PCP-PRO' then 'Others'
			when f.fundcode = 'LMN0034' then 'Others'
			when uc.classcode = '1B' then 'Debt Securities'
			when prodtype is null then 'Others'		--KC20110712
			end as ProductType, 
			#ENTITY_PORTFOLIO_TB.ENTITY
			, sum(case isnull(std.description, 'nosubtype')
				when 'TFRIN Transfer In' then
					case when c.effdate >= '2010/10/01' AND c.effdate < '2011/01/01' then convert(decimal(15,2),nounit / tfdeal.fxrate)
					else convert(decimal(15,2),tfhkd.net)
					end
				else convert(decimal(15,2),tfhkd.net)
			  end) as TxnAmtHKD
		from	HITRUST..mxaccounttb a
		inner
		join	( select acctkey, max(effdate) as lasteffdate, sum(isnull(confirmedmovement,0)) as bal
			from	HITRUST..mxaccbalmovetb
			where	effdate < @dtDATETO																						--<<<<<<<<<<<<<<<<<<<<<		DATE_CHANGE
			group by acctkey 
			having sum(isnull(confirmedmovement,0)) > 0) ax 
			on a.acctkey = ax.acctkey
		inner
		join	HITRUST..mxportfoliotb p on p.portfoliokey = a.portfoliokey
		inner
		join	HITRUST..mxprofiletb pf on pf.profilekey = p.profilekey
		inner
		join	HITRUST..mxprofiletypetb pft on pft.profiletypekey = pf.profiletypekey
		inner
		join	HITRUST..mxunitclasstb uc on uc.unitclasskey = a.unitclasskey and uc.deleted = 0 and uc.classcode like '1%'
		inner
		join	HITRUST..mxfundtb f on f.fundkey = uc.fundkey and f.companykey = 1 AND FUNDCODE NOT LIKE '%DUMMY%'
		inner
		join	HITRUST..mxlangdesctb fn on fn.desckey = f.descid
		inner
		join	HITRUST..mxcurrencytb cc on cc.currencykey = f.currency
		--/*
		inner
		join	BPSS..fx fx on fx.ccy = cc.currencyiso
		inner
		join	HITRUST..mxctracttb c on c.acctkey = a.acctkey and c.effdate < @dtDATETO												--<<<<<<<<<<<<<<<<<<<<<		DATE_CHANGE
		inner join hitrust..mxctstatustb cs on c.ctstatuskey = cs.ctstatuskey and c.company = cs.company
		inner join hitrust..mxlangdesctb csd on cs.descid = csd.desckey 
			and csd.description in ('priced','settled/registered','executed','upfront settled')
		inner
		join	HITRUST..mxtranfinstb tfhkd on tfhkd.transactionkey = c.ctractkey and tfhkd.currencykey = 1
		left
		join	HITRUST..mxtranfinstb tfdeal on tfdeal.transactionkey = c.ctractkey and tfdeal.currencykey = c.dealccy
		LEFT JOIN HITRUST..MXCTRACTSUBTYPETB st ON
				c.CTRACTSUBTYPE = st.CTRACTSUBTYPEKEY
		LEFT JOIN HITRUST..MXLANGDESCTB std ON 
				st.DESCID = std.DESCKEY
		LEFT
		JOIN	(select	LD2.DESCRIPTION AS PRODTYPE, UDF.XREFKEY AS FUNDKEY , UDF.CHARFIELD
			FROM	hitrust..mxuserdefinedfieldtb udf 
			left join hitrust..mxuserdefinedfieldtypetb udft on udft.userdefinedfieldtypekey = udf.userdefinedfieldtypekey and udft.deleted = 0
			left join hitrust..mxlangdesctb ld2 on ld2.desckey = udft.descid
			WHERE	udf.deleted = 0 and udf.xrefkeytype = 4
			AND	LD2.DESCRIPTION LIKE 'WMS-%') PT ON PT.FUNDKEY = F.FUNDKEY

		INNER JOIN	#ENTITY_PORTFOLIO_TB
			ON	#ENTITY_PORTFOLIO_TB.PORTFOLIOKEY = P.PORTFOLIOKEY
		--PC20180411 Exclude agent 3900-OCBD start
		LEFT join	HITRUST..mxcommsplittb cm with (nolock) on cm.ctractkey = c.ctractkey and commpercent = 100
		LEFT join	HITRUST..mxagenttb ag with (nolock) on ag.agentkey = cm.agentkey
		where substring (p.portfoliono, 9, 1)  IN ('1', '3', '4', '6', '9','0')
		and 
		f.fundcode not in
		('LMN0009','LMN0010','LMN0032','LMN0035','LMN0033', 'LMN0034',
		'LMB0001','LMB0002','LMB0003','LMB0004','LMB0005','LMB0006',
		'LMB0007','LMB0009','LMB0010','LMB0011','LMB0012','LMB0014',
		'LMB0015','LMB0016','LMB0017','LMB0018','LMB0019','LMB0020',
		'LMB0021','LMB0022','LMB0023','LMB0024','LMB0025','LMB0026',
		'LMB0027','LMB0028','LMB0029','LMB0030','LMB0031','LMB0032',
		'LMB0033','LMB0034','LMB0035','LMB0036','LMB0037','LMB0038',
		'LMB0039','LMB0040','LMB0041','LMB0042','LMB0043','LMB0044',
		'LMB0045','LMB0046','LMB0047','LMB0048','LMB0049','LMB0050',
		'DAN0002','DAN0003','DAN0004','DAN0005','DAN0010','DAN0011',
		'DAN0012','DAN0013','DAN0022','DAN0023','DAN0024','DAN0025',
		'DAN0026','DAN0027','DAN0028','DAN0029','DAN0030','DAN0031',
		'DAN0032','DAN0033','DAN0034','DAN0035','DAN0036','DAN0037',
		'DAN0038','DAN0039','DAN0040','DAN0041','DAN0042','DAN0043',
		'DAN0044','DAN0045','UBN0015','UBN0016','MSN0003','MSN0004',
		'MSN0005','MSN0006','MSN0007','MSN0008','LMP0006','LMP0007',
		'LMP0008','LMP0009','LMP0010','LMP0011','LMP0012','LMP0013',
		'LMP0014','LMP0015','LMP0016','LMP0017','LMP0018','LMP0019',
		'LMP0020','LMP0021','LMP0022','LMP0023','LMP0025')

		and	left(c.ctractno, 3) <> 'RED'	--KC20120410
		and	pf.relno not in ('UT029312', 'UN001862')		--KC20120410
		and isnull(ag.agentname,'') not like '3900%'	--PC20180411
		group
		by	case
			when uc.classcode not like '1%' then 'Unit Trusts'
			when prodtype = 'WMS-PRODTYPE-BONDS' then 'Debt Securities'
			when prodtype = 'WMS-PRODTYPE-NOTES-AST-LNK' then 'Others'
			when prodtype = 'WMS-PRODTYPE-NOTES-CRD-LNK' then 'Credit-Linked'
			when prodtype = 'WMS-PRODTYPE-NOTES-EQT-LNK' then 'Equity-Linked'
			when prodtype = 'WMS-PRODTYPE-ELI' then 'Equity-Linked'		--KC20120410
			when prodtype = 'WMS-PRODTYPE-NOTES-PCP-PRO' then 'Others'
			when f.fundcode = 'LMN0034' then 'Others'
			when uc.classcode = '1B' then 'Debt Securities'
			when prodtype is null then 'Others'		--KC20110712
			end
			,#ENTITY_PORTFOLIO_TB.ENTITY
		) x	group by ProductType

	END
END

GO
/****** Object:  StoredProcedure [dbo].[sp_Rpt_HKMA_WMD20142]    Script Date: 5/17/2022 9:57:52 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_Rpt_HKMA_WMD20142]
(
@pXML XML
)
AS
/*
 sqlcmd -s, -W -Q "set nocount on; EXEC Master..sp_Rpt_HKMA_Half_Year_Retrieve_Data @pXML ='<ROOT><TYPE>02_DSB-HKMA-section-I-DSB-details</TYPE><FrEffdate>2020/07/01</FrEffdate><ToEffdate>2021/01/01</ToEffdate></ROOT>' '" | findstr /v /c:"-" /b > "C:\temp\20210315\result5.txt"

DECLARE @pRtnXML XML
EXEC [sp_Rpt_HKMA_WMD20142] '
<ROOT>
		<TYPE>SectionI</TYPE> 
</ROOT>' 

DECLARE @pRtnXML XML
EXEC [sp_Rpt_HKMA_Half_Year_Retrieve_Data] '
<ROOT>
		<TYPE>02.dahsingVolume_bond</TYPE>
		<FrEffdate>2019/12/31</FrEffdate>
		<ToEffdate>2020/07/01</ToEffdate>
</ROOT>' 

*/
BEGIN
	DECLARE @TYPE NVARCHAR(200)
	DECLARE @sYMD_para1 NVARCHAR(8)
	DECLARE @sYMD_para2 NVARCHAR(8)
	DECLARE @sDATETO	VARCHAR(10)
	DECLARE @sFrEffdate NVARCHAR(10)
	DECLARE @sToEffdate NVARCHAR(10)
	DECLARE @dtFrEffdate DATETIME
	DECLARE @dtToEffdate DATETIME
	DECLARE @dtDATETO DATETIME

	DECLARE @DATEFROM 	VARCHAR(10)
	DECLARE @DATETO		VARCHAR(10)

	SELECT 
		@TYPE			= T.C.value('TYPE[1]', 'NVARCHAR(200)'),
		@sYMD_para1			= T.C.value('YMD_para1[1]', 'NVARCHAR(8)'),
		@sYMD_para2			= T.C.value('YMD_para2[1]', 'NVARCHAR(8)'),
		@sDATETO			= T.C.value('DATETO[1]', 'NVARCHAR(10)'),
		@sFrEffdate			= T.C.value('FrEffdate[1]', 'NVARCHAR(10)'),
		@sToEffdate			= T.C.value('ToEffdate[1]', 'NVARCHAR(10)')
		FROM @pXML.nodes('/ROOT') T(C)

	IF (@sFrEffdate IS NOT NULL)
	BEGIN
		SET @dtFrEffdate = (SELECT CONVERT(DATETIME,@sFrEffdate))
	END
	IF (@sToEffdate IS NOT NULL)
	BEGIN
		SET @dtToEffdate = (SELECT CONVERT(DATETIME,@sToEffdate))
	END
	IF (@sDATETO IS NOT NULL)
	BEGIN
		SET @dtDATETO = (SELECT CONVERT(DATETIME,@sDATETO))
	END

	IF OBJECT_ID('tempdb..#ENTITY_PORTFOLIO_TB') IS NOT NULL DROP TABLE #ENTITY_PORTFOLIO_TB
	IF OBJECT_ID('tempdb..#tmp_mxpricetb') IS NOT NULL DROP TABLE #tmp_mxpricetb

	SELECT		PORTFOLIOKEY=0, ENTITY=REPLICATE('A',50), OWNER=0
	INTO		#ENTITY_PORTFOLIO_TB

	TRUNCATE TABLE	#ENTITY_PORTFOLIO_TB
	INSERT INTO	#ENTITY_PORTFOLIO_TB
	EXEC HITRUST..SP_ENTITY

 	SELECT fundkey, max(pricedate) as maxpricedate
	INTO #tmp_mxpricetb
	FROM HITRUST..mxpricetb  WITH (NOLOCK)
	WHERE deleted = 0 and pricedate <  @dtDATETO															--<<<<<<<<<<<<<<<<<<<<<		DATE_CHANGE
	GROUP BY fundkey
  
   IF (@dtDATETO IS NULL AND @dtFrEffdate IS NULL AND @dtToEffdate IS NULL)
  BEGIN
	  IF (MONTH(GETDATE())<=6)
	  BEGIN
		SET	@dtDATETO = CONVERT(DATETIME, CONVERT(NVARCHAR,YEAR(GETDATE())) + '/01/01')
	  END
	  ELSE
	  BEGIN
		SET	@dtDATETO = CONVERT(DATETIME, CONVERT(NVARCHAR,YEAR(GETDATE())) + '/07/01')
	  END

	  SET @dtToEffdate = DATEADD(DAY,-1,DATEADD(MONTH,6,@dtDATETO))
	  SET @dtFrEffdate  = @dtDATETO
  END 
		SET @DATEFROM = CONVERT(NVARCHAR,@dtFrEffdate,111)
		SET @DATETO =  CONVERT(NVARCHAR,@dtToEffdate,111)
 
		SELECT FUNDCODE INTO #tmp_exclude_fundcode FROM HITRUST..MXFUNDTB WHERE FUNDCODE IN (
		'LMN0009','LMN0010','LMN0032','LMN0035','LMN0033', 'LMN0034',
		'LMB0001','LMB0002','LMB0003','LMB0004','LMB0005','LMB0006',
		'LMB0007','LMB0009','LMB0010','LMB0011','LMB0012','LMB0014',
		'LMB0015','LMB0016','LMB0017','LMB0018','LMB0019','LMB0020',
		'LMB0021','LMB0022','LMB0023','LMB0024','LMB0025','LMB0026',
		'LMB0027','LMB0028','LMB0029','LMB0030','LMB0031','LMB0032',
		'LMB0033','LMB0034','LMB0035','LMB0036','LMB0037','LMB0038',
		'LMB0039','LMB0040','LMB0041','LMB0042','LMB0043','LMB0044',
		'LMB0045','LMB0046','LMB0047','LMB0048','LMB0049','LMB0050',
		'DAN0002','DAN0003','DAN0004','DAN0005','DAN0010','DAN0011',
		'DAN0012','DAN0013','DAN0022','DAN0023','DAN0024','DAN0025',
		'DAN0026','DAN0027','DAN0028','DAN0029','DAN0030','DAN0031',
		'DAN0032','DAN0033','DAN0034','DAN0035','DAN0036','DAN0037',
		'DAN0038','DAN0039','DAN0040','DAN0041','DAN0042','DAN0043',
		'DAN0044','DAN0045','UBN0015','UBN0016','MSN0003','MSN0004',
		'MSN0005','MSN0006','MSN0007','MSN0008','LMP0006','LMP0007',
		'LMP0008','LMP0009','LMP0010','LMP0011','LMP0012','LMP0013',
		'LMP0014','LMP0015','LMP0016','LMP0017','LMP0018','LMP0019',
		'LMP0020','LMP0021','LMP0022','LMP0023','LMP0025')

	  IF (@TYPE = 'SectionI')
	  BEGIN
			--SET @DATEFROM = '2021/01/01'
			--SET @DATETO = '2021/06/30'

			--select @DATEFROM = case when month(getdate())>6 then convert(varchar(4),year(getdate())) + '/07/01'
			--					   else convert(varchar(4),year(getdate())-1) + '/01/01' end

			--select @DATETO = case when month(getdate())>6 then convert(varchar(4),year(getdate())) + '/12/31'
			--					   else convert(varchar(4),year(getdate())-1) + '/07/01' end

			--select @DATEFROM
			--select @DATETO

			Truncate table DSBDB..TB_HKMA_Survey_Retail_Section1_Detail
			Truncate table DSBDB..TB_HKMA_Survey_Retail_Section1_Summary


			IF OBJECT_ID('tempdb..#SectionI_Result') IS NOT NULL DROP TABLE #SectionI_Result
			IF OBJECT_ID('tempdb..#SectionI_Result2') IS NOT NULL DROP TABLE #SectionI_Result2
			IF OBJECT_ID('tempdb..#SectionI_Result3') IS NOT NULL DROP TABLE #SectionI_Result3

			select	--distinct
				case f.companykey
				when 1 then '6'
				when 2 then '3'
				end as BankCode
				,left(c.ctractno,12) as Ctract_No
				,tf.COMMISSION as COMM
				,left(replace(R.SSNO,'-',space(7)),100) as All_Owners_ID
				,left(p.portfoliono,12) as Port_No
				,'"' + left(p.portfolioname,50) + '"' as Port_Name
				,left(ag.agentname,10) as Agent
				,convert(char(10),c.effdate,111) as Eff_Date
				,convert(char(10),c.orderdate,111) as Order_Date
				,uc.classcode
				,f.fundcode
				,'"' + fn.description + '"' as fundname_eng
				,left(csd.description,20) as Order_Status
				, convert(decimal(10,2),isnull(c.nounit,0)) as Notional_Amt
				, c.reference
				, c.ssref
				,std.description
				,convert(decimal(12,6),isnull(c.price,0)) as Price
				,left(sa.acno,20) as Settle_AC
				,convert(decimal(12,2),isnull(tf.net,0)) as Settle_Amt_HKD
				,convert(decimal(12,2),isnull(tfx.net,0)) as Settle_Amt
				,Settle_Amt_HKD_Summary = tf.net
				,
				case
				when uc.classcode not like '1%' then 'Unit Trusts'
				when prodtype = 'WMS-PRODTYPE-BONDS' then 'Debt Securities'
				when prodtype = 'WMS-PRODTYPE-NOTES-AST-LNK' then 'Others'
				when prodtype = 'WMS-PRODTYPE-NOTES-CRD-LNK' then 'Credit-Linked'
				when prodtype = 'WMS-PRODTYPE-NOTES-EQT-LNK' then 'Equity-Linked'
				when prodtype = 'WMS-PRODTYPE-ELI' then 'Equity-Linked'		--KC20120410
				when prodtype = 'WMS-PRODTYPE-NOTES-PCP-PRO' then 'Others'
				when f.fundcode = 'LMN0034' then 'Others'
				when uc.classcode = '1B' then 'Debt Securities'
				when prodtype is null then 'null'
				end as ProductType
				,case when complex.Productcode is not null then 'Y' else 'N' end as Complex
				,left(R.SSNO,20) as Customer1
				,substring(R.SSNO,21,20) as Customer2
				,substring(R.SSNO,41,20) as Customer3
				,substring(R.SSNO,61,20) as Customer4
				,substring(R.SSNO,81,20) as Customer5
				,EFFDATE
			into #SectionI_Result
			from	hitrust..mxctracttb c with (nolock)
			inner join	hitrust..mxctstatustb cs with (nolock) on cs.ctstatuskey = c.ctstatuskey
			inner join	hitrust..mxlangdesctb csd with (nolock) on csd.desckey = cs.descid
			inner join	hitrust..mxaccounttb a with (nolock) on c.acctkey = a.acctkey
			inner join	hitrust..mxunitclasstb uc with (nolock) on uc.unitclasskey = a.unitclasskey and uc.deleted = 0
			inner join	hitrust..mxfundtb f with (nolock) on uc.fundkey = f.fundkey AND FUNDCODE NOT LIKE '%DUMMY%'
			inner join	hitrust..mxlangdesctb fn with (nolock) on fn.desckey = f.descid
			inner join	hitrust..mxcurrencytb ccy with (nolock) on ccy.currencykey = c.dealccy
			inner join	hitrust..mxportfoliotb p with (nolock) on a.portfoliokey = p.portfoliokey
			inner join	bpss..tb_restricted_txns_all_IDs R with (nolock) on R.portkey = p.portfoliokey
			inner join	hitrust..mxprofiletb u with (nolock) on u.profilekey = p.profilekey
			inner join	hitrust..mxcommsplittb cm with (nolock) on cm.ctractkey = c.ctractkey and commpercent = 100
			inner join	hitrust..mxagenttb ag with (nolock) on ag.agentkey = cm.agentkey
			inner join	hitrust..mxsettlesplittb split with (nolock) on split.transactionkey = c.ctractkey
			inner join	hitrust..mxsettleactb sa with (nolock) on sa.settleackey = split.settlekey
			inner join	hitrust..mxtranfinstb tf with (nolock) on tf.transactionkey = c.ctractkey and tf.currencykey = 1
			left join	hitrust..mxtranfinstb tfx with (nolock) on tfx.transactionkey = c.ctractkey and tfx.currencykey = c.dealccy and tfx.currencykey <> 1
			left join	hitrust..mxctractsubtypetb st with (nolock) on c.ctractsubtype = st.ctractsubtypekey
			left join	hitrust..mxlangdesctb std with (nolock) on std.desckey = st.descid
			LEFT JOIN	(select	LD2.DESCRIPTION AS PRODTYPE, UDF.XREFKEY AS FUNDKEY , UDF.CHARFIELD
				FROM	hitrust..mxuserdefinedfieldtb udf with (nolock)
				left join hitrust..mxuserdefinedfieldtypetb udft with (nolock) on udft.userdefinedfieldtypekey = udf.userdefinedfieldtypekey and udft.deleted = 0
				left join hitrust..mxlangdesctb ld2 with (nolock) on ld2.desckey = udft.descid
				WHERE	udf.deleted = 0 and udf.xrefkeytype = 4
				AND	LD2.DESCRIPTION LIKE 'WMS-%') PT ON PT.FUNDKEY = F.FUNDKEY
			left join DSBDB..vw_udf_AGENT_CODE TB_AGENT_CODE	WITH (NOLOCK) ON TB_AGENT_CODE.ctractkey = c.CTRACTKEY 
			left join dsbdb..TB_IMPORT_COMPLEX_PRODUCT_MASTER complex with (nolock) on complex.Productcode = f.FUNDCODE and convert(varchar(10),EFFDATE,111)>= complex.frdate and convert(varchar(10),EFFDATE,112)<= complex.Todate
			where substring (p.portfoliono, 9, 1)  IN ('1', '3', '4', '6', '9','0')
			and f.companykey = 1 
			and csd.description in ('Priced', 'Settled/Registered')
			and	trancodekey in ( 'BaSales','WrSales','BaSwitchIn')
			and	convert(varchar(10),c.effdate,111) >= @DATEFROM								--<<<<<<<<<<<<<<<<<<<<<		DATE_CHANGE
			and convert(varchar(10),c.effdate,111) <= @DATETO									--<<<<<<<<<<<<<<<<<<<<<		DATE_CHANGE
			and	(std.description is null or std.description <> 'TFRIN Transfer In')
			and	(reference is null or reference <> 'conversion in')
			and	(reference is null or reference <> 'adjustment')	--KC20120111
			and	left(c.ctractno, 3) <> 'RED'	--KC20120410
			and	u.relno not in ('UT029312', 'UN001862')		--KC20120410
			--and ag.agentname not like '3900%'	--PC20180411
			and ISNULL(TB_AGENT_CODE.charfield,ag.AGENTNAME) not like '3900%'

			/*Map PI flag*/
			--'Y' = PI customer and empty
			--'N' = non PI customer
			--'T' = empty
			select R.*
			,case when isnull(R.Customer1, '') <> '' and PI1.CustomerID is not null then 'Y'
				  when isnull(R.Customer1, '') <> '' and PI1.CustomerID is null then 'N'
				  when isnull(R.Customer1, '') = '' then 'T' end as flag1
			,case when isnull(R.Customer2, '') <> '' and PI2.CustomerID is not null then 'Y'
				  when isnull(R.Customer2, '') <> '' and PI2.CustomerID is null then 'N'
				  when isnull(R.Customer2, '') = '' then 'T' end as flag2
			,case when isnull(R.Customer3, '') <> '' and PI3.CustomerID is not null then 'Y'
				  when isnull(R.Customer3, '') <> '' and PI3.CustomerID is null then 'N'
				  when isnull(R.Customer3, '') = '' then 'T' end as flag3
			,case when isnull(R.Customer4, '') <> '' and PI4.CustomerID is not null then 'Y'
				  when isnull(R.Customer4, '') <> '' and PI4.CustomerID is null then 'N'
				  when isnull(R.Customer4, '') = '' then 'T' end as flag4
			,case when isnull(R.Customer5, '') <> '' and PI5.CustomerID is not null then 'Y'
				  when isnull(R.Customer5, '') <> '' and PI5.CustomerID is null then 'N'
				  when isnull(R.Customer5, '') = '' then 'T' end as flag5
			into #SectionI_Result2
			from #SectionI_Result R
			left join dsbdb..TB_IMPORT_CSS_DAY_PI PI1 with (nolock) on PI1.CustomerID = R.Customer1 and convert(char(8),EFFDATE,112)>= PI1.frdate and convert(char(8),EFFDATE,112)<= PI1.Todate
			left join dsbdb..TB_IMPORT_CSS_DAY_PI PI2 with (nolock) on PI2.CustomerID = R.Customer2 and convert(char(8),EFFDATE,112)>= PI2.frdate and convert(char(8),EFFDATE,112)<= PI2.Todate
			left join dsbdb..TB_IMPORT_CSS_DAY_PI PI3 with (nolock) on PI3.CustomerID = R.Customer3 and convert(char(8),EFFDATE,112)>= PI3.frdate and convert(char(8),EFFDATE,112)<= PI3.Todate
			left join dsbdb..TB_IMPORT_CSS_DAY_PI PI4 with (nolock) on PI4.CustomerID = R.Customer4 and convert(char(8),EFFDATE,112)>= PI4.frdate and convert(char(8),EFFDATE,112)<= PI4.Todate
			left join dsbdb..TB_IMPORT_CSS_DAY_PI PI5 with (nolock) on PI5.CustomerID = R.Customer5 and convert(char(8),EFFDATE,112)>= PI5.frdate and convert(char(8),EFFDATE,112)<= PI5.Todate

			select * 
			into #SectionI_Result3
			from #SectionI_Result2
			where flag1 = 'N' or flag2 = 'N' or flag3 = 'N' or flag4 = 'N' or flag5 = 'N'

			Insert into DSBDB..TB_HKMA_Survey_Retail_Section1_Detail
			select BankCode
			,Ctract_No
			,COMM
			,All_Owners_ID
			,Port_No
			,Port_Name
			,Agent
			,Eff_Date
			,Order_Date
			,CLASSCODE
			,FUNDCODE
			,fundname_eng
			,Order_Status
			,Notional_Amt
			,REFERENCE
			,SSREF
			,DESCRIPTION
			,Price
			,Settle_AC
			,Settle_Amt_HKD
			,Settle_Amt
			,Settle_Amt_HKD_Summary
			,ProductType
			,Complex
			from #SectionI_Result3
			order by Ctract_No

			/*Details*/
			Select BankCode
			,Ctract_No
			,COMM
			,All_Owners_ID
			,Port_No
			,Port_Name
			,Agent
			,Eff_Date
			,Order_Date
			,CLASSCODE
			,FUNDCODE
			,fundname_eng
			,Order_Status
			,Notional_Amt
			,REFERENCE
			,SSREF
			,DESCRIPTION
			,Price
			,Settle_AC
			,Settle_Amt_HKD
			,Settle_Amt
			,ProductType
			,Complex
			from DSBDB..TB_HKMA_Survey_Retail_Section1_Detail
			order by Ctract_No

			/*Summary*/
			--Update non UT product complex flag to N, as no need to report complex/non complex for non UT product
			UPDATE #SectionI_Result3
			SET Complex = 'N'
			where ProductType<>'Unit Trusts' 

			Insert into DSBDB..TB_HKMA_Survey_Retail_Section1_Summary
			SELECT	Settle_Amt_HKD_SUM = SUM(Settle_Amt_HKD_Summary)
					,[Mutual funds/UT Non-Complex]=	RTRIM(CASE WHEN ProductType='Unit Trusts' and complex = 'N' THEN CAST(COUNT(*) AS CHAR) ELSE '' END)
					,[Mutual funds/UT Complex]=	RTRIM(CASE WHEN ProductType='Unit Trusts' and complex = 'Y' THEN CAST(COUNT(*) AS CHAR) ELSE '' END)
					,[Credit-linked]=	RTRIM(CASE WHEN ProductType='Credit-Linked' THEN CAST(COUNT(*) AS CHAR) ELSE '' END)
					,[Equity-linked]=	RTRIM(CASE WHEN ProductType='Equity-Linked' THEN CAST(COUNT(*) AS CHAR) ELSE '' END)
					,[Equity (ac/de)cumulators] = ''
					,[Interest rate-linked] = ''
					,[Debt securities]=	RTRIM(CASE WHEN ProductType='Debt Securities' THEN CAST(COUNT(*) AS CHAR) ELSE '' END)
					,[Others]=		RTRIM(CASE WHEN ProductType='Others' THEN CAST(COUNT(*) AS CHAR) ELSE '' END)
					,[Exception]=		RTRIM(CASE WHEN ProductType='NULL' THEN CAST(COUNT(*) AS CHAR) ELSE '' END)
			FROM		#SectionI_Result3
			GROUP BY	ProductType,Complex
	  END
	  IF (@TYPE = 'SectionII')
	  BEGIN
		
			--SELECT		PORTFOLIOKEY=0, ENTITY=REPLICATE('A',50), OWNER=0
			--INTO		#ENTITY_PORTFOLIO_TB

			--TRUNCATE TABLE	#ENTITY_PORTFOLIO_TB

			--INSERT INTO	#ENTITY_PORTFOLIO_TB
			--EXEC SP_ENTITY

			--*********************************************************************************************
			Truncate table dsbdb..TB_HKMA_Survey_Retail_Section3_Part1_Summary
			Truncate table dsbdb..TB_HKMA_Survey_Retail_Section3_Part1_Detail

			IF OBJECT_ID('tempdb..#SectionII_Temp') IS NOT NULL DROP TABLE #SectionII_Temp
			IF OBJECT_ID('tempdb..#SectionII_Balance') IS NOT NULL DROP TABLE #SectionII_Balance
			IF OBJECT_ID('tempdb..#SectionII_Result2') IS NOT NULL DROP TABLE #SectionII_Result2
			IF OBJECT_ID('tempdb..#SectionII_Result3') IS NOT NULL DROP TABLE #SectionII_Result3


			select tb_bal.acctkey, max(tb_bal.effdate) as lasteffdate, sum(isnull(tb_bal.confirmedmovement,0)) as bal
			into #SectionII_Balance
			from	HITRUST..mxaccbalmovetb tb_bal with (nolock) 
			inner join	HITRUST..mxctracttb c with (nolock) on tb_bal.CTRACTKEY = c.CTRACTKEY
			left join DSBDB..vw_udf_AGENT_CODE TB_AGENT_CODE	WITH (NOLOCK) ON TB_AGENT_CODE.ctractkey = c.CTRACTKEY 
			left join hitrust..MXCOMMSPLITTB tb_comm with (nolock) on tb_comm.CTRACTKEY = c.CTRACTKEY
			left join HITRUST..MXAGENTTB TB_AGENT WITH (NOLOCK) ON TB_AGENT.AGENTKEY = tb_comm.AGENTKEY
			where	convert(varchar(10),tb_bal.effdate,111) <= @DATETO
			and ISNULL(TB_AGENT_CODE.charfield,TB_AGENT.AGENTNAME) not like '3900%'
			group by tb_bal.acctkey 
			having sum(isnull(tb_bal.confirmedmovement,0)) > 0


			select	distinct
				case
				when uc.classcode not like '1%' then 'Unit Trusts'
				when prodtype = 'WMS-PRODTYPE-BONDS' then 'Debt Securities'
				when prodtype = 'WMS-PRODTYPE-NOTES-AST-LNK' then 'Others'
				when prodtype = 'WMS-PRODTYPE-NOTES-CRD-LNK' then 'Credit-Linked'
				when prodtype = 'WMS-PRODTYPE-NOTES-EQT-LNK' then 'Equity-Linked'
				when prodtype = 'WMS-PRODTYPE-ELI' then 'Equity-Linked'		--KC20120410
				when prodtype = 'WMS-PRODTYPE-NOTES-PCP-PRO' then 'Others'
				when f.fundcode = 'LMN0034' then 'Others'
				when uc.classcode = '1B' then 'Debt Securities'
				when prodtype is null then 'null'
				end as ProductType,
				p.portfoliono,
				ID.SSNO as ENTITY,
				cc.currencyiso,
				pp.navprice,
				fx.rate as fxrate, 
				HKDamt_round = round(fx.rate * bal * pp.navprice,0),
				HKDamt = fx.rate * bal * pp.navprice,
				bal as holdings,
				f.fundkey,
				f.fundcode,
				'"' + fn.description + '"' as prodname
				,left(ID.SSNO,20) as Customer1
				,substring(ID.SSNO,21,20) as Customer2
				,substring(ID.SSNO,41,20) as Customer3
				,substring(ID.SSNO,61,20) as Customer4
				,substring(ID.SSNO,81,20) as Customer5
				,case when complex.Productcode is not null then 'Y' else 'N' end as Complex
				,case when SFC.SFC_Authorization ='Y' then 'Y'
					  when SFC.SFC_Authorization ='N' then 'N'
					  else 'N/A' end as SFC_Authorization
			into #SectionII_Temp
			from	HITRUST..mxaccounttb a with (nolock)
			inner join #SectionII_Balance ax on a.acctkey = ax.acctkey
			--inner join	( select acctkey, max(effdate) as lasteffdate, sum(isnull(confirmedmovement,0)) as bal
			--	from	mxaccbalmovetb with (nolock)
			--	where	convert(varchar(10),effdate,111) <= @DATETO																				--<<<<<<<<<<<<<<<<<<<<<		DATE_CHANGE
			--	group by acctkey 
			--	having sum(isnull(confirmedmovement,0)) > 0) ax 
			--	on a.acctkey = ax.acctkey
			inner join	HITRUST..mxportfoliotb p with (nolock) on p.portfoliokey = a.portfoliokey
			inner join	HITRUST..mxprofiletb pf with (nolock) on pf.profilekey = p.profilekey
			inner join	HITRUST..mxprofiletypetb pft with (nolock) on pft.profiletypekey = pf.profiletypekey
			--inner join	mxlangdesctb pftd on pftd.desckey = pft.descid and pftd.description <> 'Private Banking'
			inner join	HITRUST..mxunitclasstb uc with (nolock) on uc.unitclasskey = a.unitclasskey and uc.deleted = 0 and uc.classcode not like '1%'
			inner join	HITRUST..mxfundtb f with (nolock) on f.fundkey = uc.fundkey and f.companykey = 1 AND FUNDCODE NOT LIKE '%DUMMY%'
			inner join	HITRUST..mxlangdesctb fn with (nolock) on fn.desckey = f.descid
			inner join	HITRUST..mxcurrencytb cc with (nolock) on cc.currencykey = f.currency
			--/*
			inner join	bpss..fx fx with (nolock) on fx.ccy = cc.currencyiso
			inner join
				(select	fp.fundkey, fp.navprice
				from	HITRUST..mxpricetb fp with (nolock)
				inner	join
				(
					select	fundkey, max(pricedate) as maxpricedate
					from	HITRUST..mxpricetb with (nolock)
					where	deleted = 0 and convert(varchar(10),pricedate,111) <= @DATETO															--<<<<<<<<<<<<<<<<<<<<<		DATE_CHANGE
					group
					by	fundkey
				)	mp
				on	mp.fundkey = fp.fundkey and mp.maxpricedate = fp.pricedate
				) pp on pp.fundkey = f.fundkey
			--*/
			LEFT JOIN	(select	LD2.DESCRIPTION AS PRODTYPE, UDF.XREFKEY AS FUNDKEY , UDF.CHARFIELD
				FROM	hitrust..mxuserdefinedfieldtb udf with (nolock) 
				left join hitrust..mxuserdefinedfieldtypetb udft with (nolock) on udft.userdefinedfieldtypekey = udf.userdefinedfieldtypekey and udft.deleted = 0
				left join hitrust..mxlangdesctb ld2 with (nolock) on ld2.desckey = udft.descid
				WHERE	udf.deleted = 0 and udf.xrefkeytype = 4
				AND	LD2.DESCRIPTION LIKE 'WMS-%') PT ON PT.FUNDKEY = F.FUNDKEY
			INNER JOIN	bpss..tb_restricted_txns_all_IDs ID ON	ID.PortKey = P.PORTFOLIOKEY
			left join dsbdb..TB_IMPORT_COMPLEX_PRODUCT_MASTER complex with (nolock) on complex.Productcode = f.FUNDCODE and @DATETO>= convert(char(10),complex.frdate,111) and @DATETO <= convert(char(10),complex.Todate,111)
			left join dsbdb..TB_SFC_Authorization SFC with (nolock) on SFC.Product_Code = f.FUNDCODE and f.COMPANYKEY =1
			where substring (p.portfoliono, 9, 1)  IN ('1', '3', '4', '6', '9','0')
			and 
			f.fundcode not in (SELECT FUNDCODE FROM #tmp_exclude_fundcode)
			and	pf.relno not in ('UT029312', 'UN001862')		--KC20120410
			--AND TB_AGENT.AGENTNAME NOT LIKE '3900%'	--PC20201012


			--select * from #Temp

			/*Map PI flag*/
			--'Y' = PI customer and empty
			--'N' = non PI customer
			--'T' = empty
			select R.*
			,case when isnull(R.Customer1, '') <> '' and PI1.CustomerID is not null then 'Y'
				  when isnull(R.Customer1, '') <> '' and PI1.CustomerID is null then 'N'
				  when isnull(R.Customer1, '') = '' then 'T' end as flag1
			,case when isnull(R.Customer2, '') <> '' and PI2.CustomerID is not null then 'Y'
				  when isnull(R.Customer2, '') <> '' and PI2.CustomerID is null then 'N'
				  when isnull(R.Customer2, '') = '' then 'T' end as flag2
			,case when isnull(R.Customer3, '') <> '' and PI3.CustomerID is not null then 'Y'
				  when isnull(R.Customer3, '') <> '' and PI3.CustomerID is null then 'N'
				  when isnull(R.Customer3, '') = '' then 'T' end as flag3
			,case when isnull(R.Customer4, '') <> '' and PI4.CustomerID is not null then 'Y'
				  when isnull(R.Customer4, '') <> '' and PI4.CustomerID is null then 'N'
				  when isnull(R.Customer4, '') = '' then 'T' end as flag4
			,case when isnull(R.Customer5, '') <> '' and PI5.CustomerID is not null then 'Y'
				  when isnull(R.Customer5, '') <> '' and PI5.CustomerID is null then 'N'
				  when isnull(R.Customer5, '') = '' then 'T' end as flag5
			into #SectionII_Result2
			from #SectionII_Temp R
			left join dsbdb..TB_IMPORT_CSS_DAY_PI PI1 with (nolock) on PI1.CustomerID = R.Customer1 and @DATETO>= convert(char(10),PI1.frdate,111) and @DATETO<= convert(char(10),PI1.Todate,111) 
			left join dsbdb..TB_IMPORT_CSS_DAY_PI PI2 with (nolock) on PI2.CustomerID = R.Customer2 and @DATETO>= convert(char(10),PI2.frdate,111) and @DATETO<= convert(char(10),PI2.Todate,111) 
			left join dsbdb..TB_IMPORT_CSS_DAY_PI PI3 with (nolock) on PI3.CustomerID = R.Customer3 and @DATETO>= convert(char(10),PI3.frdate,111) and @DATETO<= convert(char(10),PI3.Todate,111) 
			left join dsbdb..TB_IMPORT_CSS_DAY_PI PI4 with (nolock) on PI4.CustomerID = R.Customer4 and @DATETO>= convert(char(10),PI4.frdate,111) and @DATETO<= convert(char(10),PI4.Todate,111) 
			left join dsbdb..TB_IMPORT_CSS_DAY_PI PI5 with (nolock) on PI5.CustomerID = R.Customer5 and @DATETO>= convert(char(10),PI5.frdate,111) and @DATETO<= convert(char(10),PI5.Todate,111) 

			select * 
			into #SectionII_Result3
			from #SectionII_Result2
			where flag1 = 'N' or flag2 = 'N' or flag3 = 'N' or flag4 = 'N' or flag5 = 'N'
			--*********************************************************************************************
			--****************************************** TINY UP ******************************************
			--*********************************************************************************************

			--/* Part 1 Details*/
			Insert into dsbdb..TB_HKMA_Survey_Retail_Section3_Part1_Detail
			select	distinct
				ProductType,
				ENTITY,
				Fundcode,
				sum(HKDamt) as HKDamt,
				Complex,
				SFC_Authorization
			from #SectionII_Result3
			group by ProductType,ENTITY,Fundcode,Complex,SFC_Authorization

			select * from dsbdb..TB_HKMA_Survey_Retail_Section3_Part1_Detail
			order by ProductType,ENTITY,Fundcode

			----/* Part 1 CVM Details*/
			--Select 
			--ProductType, portfoliono, ENTITY, currencyiso, navprice, fxrate, HKDamt_round, holdings, fundkey, fundcode, prodname
			--from #Temp
			--Order by producttype, ENTITY, portfoliono

			/* Part 1 Summary*/
			insert into dsbdb..TB_HKMA_Survey_Retail_Section3_Part1_Summary
			select	ProductType, count(ENTITY) as ENTITYCount, sum(HKDamt) as HKDamtSum, Complex,SFC_Authorization
			from
			(
			select	distinct
				ProductType,
				ENTITY,
				sum(HKDamt) as HKDamt,
				Complex,
				SFC_Authorization
			from #SectionII_Result3
			group by ProductType,ENTITY,Complex,SFC_Authorization
			) x group by producttype,Complex,SFC_Authorization

			select * from dsbdb..TB_HKMA_Survey_Retail_Section3_Part1_Summary
			order by ProductType

			--DROP TABLE	#ENTITY_PORTFOLIO_TB
	  END
	  IF (@TYPE = 'SectionIII')
	  BEGIN
			SET NOCOUNT ON

			IF OBJECT_ID('tempdb..#SectionIII_Balance') IS NOT NULL DROP TABLE #SectionIII_Balance
			IF OBJECT_ID('tempdb..#SectionIII_Temp') IS NOT NULL DROP TABLE #SectionIII_Temp
			IF OBJECT_ID('tempdb..#SectionIII_Result2') IS NOT NULL DROP TABLE #SectionIII_Result2
			IF OBJECT_ID('tempdb..#SectionIII_Result3') IS NOT NULL DROP TABLE #SectionIII_Result3

			--SELECT		PORTFOLIOKEY=0, ENTITY=REPLICATE('A',50), OWNER=0
			--INTO		#ENTITY_PORTFOLIO_TB

			--TRUNCATE TABLE	#ENTITY_PORTFOLIO_TB

			--INSERT INTO	#ENTITY_PORTFOLIO_TB
			--EXEC SP_ENTITY
			IF OBJECT_ID('tempdb..#SectionIII_Balance') IS NOT NULL DROP TABLE #SectionIII_Balance

			--*********************************************************************************************
			select tb_bal.acctkey, max(tb_bal.effdate) as lasteffdate, sum(isnull(tb_bal.confirmedmovement,0)) as bal
			into #SectionIII_Balance
			from	hitrust..mxaccbalmovetb tb_bal with (nolock) 
			inner join	hitrust..mxctracttb c with (nolock) on tb_bal.CTRACTKEY = c.CTRACTKEY
			left join DSBDB..vw_udf_AGENT_CODE TB_AGENT_CODE	WITH (NOLOCK) ON TB_AGENT_CODE.ctractkey = c.CTRACTKEY 
			left join hitrust..MXCOMMSPLITTB tb_comm with (nolock) on tb_comm.CTRACTKEY = c.CTRACTKEY
			left join HITRUST..MXAGENTTB TB_AGENT WITH (NOLOCK) ON TB_AGENT.AGENTKEY = tb_comm.AGENTKEY
			where	convert(varchar(10),tb_bal.effdate,111) <= @DATETO
			and ISNULL(TB_AGENT_CODE.charfield,TB_AGENT.AGENTNAME) not like '3900%'
			group by tb_bal.acctkey 
			having sum(isnull(tb_bal.confirmedmovement,0)) > 0

			select	distinct
				case
				when uc.classcode not like '1%' then 'Unit Trusts'
				when prodtype = 'WMS-PRODTYPE-BONDS' then 'Debt Securities'
				when prodtype = 'WMS-PRODTYPE-NOTES-AST-LNK' then 'Others'
				when prodtype = 'WMS-PRODTYPE-NOTES-CRD-LNK' then 'Credit-Linked'
				when prodtype = 'WMS-PRODTYPE-NOTES-EQT-LNK' then 'Equity-Linked'
				when prodtype = 'WMS-PRODTYPE-ELI' then 'Equity-Linked'		--KC20120410
				when prodtype = 'WMS-PRODTYPE-NOTES-PCP-PRO' then 'Others'
				when f.fundcode = 'LMN0034' then 'Others'
				when uc.classcode = '1B' then 'Debt Securities'
				when prodtype is null then 'Others'		--KC20110712
				end as ProductType, 
				p.portfoliono,
				ID.SSNO as ENTITY,
				cc.currencyiso,
				pp.navprice,
				fx.rate as fxrate, 
				HKDamt = fx.rate * bal * pp.navprice,
				HKDamt_round = round(fx.rate * bal * pp.navprice,0),
				bal as holdings,
				f.fundkey,
				f.fundcode,
				'"'+fn.description+'"' as prodname
				--, c.ctractno, c.effdate, csd.description as ctstatus, c.nounit, c.price
				--, c.reference	--, c.ssref as IpoApply
				--, convert(decimal(15,2),tfhkd.net) as TxnAmtHKDold
				--, case isnull(std.description, 'nosubtype')
				--	when 'TFRIN Transfer In' then
				--		case when c.effdate >= '2010/10/01' AND c.effdate < '2011/01/01' then convert(decimal(15,2),nounit / tfdeal.fxrate)
				--		else convert(decimal(15,2),tfhkd.net)
				--		end
				--	else convert(decimal(15,2),tfhkd.net)
				--  end as TxnAmtHKD
				--, convert(decimal(15,2),tfdeal.net) as TxnAmtinDealCcyold
				--, case isnull(std.description,'nosubtype')
				--	when 'TFRIN Transfer In' then 
				--		case when c.effdate >= '2010/10/01' and c.effdate < '2011/01/01' then nounit
				--		else convert(decimal(15,2),tfdeal.net)
				--		end
				--	else convert(decimal(15,2),tfdeal.net)
				--  end as TxnAmtinDealCcy
				--, tfdeal.fxrate as HKDtoDealFx
				--KC20121015[
				--,left(isnull(ag.agentname,''),10) as AgentCode
				--,c.ssref
				--,left(isnull(sa.acno,''),20) as Settle_AC
				--KC20121015]
				--, std.description as SubTypeDesc
			--	, pftd.description as clienttype
			--	, p.portfoliono, uc.classcode, ax.*, PT.*
				,left(ID.SSNO,20) as Customer1
				,substring(ID.SSNO,21,20) as Customer2
				,substring(ID.SSNO,41,20) as Customer3
				,substring(ID.SSNO,61,20) as Customer4
				,substring(ID.SSNO,81,20) as Customer5
			into #SectionIII_Temp
			from	hitrust..mxaccounttb a with (nolock)
			inner join #SectionIII_Balance ax on a.acctkey = ax.acctkey
			inner join	hitrust..mxportfoliotb p with (nolock) on p.portfoliokey = a.portfoliokey
			inner join	hitrust..mxprofiletb pf with (nolock) on pf.profilekey = p.profilekey
			inner join	hitrust..mxprofiletypetb pft with (nolock) on pft.profiletypekey = pf.profiletypekey
			--inner join	mxlangdesctb pftd on pftd.desckey = pft.descid and pftd.description <> 'Private Banking'
			inner join	hitrust..mxunitclasstb uc with (nolock) on uc.unitclasskey = a.unitclasskey and uc.deleted = 0 and uc.classcode like '1%'
			inner join	hitrust..mxfundtb f with (nolock) on f.fundkey = uc.fundkey and f.companykey = 1 AND FUNDCODE NOT LIKE '%DUMMY%'
			inner join	hitrust..mxlangdesctb fn with (nolock) on fn.desckey = f.descid
			inner join	hitrust..mxcurrencytb cc with (nolock) on cc.currencykey = f.currency
			--/*
			inner join	bpss..fx fx on fx.ccy = cc.currencyiso
			--inner join	mxctracttb c with (nolock) on c.acctkey = a.acctkey												--<<<<<<<<<<<<<<<<<<<<<		DATE_CHANGE
			--inner join hitrust..mxctstatustb cs with (nolock) on c.ctstatuskey = cs.ctstatuskey and c.company = cs.company
			--inner join hitrust..mxlangdesctb csd with (nolock) on cs.descid = csd.desckey 
			--	and csd.description in ('priced','settled/registered','executed','upfront settled')
			--inner join	mxtranfinstb tfhkd with (nolock) on tfhkd.transactionkey = c.ctractkey and tfhkd.currencykey = 1
			--left join	mxtranfinstb tfdeal with (nolock) on tfdeal.transactionkey = c.ctractkey and tfdeal.currencykey = c.dealccy
			--LEFT JOIN MXCTRACTSUBTYPETB st with (nolock) ON c.CTRACTSUBTYPE = st.CTRACTSUBTYPEKEY
			--LEFT JOIN MXLANGDESCTB std  with (nolock) ON st.DESCID = std.DESCKEY
			inner
			join
				(select	fp.fundkey, fp.navprice
				from	hitrust..mxpricetb fp
				inner	join
				(
					select	fundkey, max(pricedate) as maxpricedate
					from	hitrust..mxpricetb
					where	deleted = 0 and convert(varchar(10),pricedate,111) < @DATETO
					group
					by	fundkey
				)	mp
				on	mp.fundkey = fp.fundkey and mp.maxpricedate = fp.pricedate
				) pp on pp.fundkey = f.fundkey
			LEFT JOIN	(select	LD2.DESCRIPTION AS PRODTYPE, UDF.XREFKEY AS FUNDKEY , UDF.CHARFIELD
				FROM	hitrust..mxuserdefinedfieldtb udf with (nolock)
				left join hitrust..mxuserdefinedfieldtypetb udft with (nolock) on udft.userdefinedfieldtypekey = udf.userdefinedfieldtypekey and udft.deleted = 0
				left join hitrust..mxlangdesctb ld2 with (nolock) on ld2.desckey = udft.descid
				WHERE	udf.deleted = 0 and udf.xrefkeytype = 4
				AND	LD2.DESCRIPTION LIKE 'WMS-%') PT ON PT.FUNDKEY = F.FUNDKEY
			INNER JOIN	bpss..tb_restricted_txns_all_IDs ID ON	ID.PortKey = P.PORTFOLIOKEY
			where substring (p.portfoliono, 9, 1)  IN ('1', '3', '4', '6', '9','0')
			and 
			f.fundcode not in (SELECT FUNDCODE FROM #tmp_exclude_fundcode)
			--and	left(c.ctractno, 3) <> 'RED'	--KC20120410
			and	pf.relno not in ('UT029312', 'UN001862')		--KC20120410
			--and isnull(ag.agentname,'') not like '3900%'	--PC20180411
			ORDER
			BY	producttype, ID.SSNO, p.portfoliono 	--,producttype , UC.CLASSCODE, F.FUNDCODE
			--BY	producttype, p.portfoliono	--,producttype , UC.CLASSCODE, F.FUNDCODE
			--) x	group by Portfoliono

			--select * from #Temp
			/*Map PI flag*/
			--'Y' = PI customer and empty
			--'N' = non PI customer
			--'T' = empty
			select R.*
			,case when isnull(R.Customer1, '') <> '' and PI1.CustomerID is not null then 'Y'
				  when isnull(R.Customer1, '') <> '' and PI1.CustomerID is null then 'N'
				  when isnull(R.Customer1, '') = '' then 'T' end as flag1
			,case when isnull(R.Customer2, '') <> '' and PI2.CustomerID is not null then 'Y'
				  when isnull(R.Customer2, '') <> '' and PI2.CustomerID is null then 'N'
				  when isnull(R.Customer2, '') = '' then 'T' end as flag2
			,case when isnull(R.Customer3, '') <> '' and PI3.CustomerID is not null then 'Y'
				  when isnull(R.Customer3, '') <> '' and PI3.CustomerID is null then 'N'
				  when isnull(R.Customer3, '') = '' then 'T' end as flag3
			,case when isnull(R.Customer4, '') <> '' and PI4.CustomerID is not null then 'Y'
				  when isnull(R.Customer4, '') <> '' and PI4.CustomerID is null then 'N'
				  when isnull(R.Customer4, '') = '' then 'T' end as flag4
			,case when isnull(R.Customer5, '') <> '' and PI5.CustomerID is not null then 'Y'
				  when isnull(R.Customer5, '') <> '' and PI5.CustomerID is null then 'N'
				  when isnull(R.Customer5, '') = '' then 'T' end as flag5
			into #SectionIII_Result2
			from #SectionIII_Temp R
			left join dsbdb..TB_IMPORT_CSS_DAY_PI PI1 with (nolock) on PI1.CustomerID = R.Customer1 and @DATETO>= convert(char(8),PI1.frdate,111) and @DATETO<= convert(char(8),PI1.Todate,111) 
			left join dsbdb..TB_IMPORT_CSS_DAY_PI PI2 with (nolock) on PI2.CustomerID = R.Customer2 and @DATETO>= convert(char(8),PI2.frdate,111) and @DATETO<= convert(char(8),PI2.Todate,111) 
			left join dsbdb..TB_IMPORT_CSS_DAY_PI PI3 with (nolock) on PI3.CustomerID = R.Customer3 and @DATETO>= convert(char(8),PI3.frdate,111) and @DATETO<= convert(char(8),PI3.Todate,111) 
			left join dsbdb..TB_IMPORT_CSS_DAY_PI PI4 with (nolock) on PI4.CustomerID = R.Customer4 and @DATETO>= convert(char(8),PI4.frdate,111) and @DATETO<= convert(char(8),PI4.Todate,111) 
			left join dsbdb..TB_IMPORT_CSS_DAY_PI PI5 with (nolock) on PI5.CustomerID = R.Customer5 and @DATETO>= convert(char(8),PI5.frdate,111) and @DATETO<= convert(char(8),PI5.Todate,111) 

			select * 
			into #SectionIII_Result3
			from #SectionIII_Result2
			where flag1 = 'N' or flag2 = 'N' or flag3 = 'N' or flag4 = 'N' or flag5 = 'N'
			--*********************************************************************************************
			--****************************************** TINY UP ******************************************
			--*********************************************************************************************

			/*Part2 Details*/
			select ProductType 
			,portfoliono
			,ENTITY
			,FUNDCODE
			,sum(HKDamt) as HKDamt
			from #SectionIII_Result3
			group by ProductType, portfoliono, ENTITY,FUNDCODE
			order by ProductType, ENTITY, portfoliono

			/*Part 2 Summary*/
			select	ProductType, count(ENTITY) as ENTITYCount, sum(HKDamt) as SumTxnAmtHKD
			from
			(
			select	distinct
				ProductType,
				ENTITY,
				sum(HKDamt) as HKDamt
			from #SectionIII_Result3
			group by ProductType,ENTITY
			) x group by producttype

		 
			--DROP TABLE	#ENTITY_PORTFOLIO_TB
	  END
END




GO
/****** Object:  StoredProcedure [dbo].[sp_Rpt_SARWMD21016]    Script Date: 5/17/2022 9:57:52 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[sp_Rpt_SARWMD21016]
(
@pXML XML
)
/*

DECLARE @pRtnXML XML
EXEC [sp_Rpt_SARWMD21016] '
<ROOT>
		<FrEffdate>20200701</FrEffdate>
		<ToEffdate>20210228</ToEffdate>
</ROOT>' 


DECLARE @pRtnXML XML
EXEC [sp_Rpt_SARWMD21016] '
<ROOT>
		<TYPE>MONTHLY</TYPE>
</ROOT>' 
		
*/
AS
BEGIN
	DECLARE @TYPE NVARCHAR(200)
	DECLARE @sFrEffdate NVARCHAR(10)
	DECLARE @sToEffdate NVARCHAR(10)
	DECLARE @dtFrEffdate DATETIME
	DECLARE @dtToEffdate DATETIME

	SELECT 
		@TYPE			= T.C.value('TYPE[1]', 'NVARCHAR(200)'),
		@sFrEffdate			= T.C.value('FrEffdate[1]', 'NVARCHAR(10)'),
		@sToEffdate			= T.C.value('ToEffdate[1]', 'NVARCHAR(10)')
		FROM @pXML.nodes('/ROOT') T(C)

		IF (@sFrEffdate IS NOT NULL)
		BEGIN
			SET @dtFrEffdate = (SELECT CONVERT(DATE,@sFrEffdate,112))
		END
		IF (@sToEffdate IS NOT NULL)
		BEGIN
			SET @dtToEffdate = (SELECT CONVERT(DATE,@sToEffdate,112))
		END

		IF (@TYPE IS NOT NULL)
		BEGIN
			IF (@TYPE = 'MONTHLY')
			BEGIN
				SET @dtFrEffdate = DATEADD(MONTH,-1,DATEADD(month, DATEDIFF(month, 0, GETDATE()), 0))
				SET @dtToEffdate =    EOMONTH(DATEADD(MONTH,-1,DATEADD(month, DATEDIFF(month, 0, GETDATE()), 0)))
				
				SET @sFrEffdate = (SELECT CONVERT(NVARCHAR,@dtFrEffdate,112))
				SET @sToEffdate = (SELECT CONVERT(NVARCHAR,@dtToEffdate,112))
			END

		END


		-- =============================================
		--
		-- Change History:
		-- Date       Author          Job No.		  Description
		-- ---------- --------------- --------------- --------------------------------------------------------------------------------
		-- 20210115   Penny Chu	      SARWMD21003        Initial
		-- =============================================

		SET NOCOUNT ON;
			IF OBJECT_ID('tempdb..#TEMP') IS NOT NULL DROP TABLE #TEMP

			select
			left(TB_ID.SSNO,20)																		as CUSTOMER_ID_1
			,substring(TB_ID.SSNO,21,20)															as CUSTOMER_ID_2
			,substring(TB_ID.SSNO,41,20)															as CUSTOMER_ID_3
			,substring(TB_ID.SSNO,61,20)															as CUSTOMER_ID_4
			,substring(TB_ID.SSNO,81,20)															as CUSTOMER_ID_5
			,CONVERT(NCHAR(70),'')																as CUSTOMER_NAME_1
			,CONVERT(NCHAR(70),'')																as CUSTOMER_NAME_2
			,CONVERT(NCHAR(70),'')																as CUSTOMER_NAME_3
			,CONVERT(NCHAR(70),'')																as CUSTOMER_NAME_4
			,CONVERT(NCHAR(70),'')																as CUSTOMER_NAME_5
			,(
			select 
				case when count(PORTFOLIOKEY) > 1  then 
					'Joint Account' 
				else 
					'Single Account' 
				end
			from 
				hitrust..MXOWNERTB O 
			where 
				O.PORTFOLIOKEY = TB_PORT.PORTFOLIOKEY 
			group by 
				O.PORTFOLIOKEY
			)																						as Account_Type
			,
			TB_PORT.PORTFOLIONO																	as UT_Account_No
			,(case when VCCust.IDNO is null then 'N' else 'Y' end)									as VC_Flag
			,(case when VCCust.IDNO is null then 'Non-VC' else 'VC' end)							as VC_Name
			,TB_FUND.FUNDCODE																		as FUND_CODE
			,TB_FUNDDESC.DESCRIPTION																as FUND_NAME
			,TB_FUNDCLASS.CLASSCODE																	as FUND_CLASS
			,isnull(TB_ISIN.CHARFIELD,'')													AS [ISIN code]
			,TB_CTRACT.ORDERDATE																	as CONTRACT_ORDERDATE
			,TB_CTRACT.CTRACTNO
			--,TB_CTSTATDESC.DESCRIPTION																as CONTRACT_STATUS
			,case 
				when substring(TB_CTRACT.CTRACTNO,1,3) = 'SUB' then 'Subscription'
				when substring(TB_CTRACT.CTRACTNO,1,3) = 'RED' then 'Redemptions'
				when substring(TB_CTRACT.CTRACTNO,1,3) = 'SWI' then 'Switching-in'
				when substring(TB_CTRACT.CTRACTNO,1,3) = 'SWO' then 'Switching-out'
			end as 'Transation_Type'									--Transation_Type
			--,TB_CTSTATDESC.DESCRIPTION																as Ctract_Status
			,TB_FUNDCCY.CURRENCYISO																	AS Invested_currency
			,TB_TXFINS.NET																			AS Invested_amount_in_original_ccy
			,tbl_HKcomm.NET																			AS Invested_amount_in_hkd
			,TB_CTRACT.NOUNIT																		as Unit
			,TB_CTRACT.PRICE																		as PRICE
			,CASE WHEN TB_FUNDCLASS.CLASSCODE in ('1E','1B')	--Bond/ELI
							  THEN ISNULL(tbl_HKcomm.COMMISSION,0.0)
						 ELSE CASE WHEN LEFT(TB_TXCODEDESC.DESCRIPTION,6) = 'Switch'	--UT
								   THEN CAST(case when ISNULL(tbl_HKcomm.TAX,0.0) = 0.0
												  then  ISNULL(tbl_HKcomm.COMMISSION,0.0)
                          	  				 else case when ISNULL(tbl_HKcomm.COMMISSION,0.0) = 0.0
												  then ISNULL(tbl_HKcomm.TAX,0.0)
											 else case when ISNULL(tbl_HKcomm.TAX,0.0) < ISNULL(tbl_HKcomm.COMMISSION,0.0)
													   then ISNULL(tbl_HKcomm.TAX,0.0)
												  else ISNULL(tbl_HKcomm.COMMISSION,0.0)
												  end
											 end
								   END AS FLOAT)
							  ELSE CASE WHEN ISNULL(TB_FUNDCLASS.CLASSCODE,'?') = 'O' --- Guaranteed Funds
										THEN CAST(ISNULL(tbl_HKcomm.TAX,0.0) AS FLOAT) --- Other Fee Amount
								   ELSE CASE WHEN ISNULL(TB_FUNDCLASS.CLASSCODE,'?') = 'B' --- Class B Funds
											 THEN CAST( ISNULL(tbl_HKcomm.TAX,0.0) AS FLOAT) --- Other Fee Amount
										ELSE CASE WHEN ISNULL(TB_FUND.EXTERNALID,'?') = 'A' or SUBSTRING(TB_FUND.FUNDCODE,1,2) in ('TM','VP','AI','DP','DR','SC') --- Templeton ( TM ) / VP (VP) /AIG (AI) / Allianz Dresdner (DP/DR) / Schroders (SC)
												  THEN CAST(ISNULL(tbl_HKcomm.COMMISSION,0.0) AS FLOAT)  --- Commission Amount
											 ELSE CASE WHEN ISNULL(TB_FUND.EXTERNALID,'?') = 'B' or SUBSTRING(TB_FUND.FUNDCODE,1,2) in ('AC','HS','IV','SB')      --- ACM (AC) / HSBC (HS) / Investec (IV) /Schroders (SB)
													   THEN CAST(ISNULL(tbl_HKcomm.COMMISSION,0.0) AS FLOAT)  --- Commission Amount
												   ELSE CASE WHEN ISNULL(TB_FUND.EXTERNALID,'?') = 'C' or SUBSTRING(TB_FUND.FUNDCODE,1,2) in ('FI','IN')                --- Fid (FI) /Invesco (IN)
															 THEN CAST( ISNULL(tbl_HKcomm.TAX,0.0) AS FLOAT) --- Other Fee Amount
														ELSE CASE WHEN ISNULL(TB_FUND.EXTERNALID,'?') = 'D' or SUBSTRING(TB_FUND.FUNDCODE,1,2) in ('JF')                --- JF (JF)  / Allianz Dresdner (DB)
																  THEN cast(ISNULL(tbl_HKcomm.COMMISSION,0.0) AS FLOAT)  --- Commission Amount
															  ELSE CAST(ISNULL(tbl_HKcomm.COMMISSION,0.0) AS FLOAT)  --- Commission Amount [by default]
															  END  --- EXTERNALID = 'D'
														END  --- EXTERNALID = 'C'
												   END  --- EXTERNALID = 'B'
											 END  --- EXTERNALID = 'A'
										END  --- CLASS B
								   END  --- CLASS O
							  END ---UT
						 END																AS Commission_Amount_in_HKD
			,ISNULL(TB_AGENT_CODE.charfield,TB_AGENT.AGENTNAME) as 'Agent_Code' --Agent_Code
			,substring(ISNULL(TB_AGENT_CODE.charfield,TB_AGENT.AGENTNAME),1,2) as 'Branch_Code'
			--,substring(TB_BRANCH.BRANCHNAME,1,2) as 'Branch_Code'		--Branch_Code
			--,substring(TB_BRANCH.BRANCHNAME,5,LEN(TB_BRANCH.BRANCHNAME)-1) as 'Branch_Name'--Branch_Name
			,tbl_channel.Channel										--Channel
			,ISNULL(TB_Ctract.Reference,'') as Contract_Reference
			,TB_PORT.PORTFOLIOKEY
			into #temp
			from HITRUST..MXPORTFOLIOTB TB_PORT						WITH (NOLOCK)
				INNER JOIN HITRUST..MXACCOUNTTB TB_ACC				WITH (NOLOCK)	ON TB_PORT.PORTFOLIOKEY = TB_ACC.PORTFOLIOKEY
				INNER JOIN HITRUST..MXUNITCLASSTB TB_FUNDCLASS		WITH (NOLOCK)	ON TB_ACC.UNITCLASSKEY = TB_FUNDCLASS.UNITCLASSKEY and TB_FUNDCLASS.DELETED = 0
				INNER JOIN HITRUST..MXPROFILETB TB_PROF				WITH (NOLOCK)	ON TB_PROF.PROFILEKEY = TB_PORT.PROFILEKEY
				left join DSBDB..tb_frequentTrade_VC VCCust with (nolock) on VCCust.idno = TB_PROF.SSNO
				left join bpss..TB_RESTRICTED_TXNS_ALL_IDS TB_ID with (nolock) on TB_ID.PortNum = TB_PORT.PORTFOLIONO
				-- CONTRACT INFORMATION
				INNER JOIN HITRUST..MXCTRACTTB TB_CTRACT			WITH (NOLOCK)	ON TB_CTRACT.ACCTKEY = TB_ACC.ACCTKEY
				INNER JOIN HITRUST..MXCTSTATUSTB TB_CTSTAT			WITH (NOLOCK)	ON TB_CTRACT.CTSTATUSKEY = TB_CTSTAT.CTSTATUSKEY
				INNER JOIN HITRUST..MXLANGDESCTB TB_CTSTATDESC		WITH (NOLOCK)	ON TB_CTSTAT.DESCID = TB_CTSTATDESC.DESCKEY
				INNER JOIN HITRUST..MXTRANCODETB TB_TXCODE			WITH (NOLOCK)	ON TB_CTRACT.TRANCODEKEY = TB_TXCODE.TRANCODEKEY
				INNER JOIN HITRUST..MXLANGDESCTB TB_TXCODEDESC		WITH (NOLOCK)	ON TB_TXCODE.DESCID = TB_TXCODEDESC.DESCKEY
				INNER JOIN HITRUST..MXCURRENCYTB TB_CUR				WITH (NOLOCK)	ON TB_CTRACT.DEALCCY = TB_CUR.CURRENCYKEY
		
				LEFT  JOIN hitrust..MXCTRACTSUBTYPETB TB_CTSUBTYPE	WITH (NOLOCK)	ON TB_CTRACT.CTRACTSUBTYPE = TB_CTSUBTYPE.CTRACTSUBTYPEKEY
				LEFT  JOIN hitrust..MXLANGDESCTB TB_CTSUBTYPEDESC	WITH (NOLOCK)	ON TB_CTSUBTYPE.DESCID = TB_CTSUBTYPEDESC.DESCKEY
				INNER JOIN HITRUST..MXTRANSACTIONTB	TB_TRANS		WITH (NOLOCK)	ON TB_CTRACT.CTRACTKEY = TB_TRANS.TRANSACTIONKEY
				-- FUND INFORMATION
				INNER JOIN HITRUST..MXFUNDTB TB_FUND				WITH (NOLOCK)	ON TB_FUNDCLASS.FUNDKEY = TB_FUND.FUNDKEY 
				INNER JOIN HITRUST..MXLANGDESCTB TB_FUNDDESC		WITH (NOLOCK)	ON TB_FUND.DESCID = TB_FUNDDESC.DESCKEY
				INNER JOIN HITRUST..MXCURRENCYTB TB_FUNDCCY			WITH (NOLOCK)	ON TB_FUND.CURRENCY = TB_FUNDCCY.CURRENCYKEY
				LEFT JOIN (SELECT TB_UDF.* FROM HITRUST..MXUSERDEFINEDFIELDTB TB_UDF WITH (NOLOCK) 
								INNER JOIN HITRUST..MXUSERDEFINEDFIELDTYPETB TB_UDFT WITH (NOLOCK)
								ON TB_UDFT.USERDEFINEDFIELDTYPEKEY=TB_UDF.USERDEFINEDFIELDTYPEKEY 
								AND TB_UDFT.CHARFIELDNAME  = 'ISIN Number' AND COMPANY=1 AND TB_UDF.DELETED=0 AND TB_UDFT.DELETED=0) TB_ISIN
								ON TB_ISIN.xrefkey=TB_FUND.FUNDKEY AND TB_ISIN.xrefkeytype=4
				--Settlement
				LEFT JOIN HITRUST..MXSETTLESPLITTB  TB_SET_SPLIT    WITH (NOLOCK)	ON   TB_SET_SPLIT.TRANSACTIONKEY = TB_CTRACT.CTRACTKEY
				LEFT JOIN HITRUST..MXSETTLEACTB TB_SET_ACC			WITH (NOLOCK)   ON   TB_SET_ACC.SETTLEACKEY      = TB_SET_SPLIT.SETTLEKEY
				INNER JOIN hitrust..MXTRANFINSTB TB_TXFINS			WITH (NOLOCK)	ON TB_CTRACT.CTRACTKEY = TB_TXFINS.TRANSACTIONKEY and TB_FUND.CURRENCY = TB_TXFINS.CURRENCYKEY
				inner join hitrust..MXTRANFINSTB tbl_HKcomm			with (nolock)	on tbl_HKcomm.TRANSACTIONKEY = TB_CTRACT.CTRACTKEY and tbl_HKcomm.CURRENCYKEY = 1
				--Channel
				left join dsbdb..VW_UDF_Channel tbl_channel with (nolock) on tbl_channel.CTRACTKEY = TB_CTRACT.CTRACTKEY 
				left join DSBDB..vw_udf_AGENT_CODE TB_AGENT_CODE	WITH (NOLOCK) ON TB_AGENT_CODE.ctractkey = TB_CTRACT.CTRACTKEY 
				left join hitrust..MXCOMMSPLITTB tb_comm with (nolock) on tb_comm.CTRACTKEY = TB_CTRACT.CTRACTKEY
				left join HITRUST..MXAGENTTB TB_AGENT WITH (NOLOCK) ON TB_AGENT.AGENTKEY = tb_comm.AGENTKEY 
				----Customer Name
				--LEFT join HITRUST..MXPROFILETB TB_PROF1				WITH (NOLOCK)	ON TB_PROF1.SSNO = rtrim(left(TB_ID.SSNO,20)) and TB_PROF1.COMPANYKEY = 1
				--LEFT join HITRUST..MXPROFILETB TB_PROF2				WITH (NOLOCK)	ON TB_PROF2.SSNO = rtrim(substring(TB_ID.SSNO,21,20)) and TB_PROF2.COMPANYKEY = 1
				--LEFT join HITRUST..MXPROFILETB TB_PROF3				WITH (NOLOCK)	ON TB_PROF3.SSNO = rtrim(substring(TB_ID.SSNO,41,20)) and TB_PROF3.COMPANYKEY = 1
				--LEFT join HITRUST..MXPROFILETB TB_PROF4				WITH (NOLOCK)	ON TB_PROF4.SSNO = rtrim(substring(TB_ID.SSNO,61,20)) and TB_PROF4.COMPANYKEY = 1
				--LEFT join HITRUST..MXPROFILETB TB_PROF5				WITH (NOLOCK)	ON TB_PROF5.SSNO = rtrim(substring(TB_ID.SSNO,81,20)) and TB_PROF5.COMPANYKEY = 1
				WHERE TB_CTRACT.COMPANY = 1
				AND TB_CTRACT.TRANCODEKEY in ('BaRedemptions','BaSales','BaSwitchIn','BaSwitchOut')
				AND TB_CTRACT.CTRACTNO not like 'REV%'
				AND TB_FUNDCLASS.DELETED = 0
				and TB_CTRACT.CANCELLED = 0
				and TB_CTSTATDESC.DESCRIPTION = 'Settled/Registered'
				AND ((TB_CTSUBTYPEDESC.DESCRIPTION NOT IN ('TFRIN Transfer In','TFROUT Transfer Out') OR TB_CTSUBTYPEDESC.DESCRIPTION IS NULL))
				AND SUBSTRING(TB_PORT.PORTFOLIONO, 9, 1) IN ('1','3','4','9')
				AND (convert(char(8),TB_CTRACT.orderdate,112) >= @sFrEffdate and convert(char(8),TB_CTRACT.orderdate,112) <= @sToEffdate)
				order by TB_CTRACT.CTRACTNO


				UPDATE #TEMP
				SET CUSTOMER_NAME_1 =isnull(TB_PROF.NAME,'') 
				FROM #TEMP T
				INNER JOIN HITRUST..MXOWNERTB TB_OWNER ON T.PORTFOLIOKEY = TB_OWNER.PORTFOLIOKEY
				INNER JOIN HITRUST..MXPROFILETB TB_PROF ON TB_PROF.SSNO = T.CUSTOMER_ID_1 AND TB_PROF.PROFILEKEY = TB_OWNER.PROFILEKEY

				UPDATE #TEMP
				SET CUSTOMER_NAME_2 =isnull(TB_PROF.NAME,'') 
				FROM #TEMP T
				INNER JOIN HITRUST..MXOWNERTB TB_OWNER ON T.PORTFOLIOKEY = TB_OWNER.PORTFOLIOKEY
				INNER JOIN HITRUST..MXPROFILETB TB_PROF ON TB_PROF.SSNO = T.CUSTOMER_ID_2 AND TB_PROF.PROFILEKEY = TB_OWNER.PROFILEKEY
   
				UPDATE #TEMP
				SET CUSTOMER_NAME_3 =isnull(TB_PROF.NAME,'') 
				FROM #TEMP T
				INNER JOIN HITRUST..MXOWNERTB TB_OWNER ON T.PORTFOLIOKEY = TB_OWNER.PORTFOLIOKEY
				INNER JOIN HITRUST..MXPROFILETB TB_PROF ON TB_PROF.SSNO = T.CUSTOMER_ID_3 AND TB_PROF.PROFILEKEY = TB_OWNER.PROFILEKEY

				UPDATE #TEMP
				SET CUSTOMER_NAME_4 =isnull(TB_PROF.NAME,'') 
				FROM #TEMP T
				INNER JOIN HITRUST..MXOWNERTB TB_OWNER ON T.PORTFOLIOKEY = TB_OWNER.PORTFOLIOKEY
				INNER JOIN HITRUST..MXPROFILETB TB_PROF ON TB_PROF.SSNO = T.CUSTOMER_ID_4 AND TB_PROF.PROFILEKEY = TB_OWNER.PROFILEKEY
  
  				UPDATE #TEMP
				SET CUSTOMER_NAME_5 =isnull(TB_PROF.NAME,'') 
				FROM #TEMP T
				INNER JOIN HITRUST..MXOWNERTB TB_OWNER ON T.PORTFOLIOKEY = TB_OWNER.PORTFOLIOKEY
				INNER JOIN HITRUST..MXPROFILETB TB_PROF ON TB_PROF.SSNO = T.CUSTOMER_ID_5 AND TB_PROF.PROFILEKEY = TB_OWNER.PROFILEKEY
   
				select * from #TEMP
				IF OBJECT_ID('tempdb..#TEMP') IS NOT NULL DROP TABLE #TEMP
END
GO
/****** Object:  StoredProcedure [dbo].[sp_Search]    Script Date: 5/17/2022 9:57:52 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 

CREATE   procedure [dbo].[sp_Search]
@var varchar(255), @var2 varchar(255)=''  
as  
BEGIN  
  
if @var2 != ''  
  begin   
   SELECT 'EMPTY'
  end  
else  
  begin  
select  schema_Name(o1.schema_id)  as  [Schema Name], 
CASE WHEN o1.type = 'U'  
 THEN 'User Table'  
 WHEN o1.type = 'S'  
 THEN 'System Table'  
 WHEN o1.type = 'P'  
 THEN 'Stored Procedure'  
 WHEN o1.type = 'V'  
 THEN 'View'  
 WHEN o1.type = 'FN'  
 THEN 'Function'  
 WHEN o1.type = 'TF'  
 THEN 'Function'  
 WHEN o1.type = 'F'  
 THEN 'Foreign Key'  
 WHEN o1.type = 'PK'  
 THEN 'Primary Key'  
 WHEN o1.type = 'TR'  
 THEN 'Trigger'  
 ELSE 'Unknown'  
 END as 'Object Type', 
 object_name(c1.id) as 'Object Name', 
 object_name(o1.parent_object_id) as 'Parent Object'  
from syscomments c1   
 join sys.objects o1  
  on c1.id = o1.[object_id]  
where text like '%' + @var + '%' 
UNION  
SELECT 
-- 'NULL' as 'Schema Name',
schema_Name(o1.schema_id)  as  [Schema Name],
'Table' as 'Object Type',   
 o1.name as 'Object Name',   
 NULL as 'Parent Object'  
FROM sys.objects o1  
 join sys.columns sc  
  on o1.object_id = sc.column_id  
WHERE o1.type = 'U'  
 and sc.name = @var  
UNION
SELECT '' as  [Schema Name],'Table' as 'Object Type',t.name as 'Object Name' ,NULL as 'Parent Object'  
FROM sys.columns c
    JOIN sys.tables t ON c.object_id = t.object_id
WHERE t.name LIKE '%' + @var + '%' 

order by [Schema Name], [Object Type], [Object Name]  
  
end  
  
END  
GO
/****** Object:  StoredProcedure [dbo].[sp_Search_DTSX]    Script Date: 5/17/2022 9:57:52 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
CREATE   procedure [dbo].[sp_Search_DTSX]
@var varchar(255), @path varchar(255)='' ,@fileTail varchar(20)=''
AS  
/*
[sp_Search_DTSX] 'Connect Direct Dir List'
[sp_Search_DTSX] 'DTS_DECEASED_DETAILS_DSB_05.DTSX'

---------- D:\SSIS\DTS_EXPORT_RESTRICTED_TXNS_DSB_20.DTSX
[sp_Search_DTSX] 'TB_RTGL_IPOD_SUB_BATCH_DATE','D:\SSIS\','dtsx'
*/
BEGIN  
	DECLARE @sqlCommand CHAR(2000)
	DECLARE @tbl_Script TABLE(
	RowID INT IDENTITY (1,1),
	command NVARCHAR(MAX)
	)
	IF @var = ''  
	  BEGIN
	   SELECT 'EMPTY'
	  END
	ELSE 
	BEGIN
		IF (@fileTail = '')
		BEGIN
			SET @fileTail = 'dtsx'
		END
		IF (@path = '')
		BEGIN
			SET @path = 'D:\SSIS\'
		END

		SET @sqlCommand = '
		find /i "'+ @var +'" '+@path+'*.'+@fileTail
		PRINT @sqlCommand
		INSERT INTO @tbl_Script(command)
		EXEC master..xp_cmdshell @sqlCommand

		DELETE FROM @tbl_Script WHERE command LIKE '----------%' AND RowID IN (SELECT RowID - 1 FROM @tbl_Script WHERE command IS NULL)
		DELETE FROM @tbl_Script WHERE command IS NULL

		SELECT * FROM @tbl_Script
		SELECT * FROM msdb.dbo.sysjobsteps WHERE command LIKE '%'+ @var +'%'
		SELECT * FROM msdb.dbo.sysjobs WHERE job_id IN (SELECT job_id FROM msdb.dbo.sysjobsteps WHERE command LIKE '%'+ @var +'%')
	END
  
END  
GO
/****** Object:  StoredProcedure [dbo].[sp_Search_File]    Script Date: 5/17/2022 9:57:52 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
  

CREATE   procedure [dbo].[sp_Search_File]
@var varchar(255), @path varchar(255)='' ,@fileTail varchar(20)=''
AS  
/* 

SELECT * FROM ##tbl_Script_110456
EXEC sp_Search_File '2022/04/27 10:','D:\temp\20220505\','txt'

EXEC sp_Search_File '2022/04/27 10:','D:\temp\20220505\6\','txt'
*/
BEGIN  

	DECLARE @sScript NVARCHAR(4000)

	DECLARE @sDateTime VARCHAR(10)

	SET @sDateTime = (SELECT REPLACE(CONVERT(NVARCHAR,GETDATE(),108),':',''))

	SELECT @sDateTime

	SET @sScript = '
	DECLARE @var varchar(255)
	DECLARE @path varchar(255)
	DECLARE @fileTail varchar(20)
	DECLARE @sqlCommand CHAR(2000)

	SET @var = '''+ @var +'''
	SET @path = '''+ @path +'''
	SET @fileTail = '''+ @fileTail +'''

	CREATE TABLE ##tbl_Script_' + @sDateTime + '(
	RowID INT IDENTITY (1,1),
	command NVARCHAR(MAX)
	)
	IF @var = ''''  
	  BEGIN
	   SELECT ''EMPTY''
	  END
	ELSE 
	BEGIN
		IF (@fileTail = '''')
		BEGIN
			SET @fileTail = ''dtsx''
		END
		IF (@path = '''')
		BEGIN
			SET @path = ''D:\temp\20220505\''
		END

		SET @sqlCommand = ''
		find /i "''+ @var +''" ''+@path+''*.''+@fileTail
		PRINT @sqlCommand
		INSERT INTO ##tbl_Script_' + @sDateTime + '(command)
		EXEC master..xp_cmdshell @sqlCommand

		--DELETE FROM #tbl_Script WHERE command LIKE ''----------%'' AND RowID IN (SELECT RowID - 1 FROM #tbl_Script WHERE command IS NULL)
		DELETE FROM ##tbl_Script_' + @sDateTime + ' WHERE command IS NULL

		SELECT * FROM ##tbl_Script_' + @sDateTime + '
	END'
  
	PRINT @sScript
	
	EXEC sp_executesql @sScript
END  
GO
/****** Object:  StoredProcedure [dbo].[sp_ShrinkFile]    Script Date: 5/17/2022 9:57:52 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[sp_ShrinkFile]
AS
BEGIN
PRINT ''
/*
USE HITRUST;
GO
-- Truncate the log by changing the database recovery model to SIMPLE.
ALTER DATABASE HITRUST
SET RECOVERY SIMPLE;
GO
-- Shrink the truncated log file to 1 MB.
DBCC SHRINKFILE (MxSupSB2v0_Log, 1);
GO
-- Reset the database recovery model.
ALTER DATABASE HITRUST
SET RECOVERY FULL;



USE DSBDB;
GO
-- Truncate the log by changing the database recovery model to SIMPLE.
ALTER DATABASE DSBDB
SET RECOVERY SIMPLE;
GO
-- Shrink the truncated log file to 1 MB.
DBCC SHRINKFILE (DSBDB_Log, 1);
GO
-- Reset the database recovery model.
ALTER DATABASE DSBDB
SET RECOVERY FULL;
*/
END
GO
/****** Object:  StoredProcedure [dbo].[sp_Test]    Script Date: 5/17/2022 9:57:52 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_Test] 
AS
BEGIN 
	PRINT '
USE [StampDB]
GO

/****** Object:  View [dbo].[vi_ActiveTask]    Script Date: 6/15/2021 11:31:43 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



ALTER VIEW [dbo].[vi_ActiveTask]
AS
SELECT     ISNULL(APP.WorkflowApproverID, 0) AS WorkflowApproverID, ISNULL(APP.UserID, HistoryTask.WorkflowOwnerID) AS WorkflowApproverUserID, 
                      HistoryTask.WorkflowID, HistoryTask.WorkFlowStepHistoryID, HistoryTask.OrderNumber, HistoryTask.TaskStartDate, HistoryTask.Remark, 
                      HistoryTask.Status, HistoryTask.TemplateID, HistoryTask.TemplateDesc, HistoryTask.FaxCoverID, HistoryTask.FaxCoverDesc, 
                      HistoryTask.WorkflowOwnerID, HistoryTask.WorkflowOwnerName, HistoryTask.WorkflowStartDate, HistoryTask.JobDetailXML, 
                      HistoryTask.RequireReview, HistoryTask.OriginWorkflowID, APP.WorkflowApproverID AS Expr1, APP.WorkflowID AS Expr2, APP.UserID, 
                      APP.WorkflowApproverType, APP.RequireSignature, APP.OrderNumber AS Expr3, APP.CreateDate, APP.ModifyDate, HistoryTask.Hidden
FROM         (SELECT     A.WorkflowID, A.WorkFlowStepHistoryID, ISNULL(D.OrderNumber, 0) AS OrderNumber, A.SubmitDate AS TaskStartDate, A.Remark, A.Status, 
                                              B.TemplateID, F.TemplateDesc, ISNULL(B.FaxCoverID, 0) AS FaxCoverID, ISNULL(G.CoverDesc, N'') AS FaxCoverDesc, 
                                              B.SubmitterID AS WorkflowOwnerID, C.UserName AS WorkflowOwnerName, B.SubmitDate AS WorkflowStartDate, B.JobDetailXML, 
                                              B.RequireReview, B.OriginWorkflowID, A.Hidden
                       FROM          dbo.WorkflowStepHistory AS A  WITH (NOLOCK) LEFT OUTER JOIN
                                              dbo.Workflow AS B  WITH (NOLOCK) ON A.WorkflowID = B.WorkflowID LEFT OUTER JOIN
                                              dbo.[User] AS C  WITH (NOLOCK) ON B.SubmitterID = C.UserID LEFT OUTER JOIN
                                              dbo.WorkflowApprover AS D  WITH (NOLOCK) ON A.WorkflowApproverID = D.WorkflowApproverID LEFT OUTER JOIN
                                              dbo.Template AS F  WITH (NOLOCK) ON B.TemplateID = F.TemplateID LEFT OUTER JOIN
                                              dbo.FaxCover AS G  WITH (NOLOCK) ON B.FaxCoverID = G.FaxCoverID
                       WHERE      (A.WorkFlowStepHistoryID IN
                                                  (SELECT     MAX(WorkFlowStepHistoryID) AS Expr1
                                                    FROM          dbo.WorkflowStepHistory  WITH (NOLOCK)
                                                    WHERE      (WorkflowID = WorkflowID)
                                                    GROUP BY WorkflowID)) AND (A.Status IN (0, 1)) AND (D.GroupID IS NULL)) AS HistoryTask LEFT OUTER JOIN
                      dbo.WorkflowApprover AS APP  WITH (NOLOCK) ON HistoryTask.WorkflowID = APP.WorkflowID AND HistoryTask.OrderNumber + 1 = APP.OrderNumber AND 
                      HistoryTask.Status <> 3
WHERE     (HistoryTask.TemplateID <> 0) AND (HistoryTask.Hidden = 0)
UNION ALL
SELECT     ISNULL(APP.WorkflowApproverID, 0) AS WorkflowApproverID, ISNULL(APP.UserID, HistoryTask_1.WorkflowOwnerID) AS WorkflowApproverUserID, 
                      HistoryTask_1.WorkflowID, HistoryTask_1.WorkFlowStepHistoryID, HistoryTask_1.OrderNumber, HistoryTask_1.TaskStartDate, 
                      HistoryTask_1.Remark, HistoryTask_1.Status, HistoryTask_1.TemplateID, HistoryTask_1.TemplateDesc, HistoryTask_1.FaxCoverID, 
                      HistoryTask_1.FaxCoverDesc, HistoryTask_1.WorkflowOwnerID, HistoryTask_1.WorkflowOwnerName, HistoryTask_1.WorkflowStartDate, 
                      HistoryTask_1.JobDetailXML, HistoryTask_1.RequireReview, HistoryTask_1.OriginWorkflowID, APP.WorkflowApproverID AS Expr1, 
                      APP.WorkflowID AS Expr2, APP.UserID, APP.WorkflowApproverType, APP.RequireSignature, APP.OrderNumber AS Expr3, APP.CreateDate, 
                      APP.ModifyDate, HistoryTask_1.Hidden
FROM         (SELECT     A.WorkflowID, A.WorkFlowStepHistoryID, ISNULL(D.OrderNumber, 0) AS OrderNumber, A.SubmitDate AS TaskStartDate, A.Remark, A.Status, 
                                              B.TemplateID, F.TemplateDesc, ISNULL(B.FaxCoverID, 0) AS FaxCoverID, ISNULL(G.CoverDesc, N'') AS FaxCoverDesc, 
                                              B.SubmitterID AS WorkflowOwnerID, C.UserName AS WorkflowOwnerName, B.SubmitDate AS WorkflowStartDate, B.JobDetailXML, 
                                              B.RequireReview, B.OriginWorkflowID, A.Hidden
                       FROM          dbo.WorkflowStepHistory AS A  WITH (NOLOCK) LEFT OUTER JOIN
                                              dbo.Workflow AS B  WITH (NOLOCK) ON A.WorkflowID = B.WorkflowID LEFT OUTER JOIN
                                              dbo.[User] AS C  WITH (NOLOCK) ON B.SubmitterID = C.UserID LEFT OUTER JOIN
                                              dbo.WorkflowApprover AS D  WITH (NOLOCK) ON A.WorkflowApproverID = D.WorkflowApproverID LEFT OUTER JOIN
                                              dbo.Template AS F  WITH (NOLOCK) ON B.TemplateID = F.TemplateID LEFT OUTER JOIN
                                              dbo.FaxCover AS G  WITH (NOLOCK) ON B.FaxCoverID = G.FaxCoverID
                       WHERE      (A.WorkFlowStepHistoryID IN
                                                  (SELECT     MAX(WorkFlowStepHistoryID) AS Expr1
                                                    FROM          dbo.WorkflowStepHistory AS WorkflowStepHistory_3  WITH (NOLOCK)
                                                    WHERE      (WorkflowID = WorkflowID)
                                                    GROUP BY WorkflowID)) AND (A.Status = 2) AND (B.RequireReview = 1)) AS HistoryTask_1 LEFT OUTER JOIN
                      dbo.WorkflowApprover AS APP  WITH (NOLOCK) ON HistoryTask_1.WorkflowID = APP.WorkflowID AND HistoryTask_1.OrderNumber + 1 = APP.OrderNumber AND 
                      HistoryTask_1.Status <> 3
WHERE     (HistoryTask_1.TemplateID <> 0) AND (HistoryTask_1.Hidden = 0)
UNION ALL
SELECT     ISNULL(APP.WorkflowApproverID, 0) AS WorkflowApproverID, ISNULL(APP.UserID, HistoryTask_3.WorkflowOwnerID) AS WorkflowApproverUserID, 
                      HistoryTask_3.WorkflowID, HistoryTask_3.WorkFlowStepHistoryID, HistoryTask_3.OrderNumber, HistoryTask_3.TaskStartDate, 
                      HistoryTask_3.Remark, 1 AS Expr4, HistoryTask_3.TemplateID, HistoryTask_3.TemplateDesc, HistoryTask_3.FaxCoverID, 
                      HistoryTask_3.FaxCoverDesc, HistoryTask_3.WorkflowOwnerID, HistoryTask_3.WorkflowOwnerName, HistoryTask_3.WorkflowStartDate, 
                      HistoryTask_3.JobDetailXML, HistoryTask_3.RequireReview, HistoryTask_3.OriginWorkflowID, APP.WorkflowApproverID AS Expr1, 
                      APP.WorkflowID AS Expr2, APP.UserID, APP.WorkflowApproverType, APP.RequireSignature, APP.OrderNumber AS Expr3, APP.CreateDate, 
                      APP.ModifyDate, HistoryTask_3.Hidden
FROM         (SELECT     A.WorkflowID, A.WorkFlowStepHistoryID, ISNULL(D.OrderNumber, 0) AS OrderNumber, A.SubmitDate AS TaskStartDate, A.Remark, A.Status, 
                                              B.TemplateID, F.TemplateDesc, ISNULL(B.FaxCoverID, 0) AS FaxCoverID, ISNULL(G.CoverDesc, N'') AS FaxCoverDesc, 
                                              B.SubmitterID AS WorkflowOwnerID, C.UserName AS WorkflowOwnerName, B.SubmitDate AS WorkflowStartDate, B.JobDetailXML, 
                                              B.RequireReview, B.OriginWorkflowID, A.Hidden
                       FROM          dbo.WorkflowStepHistory AS A  WITH (NOLOCK)  LEFT OUTER JOIN
                                              dbo.Workflow AS B  WITH (NOLOCK) ON A.WorkflowID = B.WorkflowID LEFT OUTER JOIN
                                              dbo.[User] AS C  WITH (NOLOCK) ON B.SubmitterID = C.UserID INNER JOIN
                                              dbo.WorkflowApprover AS D  WITH (NOLOCK) ON A.WorkflowApproverID = D.WorkflowApproverID LEFT OUTER JOIN
                                              dbo.Template AS F  WITH (NOLOCK) ON B.TemplateID = F.TemplateID LEFT OUTER JOIN
                                              dbo.FaxCover AS G  WITH (NOLOCK) ON B.FaxCoverID = G.FaxCoverID
                       WHERE      (A.WorkFlowStepHistoryID IN
                                                  (SELECT     MAX(WorkFlowStepHistoryID) AS Expr1
                                                    FROM          dbo.WorkflowStepHistory AS WorkflowStepHistory_2 WITH (NOLOCK) 
                                                    WHERE      (WorkflowID = WorkflowID)
                                                    GROUP BY WorkflowID)) AND (A.Status = 1) AND (D.GroupID IS NOT NULL) AND (D.RejecterCount = 0) AND (D.ApproverCount < D.MinRes)) 
                      AS HistoryTask_3 LEFT OUTER JOIN
                      dbo.WorkflowApprover AS APP  WITH (NOLOCK) ON HistoryTask_3.WorkflowID = APP.WorkflowID AND HistoryTask_3.OrderNumber = APP.OrderNumber
WHERE     (APP.ProcessOrNot = 0) AND (HistoryTask_3.TemplateID <> 0) AND (HistoryTask_3.Hidden = 0)
UNION ALL
SELECT     ISNULL(APP.WorkflowApproverID, 0) AS WorkflowApproverID, ISNULL(APP.UserID, HistoryTask_2.WorkflowOwnerID) AS WorkflowApproverUserID, 
                      HistoryTask_2.WorkflowID, HistoryTask_2.WorkFlowStepHistoryID, HistoryTask_2.OrderNumber, HistoryTask_2.TaskStartDate, 
                      HistoryTask_2.Remark, HistoryTask_2.Status, HistoryTask_2.TemplateID, HistoryTask_2.TemplateDesc, HistoryTask_2.FaxCoverID, 
                      HistoryTask_2.FaxCoverDesc, HistoryTask_2.WorkflowOwnerID, HistoryTask_2.WorkflowOwnerName, HistoryTask_2.WorkflowStartDate, 
                      HistoryTask_2.JobDetailXML, HistoryTask_2.RequireReview, HistoryTask_2.OriginWorkflowID, APP.WorkflowApproverID AS Expr1, 
                      APP.WorkflowID AS Expr2, APP.UserID, APP.WorkflowApproverType, APP.RequireSignature, APP.OrderNumber AS Expr3, APP.CreateDate, 
                      APP.ModifyDate, HistoryTask_2.Hidden
FROM         (SELECT     A.WorkflowID, A.WorkFlowStepHistoryID, ISNULL(D.OrderNumber, 0) AS OrderNumber, A.SubmitDate AS TaskStartDate, A.Remark, 
                                              dbo.GetGroupStatus(D.ApproverCount, D.RejecterCount, D.MinRes, D.TotalCount) AS Status, B.TemplateID, F.TemplateDesc, 
                                              ISNULL(B.FaxCoverID, 0) AS FaxCoverID, ISNULL(G.CoverDesc, N'') AS FaxCoverDesc, B.SubmitterID AS WorkflowOwnerID, 
                                              C.UserName AS WorkflowOwnerName, B.SubmitDate AS WorkflowStartDate, B.JobDetailXML, B.RequireReview, B.OriginWorkflowID, 
                                              A.Hidden
                       FROM          dbo.WorkflowStepHistory AS A  WITH (NOLOCK) LEFT OUTER JOIN
                                              dbo.Workflow AS B  WITH (NOLOCK) ON A.WorkflowID = B.WorkflowID LEFT OUTER JOIN
                                              dbo.[User] AS C  WITH (NOLOCK) ON B.SubmitterID = C.UserID INNER JOIN
                                              dbo.WorkflowApprover AS D  WITH (NOLOCK) ON A.WorkflowApproverID = D.WorkflowApproverID LEFT OUTER JOIN
                                              dbo.Template AS F  WITH (NOLOCK) ON B.TemplateID = F.TemplateID LEFT OUTER JOIN
                                              dbo.FaxCover AS G  WITH (NOLOCK) ON B.FaxCoverID = G.FaxCoverID
                       WHERE      (A.WorkFlowStepHistoryID IN
                                                  (SELECT     MAX(WorkFlowStepHistoryID) AS Expr1
                                                    FROM          dbo.WorkflowStepHistory AS WorkflowStepHistory_1 WITH (NOLOCK) 
                                                    WHERE      (WorkflowID = WorkflowID)
                                                    GROUP BY WorkflowID)) AND (A.Status = 1) AND (D.GroupID IS NOT NULL) AND (D.ApproverCount >= D.MinRes)) 
                      AS HistoryTask_2 LEFT OUTER JOIN
                      dbo.WorkflowApprover AS APP  WITH (NOLOCK) ON HistoryTask_2.WorkflowID = APP.WorkflowID AND HistoryTask_2.OrderNumber + 1 = APP.OrderNumber AND 
                      HistoryTask_2.Status <> 3
WHERE     (HistoryTask_2.TemplateID <> 0) AND (HistoryTask_2.Hidden = 0)



GO



	'

END
GO
/****** Object:  StoredProcedure [dbo].[sp_TEST2]    Script Date: 5/17/2022 9:57:52 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	
CREATE PROCEDURE [dbo].[sp_TEST2]
AS
	SET DATEFIRST 1;
	SELECT * FROM [vwJobTodayExecutionTime]
GO
/****** Object:  StoredProcedure [dbo].[sp_Update_Batch_Date]    Script Date: 5/17/2022 9:57:52 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_Update_Batch_Date]
(@pDate DATETIME)
AS
BEGIN
/*
sp_Update_Batch_Date '2021/12/17'
*/
DECLARE @pAfterDate DATETIME
DECLARE @pAfterDate2 DATETIME

SET @pAfterDate = DATEADD(DAY,-1,@pDate)
SET @pAfterDate2 = DATEADD(DAY,-1,@pAfterDate)

 UPDATE  DSBDB..TB_CSS_DAY_BATCH_DATE SET batch_date = @pDate
 UPDATE BPSS.dbo.TB_BatchDate_Control SET BatchDate = @pDate
UPDATE BPSS..TB_CTRISKS_BATCHDATE SET BATCHDATE = @pDate,LASTUPDATE = @pAfterDate WHERE BATCHDATE IS NOT NULL
UPDATE DSBDB..TB_RTGL_IPOD_SUB_BATCH_DATE SET Batch_date = @pDate where COMPANYKEY =1 
UPDATE DSBDB.dbo.TB_CYCLEDATE SET CURRCYCLE = @pDate,PREVCYCLE = @pAfterDate WHERE UPPER(RERUN)='N'  
UPDATE DSBDB.dbo.TB_CYCLEDATE SET CURRCYCLE = @pAfterDate,PREVCYCLE = @pAfterDate2 WHERE UPPER(RERUN)='Y'  
END
GO
/****** Object:  StoredProcedure [dbo].[sp_Updated_CBP2_With_Production_Script_Date_Compare]    Script Date: 5/17/2022 9:57:52 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[sp_Updated_CBP2_With_Production_Script_Date_Compare]
(
@DBName NVARCHAR(100),
@dtCutoffDate DATETIME,
@sSourceScript VARCHAR(4000))
/*
EXEC sp_Updated_CBP2_With_Production_Script_Date_Compare 'DSBDB','2021/01/01','\\uatvutdb02\CoreBank_P2\SQL_UPDATE\DSBDB\'
EXEC sp_Updated_CBP2_With_Production_Script_Date_Compare 'BPSS','2021/01/01','\\uatvutdb02\CoreBank_P2\SQL_UPDATE\BPSS\'
*/
AS
BEGIN
	DECLARE @sScript  NVARCHAR(MAX)

	SET @sScript = '
	DECLARE @sSourcePath VARCHAR(1000)
	DECLARE @sTargetPath VARCHAR(1000)
	DECLARE @sSourceScript VARCHAR(4000)
	DECLARE @sTargetScript VARCHAR(4000)
	DECLARE @sYear INT

	SET @sYear = '+ CONVERT(NVARCHAR,YEAR(@dtCutoffDate)) +'
	SET @sSourcePath = '''+ @sSourceScript +'''

	SET @sSourceScript = ''dir /S /A:-D /B "''+ @sSourcePath +''"'';
	SET @sTargetScript = ''dir /A:-D /B "''+ @sTargetPath +''"'';


	DECLARE @tbl_source_name TABLE
	(
		rData NVARCHAR(MAX)
	)

	DECLARE @tbl_target_name TABLE
	(
		rData NVARCHAR(MAX)
	)

	INSERT INTO @tbl_source_name
	EXEC xp_cmdshell @sSourceScript;

	SELECT rData,REPLACE(RIGHT(TRIM(rData), CHARINDEX(''\'', REVERSE(TRIM(rData)),1) - 1),''.sql'','''') AS rName 
	INTO #tmp_change
	FROM @tbl_source_name ORDER BY rName

	SELECT name, create_date, modify_date FROM '+ @DBName +'.sys.objects WHERE type = ''P'' AND YEAR(modify_date) = 2021 
	AND UPPER(TRIM(name)) IN (SELECT UPPER(TRIM(rName)) FROM #tmp_change)
	ORDER BY modify_date DESC


	SELECT name, create_date, modify_date FROM '+ @DBName +'.sys.objects WHERE type = ''V'' AND YEAR(modify_date) = 2021 
	AND UPPER(TRIM(name)) IN (SELECT UPPER(TRIM(rName)) FROM #tmp_change)
	ORDER BY modify_date DESC


	SELECT name, create_date, modify_date FROM '+ @DBName +'.sys.objects WHERE type = ''U'' AND YEAR(modify_date) = 2021 
	AND UPPER(TRIM(name)) IN (SELECT UPPER(TRIM(rName)) FROM #tmp_change)
	ORDER BY modify_date DESC'


		PRINT @sScript
		EXEC sp_executesql @sScript

END
GO
/****** Object:  StoredProcedure [dbo].[sp_UserAddRole]    Script Date: 5/17/2022 9:57:52 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_UserAddRole]
As
BEGIN
-- HiTrust DB Server Migrate

PRINT 'USERADDROLE'

-- Reset password
--use master ;
--ALTER LOGIN sa WITH PASSWORD =  'Abcd1234';
--ALTER LOGIN hitrust WITH PASSWORD =  'password';
--ALTER LOGIN mxreadonly WITH PASSWORD =  'asdf5678';
--ALTER LOGIN dsbnetsrv01 WITH PASSWORD =  'dsbnetsrv010412';
--ALTER LOGIN dsbreadonly WITH PASSWORD =  'password';
--ALTER LOGIN mvbreadonly WITH PASSWORD =  'password';
--ALTER LOGIN cssuser WITH PASSWORD =  'css789usr';
--ALTER LOGIN bcmreadonly WITH PASSWORD =  'password';
----ALTER LOGIN UATVUTDBCB01\_aspnet WITH PASSWORD =  '9X7uan4#';
----ALTER LOGIN UATVUTDBCB01\dsbadmguy WITH PASSWORD =  '???';


---- create user and grant role
--use hitrust;
 
--DROP USER [cssuser]
--DROP USER [dsbnetsrv01]
--DROP USER [dsbreadonly]
--DROP USER [hitrust]
--DROP USER [mvbreadonly]
--DROP USER [mxreadonly]
--DROP USER [UATVUTDBCB01\_aspnet]
--DROP USER [bcmreadonly]

--CREATE USER [cssuser] FOR LOGIN [cssuser] ;
--CREATE USER [dsbnetsrv01] FOR LOGIN [dsbnetsrv01];
--CREATE USER [dsbreadonly] FOR LOGIN [dsbreadonly];
--CREATE USER [hitrust] FOR LOGIN [hitrust];
--CREATE USER [mvbreadonly] FOR LOGIN [mvbreadonly];
--CREATE USER [mxreadonly] FOR LOGIN [mxreadonly];
--CREATE USER [UATVUTDBCB01\_aspnet] FOR LOGIN [UATVUTDBCB01\_aspnet];
--CREATE USER [bcmreadonly] FOR LOGIN [bcmreadonly];
--EXEC sp_AddRoleMember 'db_owner', 'UATVUTDBCB01\_aspnet';
--EXEC sp_AddRoleMember 'db_owner', 'mxreadonly';
--EXEC sp_AddRoleMember 'db_datareader', 'mxreadonly';
--EXEC sp_AddRoleMember 'db_owner', 'hitrust';
--EXEC sp_AddRoleMember 'db_accessadmin', 'hitrust';
--EXEC sp_AddRoleMember 'db_securityadmin', 'hitrust';
--EXEC sp_AddRoleMember 'db_ddladmin', 'hitrust';
--EXEC sp_AddRoleMember 'db_backupoperator', 'hitrust';
--EXEC sp_AddRoleMember 'db_datareader', 'hitrust';
--EXEC sp_AddRoleMember 'db_datawriter', 'hitrust';
--EXEC sp_AddRoleMember 'db_denydatareader', 'hitrust';
--EXEC sp_AddRoleMember 'db_denydatawriter', 'hitrust';
--EXEC sp_AddRoleMember 'db_datareader', 'dsbnetsrv01';


---- create user and grant role
--use DSBDB ;
--DROP USER [cssuser]
--DROP USER [dsbnetsrv01]
--DROP USER [dsbreadonly]
--DROP USER [mvbreadonly]
--DROP USER [mxreadonly]
--DROP USER [UATVUTDBCB01\_aspnet]

--CREATE USER [cssuser] FOR LOGIN [cssuser] ;
--CREATE USER [dsbnetsrv01] FOR LOGIN [dsbnetsrv01];
--CREATE USER [dsbreadonly] FOR LOGIN [dsbreadonly];
--CREATE USER [mvbreadonly] FOR LOGIN [mvbreadonly];
--CREATE USER [mxreadonly] FOR LOGIN [mxreadonly];
--CREATE USER [UATVUTDBCB01\_aspnet] FOR LOGIN [UATVUTDBCB01\_aspnet];
--EXEC sp_AddRoleMember 'db_owner', 'cssuser';
--EXEC sp_AddRoleMember 'db_owner', 'dsbnetsrv01';
--EXEC sp_AddRoleMember 'db_owner', 'mxreadonly';
--EXEC sp_AddRoleMember 'db_datareader', 'mxreadonly';
--EXEC sp_AddRoleMember 'db_owner', 'UATVUTDBCB01\_aspnet';

---- create user and grant role
--use MVBDB ;
--DROP USER [cssuser]
--DROP USER [dsbnetsrv01]
--DROP USER [mvbreadonly]
--DROP USER [mxreadonly]
--DROP USER [UATVUTDBCB01\_aspnet]

--CREATE USER [cssuser] FOR LOGIN [cssuser] ;
--CREATE USER [dsbnetsrv01] FOR LOGIN [dsbnetsrv01];
--CREATE USER [mvbreadonly] FOR LOGIN [mvbreadonly];
--CREATE USER [mxreadonly] FOR LOGIN [mxreadonly];
--CREATE USER [UATVUTDBCB01\_aspnet] FOR LOGIN [UATVUTDBCB01\_aspnet];
--EXEC sp_AddRoleMember 'db_owner', 'cssuser';
--EXEC sp_AddRoleMember 'db_owner', 'mxreadonly';
--EXEC sp_AddRoleMember 'db_datareader', 'mxreadonly';
--EXEC sp_AddRoleMember 'db_owner', 'UATVUTDBCB01\_aspnet';

---- create user and grant role
--use BCMDB ;
--DROP USER [cssuser]
--DROP USER [dsbnetsrv01]
--DROP USER [mxreadonly]
--DROP USER [UATVUTDBCB01\_aspnet]
--DROP USER [bcmreadonly]

--CREATE USER [cssuser] FOR LOGIN [cssuser]
--CREATE USER [dsbnetsrv01] FOR LOGIN [dsbnetsrv01]
--CREATE USER [mxreadonly] FOR LOGIN [mxreadonly]
--CREATE USER [UATVUTDBCB01\_aspnet] FOR LOGIN [UATVUTDBCB01\_aspnet]
--CREATE USER [bcmreadonly] FOR LOGIN [bcmreadonly]
--EXEC sp_AddRoleMember 'db_owner', 'cssuser'
--EXEC sp_AddRoleMember 'db_owner', 'dsbnetsrv01'
--EXEC sp_AddRoleMember 'db_owner', 'mxreadonly'
--EXEC sp_AddRoleMember 'db_datareader', 'mxreadonly'
--EXEC sp_AddRoleMember 'db_owner', 'UATVUTDBCB01\_aspnet'

---- create user and grant role
--use bpss ;

--DROP USER [cssuser]
--DROP USER [dsbnetsrv01]
--DROP USER [dsbreadonly]
--DROP USER [mvbreadonly]
--DROP USER [mxreadonly] 
--DROP USER [UATVUTDBCB01\_aspnet] 
--DROP USER [bcmreadonly]

--CREATE USER [cssuser] FOR LOGIN [cssuser]
--CREATE USER [dsbnetsrv01] FOR LOGIN [dsbnetsrv01]
--CREATE USER [dsbreadonly] FOR LOGIN [dsbreadonly]
--CREATE USER [mvbreadonly] FOR LOGIN [mvbreadonly]
--CREATE USER [mxreadonly] FOR LOGIN [mxreadonly]
--CREATE USER [UATVUTDBCB01\_aspnet] FOR LOGIN [UATVUTDBCB01\_aspnet]
--CREATE USER [bcmreadonly] FOR LOGIN [bcmreadonly]
--EXEC sp_AddRoleMember 'db_owner', 'cssuser'
--EXEC sp_AddRoleMember 'db_owner', 'dsbnetsrv01'
--EXEC sp_AddRoleMember 'db_owner', 'mxreadonly'
--EXEC sp_AddRoleMember 'db_owner', 'UATVUTDBCB01\_aspnet'



END
GO
/****** Object:  StoredProcedure [dbo].[sp_WhoIsActive]    Script Date: 5/17/2022 9:57:52 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


/*********************************************************************************************
Who Is Active? v10.00 (2010-10-21)
(C) 2007-2010, Adam Machanic

Feedback: mailto:amachanic@gmail.com
Updates: http://sqlblog.com/blogs/adam_machanic/archive/tags/who+is+active/default.aspx
"Beta" Builds: http://sqlblog.com/files/folders/beta/tags/who+is+active/default.aspx

License: 
	Who is Active? is free to download and use for personal, educational, and internal 
	corporate purposes, provided that this header is preserved. Redistribution or sale 
	of Who is Active?, in whole or in part, is prohibited without the author's express 
	written consent.
*********************************************************************************************/
create PROC [dbo].[sp_WhoIsActive]
(
--~
	--Filters--Both inclusive and exclusive
	--Set either filter to '' to disable
	--Valid filter types are: session, program, database, login, and host
	--Session is a session ID, and either 0 or '' can be used to indicate "all" sessions
	--All other filter types support % or _ as wildcards
	@filter sysname = '',
	@filter_type VARCHAR(10) = 'session',
	@not_filter sysname = '',
	@not_filter_type VARCHAR(10) = 'session',

	--Retrieve data about the calling session?
	@show_own_spid BIT = 0,

	--Retrieve data about system sessions?
	@show_system_spids BIT = 0,

	--Controls how sleeping SPIDs are handled, based on the idea of levels of interest
	--0 does not pull any sleeping SPIDs
	--1 pulls only those sleeping SPIDs that also have an open transaction
	--2 pulls all sleeping SPIDs
	@show_sleeping_spids TINYINT = 1,

	--If 1, gets the full stored procedure or running batch, when available
	--If 0, gets only the actual statement that is currently running in the batch or procedure
	@get_full_inner_text BIT = 0,

	--Get associated query plans for running tasks, if available
	--If @get_plans = 1, gets the plan based on the request's statement offset
	--If @get_plans = 2, gets the entire plan based on the request's plan_handle
	@get_plans TINYINT = 0,

	--Get the associated outer ad hoc query or stored procedure call, if available
	@get_outer_command BIT = 0,

	--Enables pulling transaction log write info and transaction duration
	@get_transaction_info BIT = 0,

	--Get information on active tasks, based on three interest levels
	--Level 0 does not pull any task-related information
	--Level 1 is a lightweight mode that pulls the top non-CXPACKET wait, giving preference to blockers
	--Level 2 pulls all available task-based metrics, including: 
	--number of active tasks, current wait stats, physical I/O, context switches, and blocker information
	@get_task_info TINYINT = 1,

	--Gets associated locks for each request, aggregated in an XML format
	@get_locks BIT = 0,

	--Get average time for past runs of an active query
	--(based on the combination of plan handle, sql handle, and offset)
	@get_avg_time BIT = 0,

	--Get additional non-performance-related information about the session or request
	--text_size, language, date_format, date_first, quoted_identifier, arithabort, ansi_null_dflt_on, 
	--ansi_defaults, ansi_warnings, ansi_padding, ansi_nulls, concat_null_yields_null, 
	--transaction_isolation_level, lock_timeout, deadlock_priority, row_count, original_login_name
	@get_additional_info BIT = 0,

	--Walk the blocking chain and count the number of 
	--total SPIDs blocked all the way down by a given session
	--Also enables task_info Level 1, if @get_task_info is set to 0
	@find_block_leaders BIT = 0,

	--Pull deltas on various metrics
	--Interval in seconds to wait before doing the second data pull
	@delta_interval TINYINT = 0,

	--List of desired output columns, in desired order
	--Note that the final output will be the intersection of all enabled features and all 
	--columns in the list. Therefore, only columns associated with enabled features will 
	--actually appear in the output. Likewise, removing columns from this list may effectively
	--disable features, even if they are turned on
	--
	--Each element in this list must be one of the valid output column names. Names must be
	--delimited by square brackets. White space, formatting, and additional characters are
	--allowed, as long as the list contains exact matches of delimited valid column names.
	@output_column_list VARCHAR(8000) = '[dd%][session_id][sql_text][sql_command][login_name][wait_info][tasks][tran_log%][cpu%][temp%][block%][reads%][writes%][context%][physical%][query_plan][locks][%]',

	--Column(s) by which to sort output, optionally with sort directions. 
		--Valid column choices:
		--session_id, physical_io, reads, physical_reads, writes, tempdb_allocations,
		--tempdb_current, CPU, context_switches, used_memory, physical_io_delta, 
		--reads_delta, physical_reads_delta, writes_delta, tempdb_allocations_delta, 
		--tempdb_current_delta, CPU_delta, context_switches_delta, used_memory_delta, 
		--tasks, tran_start_time, open_tran_count, blocking_session_id, blocked_session_count,
		--percent_complete, host_name, login_name, database_name, start_time
		--
		--Note that column names in the list must be bracket-delimited. Commas and/or white
		--space are not required. 
	@sort_order VARCHAR(500) = '[start_time] ASC',

	--Formats some of the output columns in a more "human readable" form
	--0 disables outfput format
	--1 formats the output for variable-width fonts
	--2 formats the output for fixed-width fonts
	@format_output TINYINT = 1,

	--If set to a non-blank value, the script will attempt to insert into the specified 
	--destination table. Please note that the script will not verify that the table exists, 
	--or that it has the correct schema, before doing the insert.
	--Table can be specified in one, two, or three-part format
	@destination_table VARCHAR(4000) = '',

	--If set to 1, no data collection will happen and no result set will be returned; instead,
	--a CREATE TABLE statement will be returned via the @schema parameter, which will match 
	--the schema of the result set that would be returned by using the same collection of the
	--rest of the parameters. The CREATE TABLE statement will have a placeholder token of 
	--<table_name> in place of an actual table name.
	@return_schema BIT = 0,
	@schema VARCHAR(MAX) = NULL OUTPUT,

	--Help! What do I do?
	@help BIT = 0
--~
)
/*
OUTPUT COLUMNS
--------------
Formatted/Non:	[session_id] [smallint] NOT NULL
	Session ID (a.k.a. SPID)

Formatted:		[dd hh:mm:ss.mss] [varchar](15) NULL
Non-Formatted:	<not returned>
	For an active request, time the query has been running
	For a sleeping session, time the session has been connected

Formatted:		[dd hh:mm:ss.mss (avg)] [varchar](15) NULL
Non-Formatted:	[avg_elapsed_time] [int] NULL
	(Requires @get_avg_time option)
	How much time has the active portion of the query taken in the past, on average?

Formatted:		[physical_io] [varchar](30) NULL
Non-Formatted:	[physical_io] [bigint] NULL
	Shows the number of physical I/Os, for active requests

Formatted:		[reads] [varchar](30) NOT NULL
Non-Formatted:	[reads] [bigint] NOT NULL
	For an active request, number of reads done for the current query
	For a sleeping session, total number of reads done over the lifetime of the session

Formatted:		[physical_reads] [varchar](30) NOT NULL
Non-Formatted:	[physical_reads] [bigint] NOT NULL
	For an active request, number of physical reads done for the current query
	For a sleeping session, total number of physical reads done over the lifetime of the session

Formatted:		[writes] [varchar](30) NOT NULL
Non-Formatted:	[writes] [bigint] NOT NULL
	For an active request, number of writes done for the current query
	For a sleeping session, total number of writes done over the lifetime of the session

Formatted:		[tempdb_allocations] [varchar](30) NOT NULL
Non-Formatted:	[tempdb_allocations] [bigint] NOT NULL
	For an active request, number of TempDB writes done for the current query
	For a sleeping session, total number of TempDB writes done over the lifetime of the session

Formatted:		[tempdb_current] [varchar](30) NOT NULL
Non-Formatted:	[tempdb_current] [bigint] NOT NULL
	For an active request, number of TempDB pages currently allocated for the query
	For a sleeping session, number of TempDB pages currently allocated for the session

Formatted:		[CPU] [varchar](30) NOT NULL
Non-Formatted:	[CPU] [int] NOT NULL
	For an active request, total CPU time consumed by the current query
	For a sleeping session, total CPU time consumed over the lifetime of the session

Formatted:		[context_switches] [varchar](30) NULL
Non-Formatted:	[context_switches] [bigint] NULL
	Shows the number of context switches, for active requests

Formatted:		[used_memory] [varchar](30) NOT NULL
Non-Formatted:	[used_memory] [bigint] NOT NULL
	For an active request, total memory consumption for the current query
	For a sleeping session, total current memory consumption

Formatted:		[physical_io_delta] [varchar](30) NULL
Non-Formatted:	[physical_io_delta] [bigint] NULL
	(Requires @delta_interval option)
	Difference between the number of physical I/Os reported on the first and second collections. 
	If the request started after the first collection, the value will be NULL

Formatted:		[reads_delta] [varchar](30) NULL
Non-Formatted:	[reads_delta] [bigint] NULL
	(Requires @delta_interval option)
	Difference between the number of reads reported on the first and second collections. 
	If the request started after the first collection, the value will be NULL

Formatted:		[physical_reads_delta] [varchar](30) NULL
Non-Formatted:	[physical_reads_delta] [bigint] NULL
	(Requires @delta_interval option)
	Difference between the number of physical reads reported on the first and second collections. 
	If the request started after the first collection, the value will be NULL

Formatted:		[writes_delta] [varchar](30) NULL
Non-Formatted:	[writes_delta] [bigint] NULL
	(Requires @delta_interval option)
	Difference between the number of writes reported on the first and second collections. 
	If the request started after the first collection, the value will be NULL

Formatted:		[tempdb_allocations_delta] [varchar](30) NULL
Non-Formatted:	[tempdb_allocations_delta] [bigint] NULL
	(Requires @delta_interval option)
	Difference between the number of TempDB writes reported on the first and second collections. 
	If the request started after the first collection, the value will be NULL

Formatted:		[tempdb_current_delta] [varchar](30) NULL
Non-Formatted:	[tempdb_current_delta] [bigint] NULL
	(Requires @delta_interval option)
	Difference between the number of allocated TempDB pages reported on the first and second 
	collections. If the request started after the first collection, the value will be NULL

Formatted:		[CPU_delta] [varchar](30) NULL
Non-Formatted:	[CPU_delta] [int] NULL
	(Requires @delta_interval option)
	Difference between the CPU time reported on the first and second collections. 
	If the request started after the first collection, the value will be NULL

Formatted:		[context_switches_delta] [varchar](30) NULL
Non-Formatted:	[context_switches_delta] [bigint] NULL
	(Requires @delta_interval option)
	Difference between the context switches count reported on the first and second collections
	If the request started after the first collection, the value will be NULL

Formatted:		[used_memory_delta] [varchar](30) NULL
Non-Formatted:	[used_memory_delta] [bigint] NULL
	Difference between the memory usage reported on the first and second collections
	If the request started after the first collection, the value will be NULL

Formatted:		[tasks] [varchar](30) NULL
Non-Formatted:	[tasks] [smallint] NULL
	Number of worker tasks currently allocated, for active requests

Formatted/Non:	[status] [varchar](30) NOT NULL
	Activity status for the session (running, sleeping, etc)

Formatted/Non:	[wait_info] [nvarchar](4000) NULL
	Aggregates wait information, in the following format:
		(Ax: Bms/Cms/Dms)E
	A is the number of waiting tasks currently waiting on resource type E. B/C/D are wait
	times, in milliseconds. If only one thread is waiting, its wait time will be shown as B.
	If two tasks are waiting, each of their wait times will be shown (B/C). If three or more 
	tasks are waiting, the minimum, average, and maximum wait times will be shown (B/C/D).
	If wait type E is a page latch wait and the page is of a "special" type (e.g. PFS, GAM, SGAM), 
	the page type will be identified.
	If wait type E is CXPACKET, the nodeId from the query plan will be identified

Formatted/Non:	[locks] [xml] NULL
	(Requires @get_locks option)
	Aggregates lock information, in XML format.
	The lock XML includes the lock mode, locked object, and aggregates the number of requests. 
	Attempts are made to identify locked objects by name

Formatted/Non:	[tran_start_time] [datetime] NULL
	(Requires @get_transaction_info option)
	Date and time that the first transaction opened by a session caused a transaction log 
	write to occur.

Formatted/Non:	[tran_log_writes] [nvarchar](4000) NULL
	(Requires @get_transaction_info option)
	Aggregates transaction log write information, in the following format:
	A:wB (C kB)
	A is a database that has been touched by an active transaction
	B is the number of log writes that have been made in the database as a result of the transaction
	C is the number of log kilobytes consumed by the log records

Formatted:		[open_tran_count] [varchar](30) NULL
Non-Formatted:	[open_tran_count] [smallint] NULL
	Shows the number of open transactions the session has open

Formatted:		[sql_command] [xml] NULL
Non-Formatted:	[sql_command] [nvarchar](max) NULL
	(Requires @get_outer_command option)
	Shows the "outer" SQL command, i.e. the text of the batch or RPC sent to the server, 
	if available

Formatted:		[sql_text] [xml] NULL
Non-Formatted:	[sql_text] [nvarchar](max) NULL
	Shows the SQL text for active requests or the last statement executed
	for sleeping sessions, if available in either case.
	If @get_full_inner_text option is set, shows the full text of the batch.
	Otherwise, shows only the active statement within the batch.
	If the query text is locked, a special timeout message will be sent, in the following format:
		<timeout_exceeded />
	If an error occurs, an error message will be sent, in the following format:
		<error message="message" />

Formatted/Non:	[query_plan] [xml] NULL
	(Requires @get_plans option)
	Shows the query plan for the request, if available.
	If the plan is locked, a special timeout message will be sent, in the following format:
		<timeout_exceeded />
	If an error occurs, an error message will be sent, in the following format:
		<error message="message" />

Formatted/Non:	[blocking_session_id] [smallint] NULL
	When applicable, shows the blocking SPID

Formatted:		[blocked_session_count] [varchar](30) NULL
Non-Formatted:	[blocked_session_count] [smallint] NULL
	(Requires @find_block_leaders option)
	The total number of SPIDs blocked by this session,
	all the way down the blocking chain.

Formatted:		[percent_complete] [varchar](30) NULL
Non-Formatted:	[percent_complete] [real] NULL
	When applicable, shows the percent complete (e.g. for backups, restores, and some rollbacks)

Formatted/Non:	[host_name] [sysname] NOT NULL
	Shows the host name for the connection

Formatted/Non:	[login_name] [sysname] NOT NULL
	Shows the login name for the connection

Formatted/Non:	[database_name] [sysname] NULL
	Shows the connected database

Formatted/Non:	[program_name] [sysname] NULL
	Shows the reported program/application name

Formatted/Non:	[additional_info] [xml] NULL
	(Requires @get_additional_info option)
	Returns additional non-performance-related session/request information

Formatted/Non:	[start_time] [datetime] NOT NULL
	For active requests, shows the time the request started
	For sleeping sessions, shows the time the connection was made

Formatted/Non:	[request_id] [int] NULL
	For active requests, shows the request_id
	Should be 0 unless MARS is being used

Formatted/Non:	[collection_time] [datetime] NOT NULL
	Time that this script's final SELECT ran
*/
AS
BEGIN
	SET NOCOUNT ON; 
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
	SET QUOTED_IDENTIFIER ON;
	SET ANSI_PADDING ON;

	IF
		@filter IS NULL
		OR @filter_type IS NULL
		OR @not_filter IS NULL
		OR @not_filter_type IS NULL
		OR @show_own_spid IS NULL
		OR @show_system_spids IS NULL
		OR @show_sleeping_spids IS NULL
		OR @get_full_inner_text IS NULL
		OR @get_plans IS NULL
		OR @get_outer_command IS NULL
		OR @get_transaction_info IS NULL
		OR @get_task_info IS NULL
		OR @get_locks IS NULL
		OR @get_avg_time IS NULL
		OR @get_additional_info IS NULL
		OR @find_block_leaders IS NULL
		OR @delta_interval IS NULL
		OR @format_output IS NULL
		OR @output_column_list IS NULL
		OR @sort_order IS NULL
		OR @return_schema IS NULL
		OR @destination_table IS NULL
		OR @help IS NULL
	BEGIN;
		RAISERROR('Input parameters cannot be NULL', 16, 1);
		RETURN;
	END;
	
	IF @filter_type NOT IN ('session', 'program', 'database', 'login', 'host')
	BEGIN;
		RAISERROR('Valid filter types are: session, program, database, login, host', 16, 1);
		RETURN;
	END;
	
	IF @filter_type = 'session' AND @filter LIKE '%[^0123456789]%'
	BEGIN;
		RAISERROR('Session filters must be valid integers', 16, 1);
		RETURN;
	END;
	
	IF @not_filter_type NOT IN ('session', 'program', 'database', 'login', 'host')
	BEGIN;
		RAISERROR('Valid filter types are: session, program, database, login, host', 16, 1);
		RETURN;
	END;
	
	IF @not_filter_type = 'session' AND @not_filter LIKE '%[^0123456789]%'
	BEGIN;
		RAISERROR('Session filters must be valid integers', 16, 1);
		RETURN;
	END;
	
	IF @show_sleeping_spids NOT IN (0, 1, 2)
	BEGIN;
		RAISERROR('Valid values for @show_sleeping_spids are: 0, 1, or 2', 16, 1);
		RETURN;
	END;
	
	IF @get_plans NOT IN (0, 1, 2)
	BEGIN;
		RAISERROR('Valid values for @get_plans are: 0, 1, or 2', 16, 1);
		RETURN;
	END;

	IF @get_task_info NOT IN (0, 1, 2)
	BEGIN;
		RAISERROR('Valid values for @get_task_info are: 0, 1, or 2', 16, 1);
		RETURN;
	END;

	IF @format_output NOT IN (0, 1, 2)
	BEGIN;
		RAISERROR('Valid values for @format_output are: 0, 1, or 2', 16, 1);
		RETURN;
	END;
	
	IF @help = 1
	BEGIN;
		DECLARE 
			@params VARCHAR(MAX),
			@outputs VARCHAR(MAX);

		SELECT 
			@params =
				CHAR(13) +
					REPLACE
					(
						REPLACE
						(
							CONVERT
							(
								VARCHAR(MAX),
								SUBSTRING
								(
									t.text, 
									CHARINDEX('--~', t.text) + 5, 
									CHARINDEX('--~', t.text, CHARINDEX('--~', t.text) + 5) - (CHARINDEX('--~', t.text) + 5)
								)
							),
							CHAR(13)+CHAR(10),
							CHAR(13)
						),
						'	',
						''
					) +
					CHAR(13),
				@outputs = 
					CHAR(13) +
						REPLACE
						(
							REPLACE
							(
								REPLACE
								(
									CONVERT
									(
										VARCHAR(MAX),
										SUBSTRING
										(
											t.text, 
											CHARINDEX('OUTPUT COLUMNS'+CHAR(13)+CHAR(10)+'--------------', t.text) + 32,
											CHARINDEX('*/', t.text, CHARINDEX('OUTPUT COLUMNS'+CHAR(13)+CHAR(10)+'--------------', t.text) + 32) - (CHARINDEX('OUTPUT COLUMNS'+CHAR(13)+CHAR(10)+'--------------', t.text) + 32)
										)
									),
									CHAR(9),
									CHAR(255)
								),
								CHAR(13)+CHAR(10),
								CHAR(13)
							),
							'	',
							''
						) +
						CHAR(13)
			FROM sys.dm_exec_requests AS r
			CROSS APPLY sys.dm_exec_sql_text(r.sql_handle) AS t
			WHERE
				r.session_id = @@SPID;

		WITH
		a0 AS
		(SELECT 1 AS n UNION ALL SELECT 1),
		a1 AS
		(SELECT 1 AS n FROM a0 AS a, a0 AS b),
		a2 AS
		(SELECT 1 AS n FROM a1 AS a, a1 AS b),
		a3 AS
		(SELECT 1 AS n FROM a2 AS a, a2 AS b),
		a4 AS
		(SELECT 1 AS n FROM a3 AS a, a3 AS b),
		numbers AS
		(
			SELECT TOP(LEN(@params) - 1)
				ROW_NUMBER() OVER
				(
					ORDER BY (SELECT NULL)
				) AS number
			FROM a4
			ORDER BY
				number
		),
		tokens AS
		(
			SELECT 
				RTRIM(LTRIM(
					SUBSTRING
					(
						@params,
						number + 1,
						CHARINDEX(CHAR(13), @params, number + 1) - number - 1
					)
				)) AS token,
				number,
				CASE
					WHEN SUBSTRING(@params, number + 1, 1) = CHAR(13) THEN number
					ELSE COALESCE(NULLIF(CHARINDEX(',' + CHAR(13) + CHAR(13), @params, number), 0), LEN(@params)) 
				END AS param_group,
				ROW_NUMBER() OVER
				(
					PARTITION BY
						CHARINDEX(',' + CHAR(13) + CHAR(13), @params, number),
						SUBSTRING(@params, number+1, 1)
					ORDER BY 
						number
				) AS group_order
			FROM numbers
			WHERE
				SUBSTRING(@params, number, 1) = CHAR(13)
		),
		parsed_tokens AS
		(
			SELECT
				MIN
				(
					CASE
						WHEN token LIKE '@%' THEN token
						ELSE NULL
					END
				) AS parameter,
				MIN
				(
					CASE
						WHEN token LIKE '--%' THEN RIGHT(token, LEN(token) - 2)
						ELSE NULL
					END
				) AS description,
				param_group,
				group_order
			FROM tokens
			WHERE
				NOT 
				(
					token = '' 
					AND group_order > 1
				)
			GROUP BY
				param_group,
				group_order
		)
		SELECT
			CASE
				WHEN description IS NULL AND parameter IS NULL THEN '-------------------------------------------------------------------------'
				WHEN param_group = MAX(param_group) OVER() THEN parameter
				ELSE COALESCE(LEFT(parameter, LEN(parameter) - 1), '')
			END AS [------parameter----------------------------------------------------------],
			CASE
				WHEN description IS NULL AND parameter IS NULL THEN '----------------------------------------------------------------------------------------------------------------------'
				ELSE COALESCE(description, '')
			END AS [------description-----------------------------------------------------------------------------------------------------]
		FROM parsed_tokens
		ORDER BY
			param_group, 
			group_order;
		
		WITH
		a0 AS
		(SELECT 1 AS n UNION ALL SELECT 1),
		a1 AS
		(SELECT 1 AS n FROM a0 AS a, a0 AS b),
		a2 AS
		(SELECT 1 AS n FROM a1 AS a, a1 AS b),
		a3 AS
		(SELECT 1 AS n FROM a2 AS a, a2 AS b),
		a4 AS
		(SELECT 1 AS n FROM a3 AS a, a3 AS b),
		numbers AS
		(
			SELECT TOP(LEN(@outputs) - 1)
				ROW_NUMBER() OVER
				(
					ORDER BY (SELECT NULL)
				) AS number
			FROM a4
			ORDER BY
				number
		),
		tokens AS
		(
			SELECT 
				RTRIM(LTRIM(
					SUBSTRING
					(
						@outputs,
						number + 1,
						CASE
							WHEN 
								COALESCE(NULLIF(CHARINDEX(CHAR(13) + 'Formatted', @outputs, number + 1), 0), LEN(@outputs)) < 
								COALESCE(NULLIF(CHARINDEX(CHAR(13) + CHAR(255), @outputs, number + 1), 0), LEN(@outputs))
								THEN COALESCE(NULLIF(CHARINDEX(CHAR(13) + 'Formatted', @outputs, number + 1), 0), LEN(@outputs)) - number - 1
							ELSE
								COALESCE(NULLIF(CHARINDEX(CHAR(13) + CHAR(255), @outputs, number + 1), 0), LEN(@outputs)) - number - 1
						END
					)
				)) AS token,
				number,
				COALESCE(NULLIF(CHARINDEX(CHAR(13) + 'Formatted', @outputs, number + 1), 0), LEN(@outputs)) AS output_group,
				ROW_NUMBER() OVER
				(
					PARTITION BY 
						COALESCE(NULLIF(CHARINDEX(CHAR(13) + 'Formatted', @outputs, number + 1), 0), LEN(@outputs))
					ORDER BY
						number
				) AS output_group_order
			FROM numbers
			WHERE
				SUBSTRING(@outputs, number, 10) = CHAR(13) + 'Formatted'
				OR SUBSTRING(@outputs, number, 2) = CHAR(13) + CHAR(255)
		),
		output_tokens AS
		(
			SELECT 
				*,
				CASE output_group_order
					WHEN 2 THEN MAX(CASE output_group_order WHEN 1 THEN token ELSE NULL END) OVER (PARTITION BY output_group)
					ELSE ''
				END COLLATE Latin1_General_Bin2 AS column_info
			FROM tokens
		)
		SELECT
			CASE output_group_order
				WHEN 1 THEN '-----------------------------------'
				WHEN 2 THEN 
					CASE
						WHEN CHARINDEX('Formatted/Non:', column_info) = 1 THEN
							SUBSTRING(column_info, CHARINDEX(CHAR(255), column_info)+1, CHARINDEX(']', column_info, CHARINDEX(CHAR(255), column_info)+2) - CHARINDEX(CHAR(255), column_info))
						ELSE
							SUBSTRING(column_info, CHARINDEX(CHAR(255), column_info)+2, CHARINDEX(']', column_info, CHARINDEX(CHAR(255), column_info)+2) - CHARINDEX(CHAR(255), column_info)-1)
					END
				ELSE ''
			END AS formatted_column_name,
			CASE output_group_order
				WHEN 1 THEN '-----------------------------------'
				WHEN 2 THEN 
					CASE
						WHEN CHARINDEX('Formatted/Non:', column_info) = 1 THEN
							SUBSTRING(column_info, CHARINDEX(']', column_info)+2, LEN(column_info))
						ELSE
							SUBSTRING(column_info, CHARINDEX(']', column_info)+2, CHARINDEX('Non-Formatted:', column_info, CHARINDEX(']', column_info)+2) - CHARINDEX(']', column_info)-3)
					END
				ELSE ''
			END AS formatted_column_type,
			CASE output_group_order
				WHEN 1 THEN '---------------------------------------'
				WHEN 2 THEN 
					CASE
						WHEN CHARINDEX('Formatted/Non:', column_info) = 1 THEN ''
						ELSE
							CASE
								WHEN SUBSTRING(column_info, CHARINDEX(CHAR(255), column_info, CHARINDEX('Non-Formatted:', column_info))+1, 1) = '<' THEN
									SUBSTRING(column_info, CHARINDEX(CHAR(255), column_info, CHARINDEX('Non-Formatted:', column_info))+1, CHARINDEX('>', column_info, CHARINDEX(CHAR(255), column_info, CHARINDEX('Non-Formatted:', column_info))+1) - CHARINDEX(CHAR(255), column_info, CHARINDEX('Non-Formatted:', column_info)))
								ELSE
									SUBSTRING(column_info, CHARINDEX(CHAR(255), column_info, CHARINDEX('Non-Formatted:', column_info))+1, CHARINDEX(']', column_info, CHARINDEX(CHAR(255), column_info, CHARINDEX('Non-Formatted:', column_info))+1) - CHARINDEX(CHAR(255), column_info, CHARINDEX('Non-Formatted:', column_info)))
							END
					END
				ELSE ''
			END AS unformatted_column_name,
			CASE output_group_order
				WHEN 1 THEN '---------------------------------------'
				WHEN 2 THEN 
					CASE
						WHEN CHARINDEX('Formatted/Non:', column_info) = 1 THEN ''
						ELSE
							CASE
								WHEN SUBSTRING(column_info, CHARINDEX(CHAR(255), column_info, CHARINDEX('Non-Formatted:', column_info))+1, 1) = '<' THEN ''
								ELSE
									SUBSTRING(column_info, CHARINDEX(']', column_info, CHARINDEX('Non-Formatted:', column_info))+2, CHARINDEX('Non-Formatted:', column_info, CHARINDEX(']', column_info)+2) - CHARINDEX(']', column_info)-3)
							END
					END
				ELSE ''
			END AS unformatted_column_type,
			CASE output_group_order
				WHEN 1 THEN '----------------------------------------------------------------------------------------------------------------------'
				ELSE REPLACE(token, CHAR(255), '')
			END AS [------description-----------------------------------------------------------------------------------------------------]
		FROM output_tokens
		WHERE
			NOT 
			(
				output_group_order = 1 
				AND output_group = LEN(@outputs)
			)
		ORDER BY
			output_group,
			CASE output_group_order
				WHEN 1 THEN 99
				ELSE output_group_order
			END;

		RETURN;
	END;

	WITH
	a0 AS
	(SELECT 1 AS n UNION ALL SELECT 1),
	a1 AS
	(SELECT 1 AS n FROM a0 AS a, a0 AS b),
	a2 AS
	(SELECT 1 AS n FROM a1 AS a, a1 AS b),
	a3 AS
	(SELECT 1 AS n FROM a2 AS a, a2 AS b),
	a4 AS
	(SELECT 1 AS n FROM a3 AS a, a3 AS b),
	numbers AS
	(
		SELECT TOP(LEN(@output_column_list))
			ROW_NUMBER() OVER
			(
				ORDER BY (SELECT NULL)
			) AS number
		FROM a4
		ORDER BY
			number
	),
	tokens AS
	(
		SELECT 
			'|[' +
				SUBSTRING
				(
					@output_column_list,
					number + 1,
					CHARINDEX(']', @output_column_list, number) - number - 1
				) + '|]' AS token,
			number
		FROM numbers
		WHERE
			SUBSTRING(@output_column_list, number, 1) = '['
	),
	ordered_columns AS
	(
		SELECT
			x.column_name,
			ROW_NUMBER() OVER
			(
				PARTITION BY
					x.column_name
				ORDER BY
					tokens.number,
					x.default_order
			) AS r,
			ROW_NUMBER() OVER
			(
				ORDER BY
					tokens.number,
					x.default_order
			) AS s
		FROM tokens
		JOIN
		(
			SELECT '[session_id]' AS column_name, 1 AS default_order
			UNION ALL
			SELECT '[dd hh:mm:ss.mss]', 2
			WHERE
				@format_output = 1
			UNION ALL
			SELECT '[dd hh:mm:ss.mss (avg)]', 3
			WHERE
				@format_output = 1
				AND @get_avg_time = 1
			UNION ALL
			SELECT '[avg_elapsed_time]', 4
			WHERE
				@format_output = 0
				AND @get_avg_time = 1
			UNION ALL
			SELECT '[physical_io]', 5
			WHERE
				@get_task_info = 2
			UNION ALL
			SELECT '[reads]', 6
			UNION ALL
			SELECT '[physical_reads]', 7
			UNION ALL
			SELECT '[writes]', 8
			UNION ALL
			SELECT '[tempdb_allocations]', 9
			UNION ALL
			SELECT '[tempdb_current]', 10
			UNION ALL
			SELECT '[CPU]', 11
			UNION ALL
			SELECT '[context_switches]', 12
			WHERE
				@get_task_info = 2
			UNION ALL
			SELECT '[used_memory]', 13
			UNION ALL
			SELECT '[physical_io_delta]', 14
			WHERE
				@delta_interval > 0	
				AND @get_task_info = 2
			UNION ALL
			SELECT '[reads_delta]', 15
			WHERE
				@delta_interval > 0
			UNION ALL
			SELECT '[physical_reads_delta]', 16
			WHERE
				@delta_interval > 0
			UNION ALL
			SELECT '[writes_delta]', 17
			WHERE
				@delta_interval > 0
			UNION ALL
			SELECT '[tempdb_allocations_delta]', 18
			WHERE
				@delta_interval > 0
			UNION ALL
			SELECT '[tempdb_current_delta]', 19
			WHERE
				@delta_interval > 0
			UNION ALL
			SELECT '[CPU_delta]', 20
			WHERE
				@delta_interval > 0
			UNION ALL
			SELECT '[context_switches_delta]', 21
			WHERE
				@delta_interval > 0
				AND @get_task_info = 2
			UNION ALL
			SELECT '[used_memory_delta]', 22
			WHERE
				@delta_interval > 0
			UNION ALL
			SELECT '[tasks]', 23
			WHERE
				@get_task_info = 2
			UNION ALL
			SELECT '[status]', 24
			UNION ALL
			SELECT '[wait_info]', 25
			WHERE
				@get_task_info > 0
				OR @find_block_leaders = 1
			UNION ALL
			SELECT '[locks]', 26
			WHERE
				@get_locks = 1
			UNION ALL
			SELECT '[tran_start_time]', 27
			WHERE
				@get_transaction_info = 1
			UNION ALL
			SELECT '[tran_log_writes]', 28
			WHERE
				@get_transaction_info = 1
			UNION ALL
			SELECT '[open_tran_count]', 29
			UNION ALL
			SELECT '[sql_command]', 30
			WHERE
				@get_outer_command = 1
			UNION ALL
			SELECT '[sql_text]', 31
			UNION ALL
			SELECT '[query_plan]', 32
			WHERE
				@get_plans >= 1
			UNION ALL
			SELECT '[blocking_session_id]', 33
			WHERE
				@get_task_info > 0
				OR @find_block_leaders = 1
			UNION ALL
			SELECT '[blocked_session_count]', 34
			WHERE
				@find_block_leaders = 1
			UNION ALL
			SELECT '[percent_complete]', 35
			UNION ALL
			SELECT '[host_name]', 36
			UNION ALL
			SELECT '[login_name]', 37
			UNION ALL
			SELECT '[database_name]', 38
			UNION ALL
			SELECT '[program_name]', 39
			UNION ALL
			SELECT '[additional_info]', 40
			WHERE
				@get_additional_info = 1
			UNION ALL
			SELECT '[start_time]', 41
			UNION ALL
			SELECT '[request_id]', 42
			UNION ALL
			SELECT '[collection_time]', 43
		) AS x ON 
			x.column_name LIKE token ESCAPE '|'
	)
	SELECT
		@output_column_list =
			STUFF
			(
				(
					SELECT
						',' + column_name as [text()]
					FROM ordered_columns
					WHERE
						r = 1
					ORDER BY
						s
					FOR XML PATH('')
				),
				1,
				1,
				''
			);
	
	IF COALESCE(RTRIM(@output_column_list), '') = ''
	BEGIN
		RAISERROR('No valid column matches found in @output_column_list or no columns remain due to selected options.', 16, 1);
		RETURN;
	END;
	
	IF @destination_table <> ''
	BEGIN
		SET @destination_table = 
			--database
			COALESCE(QUOTENAME(PARSENAME(@destination_table, 3)) + '.', '') +
			--schema
			COALESCE(QUOTENAME(PARSENAME(@destination_table, 2)) + '.', '') +
			--table
			COALESCE(QUOTENAME(PARSENAME(@destination_table, 1)), '');
			
		IF COALESCE(RTRIM(@destination_table), '') = ''
		BEGIN
			RAISERROR('Destination table not properly formatted.', 16, 1);
			RETURN;
		END;
	END;

	WITH
	a0 AS
	(SELECT 1 AS n UNION ALL SELECT 1),
	a1 AS
	(SELECT 1 AS n FROM a0 AS a, a0 AS b),
	a2 AS
	(SELECT 1 AS n FROM a1 AS a, a1 AS b),
	a3 AS
	(SELECT 1 AS n FROM a2 AS a, a2 AS b),
	a4 AS
	(SELECT 1 AS n FROM a3 AS a, a3 AS b),
	numbers AS
	(
		SELECT TOP(LEN(@sort_order))
			ROW_NUMBER() OVER
			(
				ORDER BY (SELECT NULL)
			) AS number
		FROM a4
		ORDER BY
			number
	),
	tokens AS
	(
		SELECT 
			'|[' +
				SUBSTRING
				(
					@sort_order,
					number + 1,
					CHARINDEX(']', @sort_order, number) - number - 1
				) + '|]' AS token,
			SUBSTRING
			(
				@sort_order,
				CHARINDEX(']', @sort_order, number) + 1,
				COALESCE(NULLIF(CHARINDEX('[', @sort_order, CHARINDEX(']', @sort_order, number)), 0), LEN(@sort_order)) - CHARINDEX(']', @sort_order, number)
			) AS next_chunk,
			number
		FROM numbers
		WHERE
			SUBSTRING(@sort_order, number, 1) = '['
	),
	ordered_columns AS
	(
		SELECT
			x.column_name +
				CASE
					WHEN tokens.next_chunk LIKE '%asc%' THEN ' ASC'
					WHEN tokens.next_chunk LIKE '%desc%' THEN ' DESC'
					ELSE ''
				END AS column_name,
			ROW_NUMBER() OVER
			(
				PARTITION BY
					x.column_name
				ORDER BY
					tokens.number
			) AS r,
			tokens.number
		FROM tokens
		JOIN
		(
			SELECT '[session_id]' AS column_name
			UNION ALL
			SELECT '[physical_io]'
			UNION ALL
			SELECT '[reads]'
			UNION ALL
			SELECT '[physical_reads]'
			UNION ALL
			SELECT '[writes]'
			UNION ALL
			SELECT '[tempdb_allocations]'
			UNION ALL
			SELECT '[tempdb_current]'
			UNION ALL
			SELECT '[CPU]'
			UNION ALL
			SELECT '[context_switches]'
			UNION ALL
			SELECT '[used_memory]'
			UNION ALL
			SELECT '[physical_io_delta]'
			UNION ALL
			SELECT '[reads_delta]'
			UNION ALL
			SELECT '[physical_reads_delta]'
			UNION ALL
			SELECT '[writes_delta]'
			UNION ALL
			SELECT '[tempdb_allocations_delta]'
			UNION ALL
			SELECT '[tempdb_current_delta]'
			UNION ALL
			SELECT '[CPU_delta]'
			UNION ALL
			SELECT '[context_switches_delta]'
			UNION ALL
			SELECT '[used_memory_delta]'
			UNION ALL
			SELECT '[tasks]'
			UNION ALL
			SELECT '[tran_start_time]'
			UNION ALL
			SELECT '[open_tran_count]'
			UNION ALL
			SELECT '[blocking_session_id]'
			UNION ALL
			SELECT '[blocked_session_count]'
			UNION ALL
			SELECT '[percent_complete]'
			UNION ALL
			SELECT '[host_name]'
			UNION ALL
			SELECT '[login_name]'
			UNION ALL
			SELECT '[database_name]'
			UNION ALL
			SELECT '[start_time]'
		) AS x ON 
			x.column_name LIKE token ESCAPE '|'
	)
	SELECT
		@sort_order =
			COALESCE
			(
				STUFF
				(
					(
						SELECT
							',' + column_name as [text()]
						FROM ordered_columns
						WHERE
							r = 1
						ORDER BY
							number
						FOR XML PATH('')
					),
					1,
					1,
					''
				),
				''
			);

	CREATE TABLE #sessions
	(
		recursion SMALLINT NOT NULL,
		session_id SMALLINT NOT NULL,
		request_id INT NULL,
		session_number INT NOT NULL,
		elapsed_time INT NOT NULL,
		avg_elapsed_time INT NULL,
		physical_io BIGINT NULL,
		reads BIGINT NOT NULL,
		physical_reads BIGINT NOT NULL,
		writes BIGINT NOT NULL,
		tempdb_allocations BIGINT NOT NULL,
		tempdb_current BIGINT NOT NULL,
		CPU INT NOT NULL,
		context_switches BIGINT NULL,
		used_memory BIGINT NOT NULL, 
		tasks SMALLINT NULL,
		status VARCHAR(30) NOT NULL,
		wait_info NVARCHAR(4000) NULL,
		locks XML NULL,
		tran_start_time DATETIME NULL,
		tran_log_writes NVARCHAR(4000) NULL,
		open_tran_count SMALLINT NULL,
		sql_command XML NULL,
		sql_handle VARBINARY(64) NULL,
		statement_start_offset INT NULL,
		statement_end_offset INT NULL,
		sql_text XML NULL,
		plan_handle VARBINARY(64) NULL,
		query_plan XML NULL,
		blocking_session_id SMALLINT NULL,
		blocked_session_count SMALLINT NULL,
		percent_complete REAL NULL,
		host_name sysname NULL,
		login_name sysname NOT NULL,
		database_name sysname NULL,
		program_name sysname NULL,
		additional_info XML NULL,
		start_time DATETIME NOT NULL,
		last_request_start_time DATETIME NOT NULL,
		UNIQUE CLUSTERED (session_id, request_id, recursion) WITH (IGNORE_DUP_KEY = ON)
	);

	IF @return_schema = 0
	BEGIN;
		--Disable unnecessary autostats on the table
		CREATE STATISTICS s_session_id ON #sessions (session_id)
		WITH SAMPLE 0 ROWS, NORECOMPUTE;
		CREATE STATISTICS s_request_id ON #sessions (request_id)
		WITH SAMPLE 0 ROWS, NORECOMPUTE;
		CREATE STATISTICS s_session_number ON #sessions (session_number)
		WITH SAMPLE 0 ROWS, NORECOMPUTE;
		CREATE STATISTICS s_status ON #sessions (status)
		WITH SAMPLE 0 ROWS, NORECOMPUTE;
		CREATE STATISTICS s_start_time ON #sessions (start_time)
		WITH SAMPLE 0 ROWS, NORECOMPUTE;
		CREATE STATISTICS s_last_request_start_time ON #sessions (last_request_start_time)
		WITH SAMPLE 0 ROWS, NORECOMPUTE;
		CREATE STATISTICS s_recursion ON #sessions (recursion)
		WITH SAMPLE 0 ROWS, NORECOMPUTE;

		DECLARE @recursion SMALLINT;
		SET @recursion = 
			CASE @delta_interval
				WHEN 0 THEN 1
				ELSE -1
			END;

		--Used for the delta pull
		REDO:;
		
		IF 
			@get_locks = 1 
			AND @recursion = 1
			AND @output_column_list LIKE '%|[locks|]%' ESCAPE '|'
		BEGIN;
			SELECT
				y.resource_type,
				y.db_name,
				y.object_id,
				y.file_id,
				y.page_type,
				y.hobt_id,
				y.allocation_unit_id,
				y.index_id,
				y.schema_id,
				y.principal_id,
				y.request_mode,
				y.request_status,
				y.session_id,
				y.resource_description,
				y.request_count,
				COALESCE(s.request_id, -1) AS request_id,
				s.start_time,
				CONVERT(sysname, NULL) AS object_name,
				CONVERT(sysname, NULL) AS index_name,
				CONVERT(sysname, NULL) AS schema_name,
				CONVERT(sysname, NULL) AS principal_name
			INTO #locks
			FROM
			(
				SELECT
					sp.spid AS session_id,
					CASE sp.status
						WHEN 'sleeping' THEN CONVERT(INT, NULL)
						ELSE sp.request_id
					END AS request_id,
					CASE sp.status
						WHEN 'sleeping' THEN sp.login_time
						ELSE
						COALESCE
						(
							(
								SELECT	
									r.start_time
								FROM sys.dm_exec_requests AS r
								WHERE
									r.session_id = sp.spid
									AND r.request_id = sp.request_id
							),
							sp.login_time
						)
					END AS start_time,
					sp.dbid
				FROM sys.sysprocesses AS sp
				WHERE
					--Process inclusive filter
					1 =
						CASE
							WHEN @filter <> '' THEN
								CASE @filter_type
									WHEN 'session' THEN
										CASE
											WHEN
												CONVERT(SMALLINT, @filter) = 0
												OR sp.spid = CONVERT(SMALLINT, @filter)
													THEN 1
											ELSE 0
										END
									WHEN 'program' THEN
										CASE
											WHEN sp.program_name LIKE @filter THEN 1
											ELSE 0
										END
									WHEN 'login' THEN
										CASE
											WHEN sp.loginame LIKE @filter THEN 1
											ELSE 0
										END
									WHEN 'host' THEN
										CASE
											WHEN sp.hostname LIKE @filter THEN 1
											ELSE 0
										END
									WHEN 'database' THEN
										CASE
											WHEN DB_NAME(sp.dbid) LIKE @filter THEN 1
											ELSE 0
										END
									ELSE 0
								END
							ELSE 1
						END
					--Process exclusive filter
					AND 0 =
						CASE
							WHEN @not_filter <> '' THEN
								CASE @not_filter_type
									WHEN 'session' THEN
										CASE
											WHEN sp.spid = CONVERT(SMALLINT, @not_filter) THEN 1
											ELSE 0
										END
									WHEN 'program' THEN
										CASE
											WHEN sp.program_name LIKE @not_filter THEN 1
											ELSE 0
										END
									WHEN 'login' THEN
										CASE
											WHEN sp.loginame LIKE @not_filter THEN 1
											ELSE 0
										END
									WHEN 'host' THEN
										CASE
											WHEN sp.hostname LIKE @not_filter THEN 1
											ELSE 0
										END
									WHEN 'database' THEN
										CASE
											WHEN DB_NAME(sp.dbid) LIKE @not_filter THEN 1
											ELSE 0
										END
									ELSE 0
								END
							ELSE 0
						END
					AND 
					(
						@show_own_spid = 1
						OR sp.spid <> @@SPID
					)
					AND 
					(
						@show_system_spids = 1
						OR sp.hostprocess > ''
					)
					AND sp.ecid = 0
			) AS s
			INNER HASH JOIN
			(
				SELECT
					x.resource_type,
					x.db_name,
					x.object_id,
					x.file_id,
					CASE
						WHEN x.page_no = 1 OR x.page_no % 8088 = 0 THEN 'PFS'
						WHEN x.page_no = 2 OR x.page_no % 511232 = 0 THEN 'GAM'
						WHEN x.page_no = 3 OR x.page_no % 511233 = 0 THEN 'SGAM'
						WHEN x.page_no = 6 OR x.page_no % 511238 = 0 THEN 'DCM'
						WHEN x.page_no = 7 OR x.page_no % 511239 = 0 THEN 'BCM'
						WHEN x.page_no IS NOT NULL THEN '*'
						ELSE NULL
					END AS page_type,
					x.hobt_id,
					x.allocation_unit_id,
					x.index_id,
					x.schema_id,
					x.principal_id,
					x.request_mode,
					x.request_status,
					x.session_id,
					x.request_id,
					CASE
						WHEN COALESCE(x.object_id, x.file_id, x.hobt_id, x.allocation_unit_id, x.index_id, x.schema_id, x.principal_id) IS NULL THEN NULLIF(resource_description, '')
						ELSE NULL
					END AS resource_description,
					COUNT(*) AS request_count
				FROM
				(
					SELECT
						tl.resource_type +
							CASE
								WHEN tl.resource_subtype = '' THEN ''
								ELSE '.' + tl.resource_subtype
							END AS resource_type,
						COALESCE(DB_NAME(tl.resource_database_id), N'(null)') AS db_name,
						CONVERT
						(
							INT,
							CASE
								WHEN tl.resource_type = 'OBJECT' THEN tl.resource_associated_entity_id
								WHEN tl.resource_description LIKE '%object_id = %' THEN
									(
										SUBSTRING
										(
											tl.resource_description, 
											(CHARINDEX('object_id = ', tl.resource_description) + 12), 
											COALESCE
											(
												NULLIF
												(
													CHARINDEX(',', tl.resource_description, CHARINDEX('object_id = ', tl.resource_description) + 12),
													0
												), 
												DATALENGTH(tl.resource_description)+1
											) - (CHARINDEX('object_id = ', tl.resource_description) + 12)
										)
									)
								ELSE NULL
							END
						) AS object_id,
						CONVERT
						(
							INT,
							CASE 
								WHEN tl.resource_type = 'FILE' THEN CONVERT(INT, tl.resource_description)
								WHEN tl.resource_type IN ('PAGE', 'EXTENT', 'RID') THEN LEFT(tl.resource_description, CHARINDEX(':', tl.resource_description)-1)
								ELSE NULL
							END
						) AS file_id,
						CONVERT
						(
							INT,
							CASE
								WHEN tl.resource_type IN ('PAGE', 'EXTENT', 'RID') THEN 
									SUBSTRING
									(
										tl.resource_description, 
										CHARINDEX(':', tl.resource_description) + 1, 
										COALESCE
										(
											NULLIF
											(
												CHARINDEX(':', tl.resource_description, CHARINDEX(':', tl.resource_description) + 1), 
												0
											), 
											DATALENGTH(tl.resource_description)+1
										) - (CHARINDEX(':', tl.resource_description) + 1)
									)
								ELSE NULL
							END
						) AS page_no,
						CASE
							WHEN tl.resource_type IN ('PAGE', 'KEY', 'RID', 'HOBT') THEN tl.resource_associated_entity_id
							ELSE NULL
						END AS hobt_id,
						CASE
							WHEN tl.resource_type = 'ALLOCATION_UNIT' THEN tl.resource_associated_entity_id
							ELSE NULL
						END AS allocation_unit_id,
						CONVERT
						(
							INT,
							CASE
								WHEN
									/*TODO: Deal with server principals*/ 
									tl.resource_subtype <> 'SERVER_PRINCIPAL' 
									AND tl.resource_description LIKE '%index_id or stats_id = %' THEN
									(
										SUBSTRING
										(
											tl.resource_description, 
											(CHARINDEX('index_id or stats_id = ', tl.resource_description) + 23), 
											COALESCE
											(
												NULLIF
												(
													CHARINDEX(',', tl.resource_description, CHARINDEX('index_id or stats_id = ', tl.resource_description) + 23), 
													0
												), 
												DATALENGTH(tl.resource_description)+1
											) - (CHARINDEX('index_id or stats_id = ', tl.resource_description) + 23)
										)
									)
								ELSE NULL
							END 
						) AS index_id,
						CONVERT
						(
							INT,
							CASE
								WHEN tl.resource_description LIKE '%schema_id = %' THEN
									(
										SUBSTRING
										(
											tl.resource_description, 
											(CHARINDEX('schema_id = ', tl.resource_description) + 12), 
											COALESCE
											(
												NULLIF
												(
													CHARINDEX(',', tl.resource_description, CHARINDEX('schema_id = ', tl.resource_description) + 12), 
													0
												), 
												DATALENGTH(tl.resource_description)+1
											) - (CHARINDEX('schema_id = ', tl.resource_description) + 12)
										)
									)
								ELSE NULL
							END 
						) AS schema_id,
						CONVERT
						(
							INT,
							CASE
								WHEN tl.resource_description LIKE '%principal_id = %' THEN
									(
										SUBSTRING
										(
											tl.resource_description, 
											(CHARINDEX('principal_id = ', tl.resource_description) + 15), 
											COALESCE
											(
												NULLIF
												(
													CHARINDEX(',', tl.resource_description, CHARINDEX('principal_id = ', tl.resource_description) + 15), 
													0
												), 
												DATALENGTH(tl.resource_description)+1
											) - (CHARINDEX('principal_id = ', tl.resource_description) + 15)
										)
									)
								ELSE NULL
							END
						) AS principal_id,
						tl.request_mode,
						tl.request_status,
						tl.request_session_id AS session_id,
						tl.request_request_id AS request_id,

						/*TODO: Applocks, other resource_descriptions*/
						RTRIM(tl.resource_description) AS resource_description,
						tl.resource_associated_entity_id
						/*********************************************/
					FROM 
					(
						SELECT 
							request_session_id,
							CONVERT(VARCHAR(120), resource_type) COLLATE Latin1_General_Bin2 AS resource_type,
							CONVERT(VARCHAR(120), resource_subtype) COLLATE Latin1_General_Bin2 AS resource_subtype,
							resource_database_id,
							CONVERT(VARCHAR(512), resource_description) COLLATE Latin1_General_Bin2 AS resource_description,
							resource_associated_entity_id,
							CONVERT(VARCHAR(120), request_mode) COLLATE Latin1_General_Bin2 AS request_mode,
							CONVERT(VARCHAR(120), request_status) COLLATE Latin1_General_Bin2 AS request_status,
							request_request_id
						FROM sys.dm_tran_locks
					) AS tl
				) AS x
				GROUP BY
					x.resource_type,
					x.db_name,
					x.object_id,
					x.file_id,
					CASE
						WHEN x.page_no = 1 OR x.page_no % 8088 = 0 THEN 'PFS'
						WHEN x.page_no = 2 OR x.page_no % 511232 = 0 THEN 'GAM'
						WHEN x.page_no = 3 OR x.page_no % 511233 = 0 THEN 'SGAM'
						WHEN x.page_no = 6 OR x.page_no % 511238 = 0 THEN 'DCM'
						WHEN x.page_no = 7 OR x.page_no % 511239 = 0 THEN 'BCM'
						WHEN x.page_no IS NOT NULL THEN '*'
						ELSE NULL
					END,
					x.hobt_id,
					x.allocation_unit_id,
					x.index_id,
					x.schema_id,
					x.principal_id,
					x.request_mode,
					x.request_status,
					x.session_id,
					x.request_id,
					CASE
						WHEN COALESCE(x.object_id, x.file_id, x.hobt_id, x.allocation_unit_id, x.index_id, x.schema_id, x.principal_id) IS NULL THEN NULLIF(resource_description, '')
						ELSE NULL
					END
			) AS y ON
				y.session_id = s.session_id
				AND y.request_id = COALESCE(s.request_id, 0)
			OPTION (HASH GROUP);
			
			--Disable unnecessary autostats on the table
			CREATE STATISTICS s_db_name ON #locks (db_name)
			WITH SAMPLE 0 ROWS, NORECOMPUTE;
			CREATE STATISTICS s_object_id ON #locks (object_id)
			WITH SAMPLE 0 ROWS, NORECOMPUTE;
			CREATE STATISTICS s_hobt_id ON #locks (hobt_id)
			WITH SAMPLE 0 ROWS, NORECOMPUTE;
			CREATE STATISTICS s_allocation_unit_id ON #locks (allocation_unit_id)
			WITH SAMPLE 0 ROWS, NORECOMPUTE;
			CREATE STATISTICS s_index_id ON #locks (index_id)
			WITH SAMPLE 0 ROWS, NORECOMPUTE;
			CREATE STATISTICS s_schema_id ON #locks (schema_id)
			WITH SAMPLE 0 ROWS, NORECOMPUTE;
			CREATE STATISTICS s_principal_id ON #locks (principal_id)
			WITH SAMPLE 0 ROWS, NORECOMPUTE;
			CREATE STATISTICS s_request_id ON #locks (request_id)
			WITH SAMPLE 0 ROWS, NORECOMPUTE;
			CREATE STATISTICS s_start_time ON #locks (start_time)
			WITH SAMPLE 0 ROWS, NORECOMPUTE;
			CREATE STATISTICS s_resource_type ON #locks (resource_type)
			WITH SAMPLE 0 ROWS, NORECOMPUTE;
			CREATE STATISTICS s_object_name ON #locks (object_name)
			WITH SAMPLE 0 ROWS, NORECOMPUTE;
			CREATE STATISTICS s_schema_name ON #locks (schema_name)
			WITH SAMPLE 0 ROWS, NORECOMPUTE;
			CREATE STATISTICS s_page_type ON #locks (page_type)
			WITH SAMPLE 0 ROWS, NORECOMPUTE;
			CREATE STATISTICS s_request_mode ON #locks (request_mode)
			WITH SAMPLE 0 ROWS, NORECOMPUTE;
			CREATE STATISTICS s_request_status ON #locks (request_status)
			WITH SAMPLE 0 ROWS, NORECOMPUTE;
			CREATE STATISTICS s_resource_description ON #locks (resource_description)
			WITH SAMPLE 0 ROWS, NORECOMPUTE;
			CREATE STATISTICS s_index_name ON #locks (index_name)
			WITH SAMPLE 0 ROWS, NORECOMPUTE;
			CREATE STATISTICS s_principal_name ON #locks (principal_name)
			WITH SAMPLE 0 ROWS, NORECOMPUTE;
		END;
		
		DECLARE 
			@sql VARCHAR(MAX), 
			@sql_n NVARCHAR(MAX);

		SET @sql = 
			--Column list
			CONVERT
			(
				VARCHAR(MAX),
				'DECLARE @blocker BIT; ' +
				'SET @blocker = 0; ' +
				'DECLARE @i INT; ' +
				'SET @i = 2147483647; ' +
				'' +
				'DECLARE @sessions TABLE ' +
				'( ' +
					'session_id SMALLINT NOT NULL, ' +
					'kpid SMALLINT NOT NULL, ' +
					'ecid SMALLINT NOT NULL, ' +
					'request_id INT, ' +
					'login_time DATETIME, ' +
					'status VARCHAR(30), ' +
					'statement_start_offset INT, ' +
					'statement_end_offset INT, ' +
					'sql_handle BINARY(20), ' +
					'host_name NVARCHAR(128), ' +
					'login_name NVARCHAR(128), ' +
					'program_name NVARCHAR(128), ' +
					'database_id SMALLINT, ' +
					'memory_usage INT, ' +
					'open_tran_count SMALLINT, ' +
					CASE
						WHEN @get_task_info = 1 OR @find_block_leaders = 1 THEN
							'wait_type NVARCHAR(32), ' +
							'wait_resource NVARCHAR(256), ' +
							'wait_time BIGINT, '
						ELSE ''
					END +
					'blocked SMALLINT, ' +
					'UNIQUE CLUSTERED (session_id, kpid, ecid)  WITH (IGNORE_DUP_KEY = ON) ' +
				'); ' +
				'' +
				'DECLARE @blockers TABLE ' +
				'( ' +
					'session_id INT NOT NULL PRIMARY KEY ' +
				'); ' +
				'' +
				'BLOCKERS:; ' +
				'' +
				'INSERT @sessions ' +
				'( ' +
					'session_id, ' +
					'kpid, ' +
					'ecid, ' +
					'request_id, ' +
					'login_time, ' +
					'status, ' +
					'statement_start_offset, ' +
					'statement_end_offset, ' +
					'sql_handle, ' +
					'host_name, ' +
					'login_name, ' +
					'program_name, ' +
					'database_id, ' +
					'memory_usage, ' +
					'open_tran_count, ' +
					CASE
						WHEN @get_task_info = 1 OR @find_block_leaders = 1 THEN
							'wait_type, ' +
							'wait_resource, ' +
							'wait_time, '
						ELSE ''
					END +
					'blocked ' +
				') ' +
				'SELECT TOP(@i) ' +
					'sp0.session_id, ' +
					'sp0.kpid, ' +
					'sp0.ecid, ' +
					'sp0.request_id, ' +
					'CASE sp0.ecid ' +
						'WHEN 0 THEN sp0.login_time ' +
						'ELSE NULL ' +
					'END AS login_time, ' +
					'LOWER(sp0.status) AS status, ' +
					'CASE sp0.ecid ' +
						'WHEN 0 THEN ' +
							'CASE ' +
								'WHEN sp0.cmd = ''CREATE INDEX'' THEN 0 ' +
								'ELSE sp0.stmt_start ' +
							'END ' + 
						'ELSE NULL ' +
					'END AS statement_start_offset, ' +
					'CASE sp0.ecid ' +
						'WHEN 0 THEN ' +
							'CASE ' +
								'WHEN sp0.cmd = ''CREATE INDEX'' THEN -1 ' +
								'ELSE COALESCE(NULLIF(sp0.stmt_end, 0), -1) ' +
							'END ' +
						'ELSE NULL ' +
					'END AS statement_end_offset, ' +
					'CASE sp0.ecid ' +
						'WHEN 0 THEN sp0.sql_handle ' +
						'ELSE NULL ' +
					'END AS sql_handle, ' +
					'CASE sp0.ecid ' +
						'WHEN 0 THEN sp0.host_name ' +
						'ELSE NULL ' +
					'END AS host_name, ' +
					'CASE sp0.ecid ' +
						'WHEN 0 THEN sp0.login_name ' +
						'ELSE NULL ' +
					'END AS login_name, ' +
					'CASE sp0.ecid ' +
						'WHEN 0 THEN sp0.program_name ' +
						'ELSE NULL ' +
					'END AS program_name, ' +
					'CASE sp0.ecid ' +
						'WHEN 0 THEN sp0.database_id ' +
						'ELSE NULL ' +
					'END AS database_id, ' +
					'CASE sp0.ecid ' +
						'WHEN 0 THEN sp0.memory_usage ' +
						'ELSE NULL ' +
					'END AS memory_usage, ' +
					'CASE sp0.ecid ' +
						'WHEN 0 THEN sp0.open_tran_count ' +
						'ELSE NULL ' +
					'END AS open_tran_count, ' +
					CASE
						WHEN @get_task_info = 1 OR @find_block_leaders = 1 THEN
							'CASE ' +
								'WHEN sp0.wait_time > 0 AND sp0.wait_type <> N''CXPACKET'' THEN sp0.wait_type ' +
								'ELSE NULL ' +
							'END AS wait_type, ' +
							'CASE ' +
								'WHEN sp0.wait_time > 0 AND sp0.wait_type <> N''CXPACKET'' THEN sp0.wait_resource ' +
								'ELSE NULL ' +
							'END AS wait_resource, ' +
							'CASE ' +
								'WHEN sp0.wait_type <> N''CXPACKET'' THEN sp0.wait_time ' +
								'ELSE 0 ' +
							'END AS wait_time, '
						ELSE ''
					END +
					'sp0.blocked ' +
				'FROM ' +
				'( ' +
					'SELECT TOP(@i) ' +
						'sp1.spid AS session_id, ' +
						'sp1.kpid, ' +
						'sp1.ecid, ' +
						'CASE sp1.status ' +
							'WHEN ''sleeping'' THEN CONVERT(INT, NULL) ' +
							'ELSE sp1.request_id ' +
						'END AS request_id, ' +
						'sp1.login_time, ' +
						'CONVERT(VARCHAR(30), RTRIM(sp1.status)) COLLATE Latin1_General_Bin2 AS status, ' +
						'CONVERT(VARCHAR(16), RTRIM(sp1.cmd)) COLLATE Latin1_General_Bin2 AS cmd, ' +
						'sp1.stmt_start, ' +
						'sp1.stmt_end, ' +
						'sp1.sql_handle, ' +
						'CONVERT(sysname, RTRIM(sp1.hostname)) COLLATE SQL_Latin1_General_CP1_CI_AS AS host_name, ' +
						CASE
							WHEN @filter_type = 'login' OR @not_filter_type = 'login' THEN
								'MAX(CONVERT(sysname, RTRIM(sp1.loginame)) COLLATE SQL_Latin1_General_CP1_CI_AS) OVER (PARTITION BY sp1.spid, sp1.request_id) AS login_name, '
							ELSE
								'CONVERT(sysname, RTRIM(sp1.loginame)) AS login_name, '
						END +
						'CONVERT(sysname, RTRIM(sp1.program_name)) COLLATE SQL_Latin1_General_CP1_CI_AS AS program_name, ' +
						'sp1.dbid AS database_id, ' +
						'sp1.memusage AS memory_usage, ' +
						'sp1.open_tran AS open_tran_count, ' +
						'RTRIM(sp1.lastwaittype) AS wait_type, ' +
						'RTRIM(sp1.waitresource) AS wait_resource, ' +
						'sp1.waittime AS wait_time, ' +
						'COALESCE(NULLIF(sp1.blocked, sp1.spid), 0) AS blocked, ' +
						'sp1.hostprocess ' +
					'FROM ' +
					'( ' +
						'SELECT TOP(@i) ' +
							'session_id ' +
						'FROM @blockers ' +
						'' +
						'UNION ALL ' +
						'' +
						'SELECT TOP(@i) ' +
							'0 ' +
						'WHERE ' +
							'@blocker = 0 ' +
					') AS blk (session_id) ' +
					'INNER LOOP JOIN sys.sysprocesses AS sp1 ON ' +
						'sp1.spid = blk.session_id ' +
						'OR @blocker = 0 ' +
					CASE 
						WHEN 
						(
							@get_task_info = 0 
							AND @find_block_leaders = 0
						) THEN
							'WHERE ' +
								'sp1.ecid = 0 ' 
						ELSE ''
					END +
				') AS sp0 ' +
				'WHERE ' +
					'@blocker = 1 ' +
					'OR ' +
					'(1=1 ' +
						--inclusive filter
						CASE
							WHEN @filter <> '' THEN
								CASE @filter_type
									WHEN 'session' THEN
										CASE
											WHEN CONVERT(SMALLINT, @filter) <> 0 THEN
												'AND sp0.session_id = CONVERT(SMALLINT, @filter) '
											ELSE ''
										END
									WHEN 'program' THEN
										'AND sp0.program_name LIKE @filter '
									WHEN 'login' THEN
										'AND sp0.login_name LIKE @filter '
									WHEN 'host' THEN
										'AND sp0.host_name LIKE @filter '
									WHEN 'database' THEN
										'AND DB_NAME(sp0.database_id) LIKE @filter '
									ELSE ''
								END
							ELSE ''
						END +
						--exclusive filter
						CASE
							WHEN @not_filter <> '' THEN
								CASE @not_filter_type
									WHEN 'session' THEN
										CASE
											WHEN CONVERT(SMALLINT, @not_filter) <> 0 THEN
												'AND sp0.session_id <> CONVERT(SMALLINT, @not_filter) '
											ELSE ''
										END
									WHEN 'program' THEN
										'AND sp0.program_name NOT LIKE @not_filter '
									WHEN 'login' THEN
										'AND sp0.login_name NOT LIKE @not_filter '
									WHEN 'host' THEN
										'AND sp0.host_name NOT LIKE @not_filter '
									WHEN 'database' THEN
										'AND DB_NAME(sp0.database_id) NOT LIKE @not_filter '
									ELSE ''
								END
							ELSE ''
						END +
						CASE @show_own_spid
							WHEN 1 THEN ''
							ELSE
								'AND sp0.session_id <> @@spid '
						END +
						CASE 
							WHEN @show_system_spids = 0 THEN
								'AND sp0.hostprocess > '''' ' 
							ELSE ''
						END +
						CASE @show_sleeping_spids
							WHEN 0 THEN
								'AND sp0.status <> ''sleeping'' '
							WHEN 1 THEN
								'AND ' +
								'( ' +
									'sp0.status <> ''sleeping'' ' +
									'OR sp0.open_tran_count > 0 ' +
								') '
							ELSE ''
						END + 
					'); ' +
				CASE @recursion
					WHEN 1 THEN 
						'IF @blocker = 0 ' +
						'BEGIN; ' +
							'INSERT @blockers ' +
							'( ' +
								'session_id ' +
							') ' +
							'SELECT TOP(@i) ' +
								'blocked ' +
							'FROM @sessions ' +
							'' +
							'EXCEPT ' +
							'' +
							'SELECT TOP(@i) ' +
								'session_id ' +
							'FROM @sessions; ' +
							'' +
							'IF @@ROWCOUNT > 0 ' +
							'BEGIN; ' +
								'SET @blocker = 1; ' +
								'GOTO BLOCKERS; ' +
							'END; ' +
						'END; '
					ELSE ''
				END +
				'SELECT TOP(@i) ' +
					'@recursion AS recursion, ' +
					'x.session_id, ' +
					'x.request_id, ' +
					'DENSE_RANK() OVER  ' +
					'( ' +
						'ORDER BY ' +
							'x.session_id ' +
					') AS session_number, ' +
					CASE
						WHEN @output_column_list LIKE '%|[dd hh:mm:ss.mss|]%' ESCAPE '|' THEN 'x.elapsed_time '
						ELSE '0 '
					END + 'AS elapsed_time, ' +
					CASE
						WHEN
							(
								@output_column_list LIKE '%|[dd hh:mm:ss.mss (avg)|]%' ESCAPE '|' OR 
								@output_column_list LIKE '%|[avg_elapsed_time|]%' ESCAPE '|'
							)
							AND @recursion = 1
								THEN 'x.avg_elapsed_time / 1000 '
						ELSE 'NULL '
					END + 'AS avg_elapsed_time, ' +
					CASE
						WHEN 
							@output_column_list LIKE '%|[physical_io|]%' ESCAPE '|'
							OR @output_column_list LIKE '%|[physical_io_delta|]%' ESCAPE '|'
								THEN 'x.physical_io '
						ELSE 'NULL '
					END + 'AS physical_io, ' +
					CASE
						WHEN 
							@output_column_list LIKE '%|[reads|]%' ESCAPE '|'
							OR @output_column_list LIKE '%|[reads_delta|]%' ESCAPE '|'
								THEN 'x.reads '
						ELSE '0 '
					END + 'AS reads, ' +
					CASE
						WHEN 
							@output_column_list LIKE '%|[physical_reads|]%' ESCAPE '|'
							OR @output_column_list LIKE '%|[physical_reads_delta|]%' ESCAPE '|'
								THEN 'x.physical_reads '
						ELSE '0 '
					END + 'AS physical_reads, ' +
					CASE
						WHEN 
							@output_column_list LIKE '%|[writes|]%' ESCAPE '|'
							OR @output_column_list LIKE '%|[writes_delta|]%' ESCAPE '|'
								THEN 'x.writes '
						ELSE '0 '
					END + 'AS writes, ' +
					CASE
						WHEN 
							@output_column_list LIKE '%|[tempdb_allocations|]%' ESCAPE '|'
							OR @output_column_list LIKE '%|[tempdb_allocations_delta|]%' ESCAPE '|'
								THEN 'x.tempdb_allocations '
						ELSE '0 '
					END + 'AS tempdb_allocations, ' +
					CASE
						WHEN 
							@output_column_list LIKE '%|[tempdb_current|]%' ESCAPE '|'
							OR @output_column_list LIKE '%|[tempdb_current_delta|]%' ESCAPE '|'
								THEN 'x.tempdb_current '
						ELSE '0 '
					END + 'AS tempdb_current, ' +
					CASE
						WHEN 
							@output_column_list LIKE '%|[CPU|]%' ESCAPE '|'
							OR @output_column_list LIKE '%|[CPU_delta|]%' ESCAPE '|'
								THEN 'x.CPU '
						ELSE '0 '
					END + 'AS CPU, ' +
					CASE
						WHEN 
							@output_column_list LIKE '%|[context_switches|]%' ESCAPE '|'
							OR @output_column_list LIKE '%|[context_switches_delta|]%' ESCAPE '|'
								THEN 'x.context_switches '
						ELSE 'NULL '
					END + 'AS context_switches, ' +
					CASE
						WHEN 
							@output_column_list LIKE '%|[used_memory|]%' ESCAPE '|'
							OR @output_column_list LIKE '%|[used_memory_delta|]%' ESCAPE '|'
								THEN 'x.used_memory '
						ELSE '0 '
					END + 'AS used_memory, ' +
					CASE
						WHEN 
							@output_column_list LIKE '%|[tasks|]%' ESCAPE '|'
							AND @recursion = 1
								THEN 'x.tasks '
						ELSE 'NULL '
					END + 'AS tasks, ' +
					CASE
						WHEN 
							(
								@output_column_list LIKE '%|[status|]%' ESCAPE '|' 
								OR @output_column_list LIKE '%|[sql_command|]%' ESCAPE '|'
							)
							AND @recursion = 1
								THEN 'x.status '
						ELSE ''''' '
					END + 'AS status, ' +
					CASE
						WHEN 
							@output_column_list LIKE '%|[wait_info|]%' ESCAPE '|' 
							AND @recursion = 1
								THEN 'x.wait_info '
						ELSE 'NULL '
					END + 'AS wait_info, ' +
					CASE
						WHEN 
							@output_column_list LIKE '%|[tran_start_time|]%' ESCAPE '|' 
							AND @recursion = 1
								THEN 
								'CONVERT ' +
								'( ' +
									'DATETIME, ' +
									'LEFT ' +
									'( ' +
										'x.tran_log_writes, ' +
										'NULLIF(CHARINDEX(NCHAR(254), x.tran_log_writes) - 1, -1) ' +
									') ' +
								') '
						ELSE 'NULL '
					END + 'AS tran_start_time, ' +				
					CASE
						WHEN 
							@output_column_list LIKE '%|[tran_log_writes|]%' ESCAPE '|' 
							AND @recursion = 1
								THEN 
								'RIGHT ' +
								'( ' +
									'x.tran_log_writes, ' +
									'LEN(x.tran_log_writes) - CHARINDEX(NCHAR(254), x.tran_log_writes) ' +
								') '
						ELSE 'NULL '
					END + 'AS tran_log_writes, ' +
					CASE
						WHEN 
							@output_column_list LIKE '%|[open_tran_count|]%' ESCAPE '|' 
							AND @recursion = 1
								THEN 'x.open_tran_count '
						ELSE 'NULL '
					END + 'AS open_tran_count, ' + 
					CASE
						WHEN 
							@output_column_list LIKE '%|[sql_text|]%' ESCAPE '|' 
							AND @recursion = 1
								THEN 'x.sql_handle '
						ELSE 'NULL '
					END + 'AS sql_handle, ' +
					CASE
						WHEN 
							(
								@output_column_list LIKE '%|[sql_text|]%' ESCAPE '|' 
								OR @output_column_list LIKE '%|[query_plan|]%' ESCAPE '|' 
							)
							AND @recursion = 1
								THEN 'x.statement_start_offset '
						ELSE 'NULL '
					END + 'AS statement_start_offset, ' +
					CASE
						WHEN 
							(
								@output_column_list LIKE '%|[sql_text|]%' ESCAPE '|' 
								OR @output_column_list LIKE '%|[query_plan|]%' ESCAPE '|' 
							)
							AND @recursion = 1
								THEN 'x.statement_end_offset '
						ELSE 'NULL '
					END + 'AS statement_end_offset, ' +
					'NULL AS sql_text, ' +
					CASE
						WHEN 
							@output_column_list LIKE '%|[query_plan|]%' ESCAPE '|' 
							AND @recursion = 1
								THEN 'x.plan_handle '
						ELSE 'NULL '
					END + 'AS plan_handle, ' +
					CASE
						WHEN 
							@output_column_list LIKE '%|[blocking_session_id|]%' ESCAPE '|' 
							AND @recursion = 1
								THEN 'NULLIF(x.blocking_session_id, 0) '
						ELSE 'NULL '
					END + 'AS blocking_session_id, ' +
					CASE
						WHEN 
							@output_column_list LIKE '%|[percent_complete|]%' ESCAPE '|'
							AND @recursion = 1
								THEN 'x.percent_complete '
						ELSE 'NULL '
					END + 'AS percent_complete, ' +
					CASE
						WHEN 
							@output_column_list LIKE '%|[host_name|]%' ESCAPE '|' 
							AND @recursion = 1
								THEN 'x.host_name '
						ELSE ''''' '
					END + 'AS host_name, ' +
					CASE
						WHEN 
							@output_column_list LIKE '%|[login_name|]%' ESCAPE '|' 
							AND @recursion = 1
								THEN 'x.login_name '
						ELSE ''''' '
					END + 'AS login_name, ' +
					CASE
						WHEN 
							@output_column_list LIKE '%|[database_name|]%' ESCAPE '|' 
							AND @recursion = 1
								THEN 'DB_NAME(x.database_id) '
						ELSE 'NULL '
					END + 'AS database_name, ' +
					CASE
						WHEN 
							@output_column_list LIKE '%|[program_name|]%' ESCAPE '|' 
							AND @recursion = 1
								THEN 'x.program_name '
						ELSE ''''' '
					END + 'AS program_name, ' +
					CASE
						WHEN
							@output_column_list LIKE '%|[additional_info|]%' ESCAPE '|'
							AND @recursion = 1
								THEN
									'( ' +
										'SELECT TOP(@i) ' +
											'text_size, ' +
											'language, ' +
											'date_format, ' +
											'date_first, ' +
											'CASE quoted_identifier ' +
												'WHEN 0 THEN ''OFF'' ' +
												'ELSE ''ON'' ' +
											'END AS quoted_identifier, ' +
											'CASE arithabort ' +
												'WHEN 0 THEN ''OFF'' ' +
												'ELSE ''ON'' ' +
											'END AS arithabort, ' +
											'CASE ansi_null_dflt_on ' +
												'WHEN 0 THEN ''OFF'' ' +
												'ELSE ''ON'' ' +
											'END AS ansi_null_dflt_on, ' +
											'CASE ansi_defaults ' +
												'WHEN 0 THEN ''OFF'' ' +
												'ELSE ''ON'' ' +
											'END AS ansi_defaults, ' +
											'CASE ansi_warnings ' +
												'WHEN 0 THEN ''OFF'' ' +
												'ELSE ''ON'' ' +
											'END AS ansi_warnings, ' +
											'CASE ansi_padding ' +
												'WHEN 0 THEN ''OFF'' ' +
												'ELSE ''ON'' ' +
											'END AS ansi_padding, ' +
											'CASE ansi_nulls ' +
												'WHEN 0 THEN ''OFF'' ' +
												'ELSE ''ON'' ' +
											'END AS ansi_nulls, ' +
											'CASE concat_null_yields_null ' +
												'WHEN 0 THEN ''OFF'' ' +
												'ELSE ''ON'' ' +
											'END AS concat_null_yields_null, ' +
											'CASE transaction_isolation_level ' +
												'WHEN 0 THEN ''Unspecified'' ' +
												'WHEN 1 THEN ''ReadUncomitted'' ' +
												'WHEN 2 THEN ''ReadCommitted'' ' +
												'WHEN 3 THEN ''Repeatable'' ' +
												'WHEN 4 THEN ''Serializable'' ' +
												'WHEN 5 THEN ''Snapshot'' ' +
											'END AS transaction_isolation_level, ' +
											'lock_timeout, ' +
											'deadlock_priority, ' +
											'row_count, ' +
											'original_login_name ' +
										'FOR XML ' +
											'PATH(''additional_info''), ' +
											'TYPE ' +
									') '
						ELSE 'NULL '
					END + 'AS additional_info, ' +
					'x.start_time, ' +
					'x.last_request_start_time '
			--End column list
			) +
			--Derived table "y"
			CONVERT
			(
				VARCHAR(MAX),
				'FROM ' +
				'( ' +
					'SELECT TOP(@i) ' +
						'y.*, ' +
						'CASE ' +
							--if there are more than 24 days, return a negative number of seconds rather than
							--positive milliseconds, in order to avoid overflow errors
							'WHEN DATEDIFF(day, y.start_time, GETDATE()) > 24 THEN ' +
								'DATEDIFF(second, GETDATE(), y.start_time) ' +
							'ELSE DATEDIFF(ms, y.start_time, GETDATE()) ' +
						'END AS elapsed_time, ' +
						'tasks.physical_io, ' +
						'COALESCE(tempdb_info.tempdb_allocations, 0) AS tempdb_allocations, ' +
						'COALESCE ' +
						'( ' +
							'CASE ' +
								'WHEN tempdb_info.tempdb_current < 0 THEN 0 ' +
								'ELSE tempdb_info.tempdb_current ' + 
							'END, ' +
							'0 ' +
						') AS tempdb_current, ' +
						'tasks.context_switches, ' + 
						'tasks.tasks, ' +
						'tasks.wait_info, ' +
						'tasks.blocking_session_id, ' +
						CASE 
							WHEN NOT (@get_avg_time = 1 AND @recursion = 1) THEN 'CONVERT(INT, NULL) '
							ELSE 'qs.total_elapsed_time / qs.execution_count '
						END + 'AS avg_elapsed_time ' +
					'FROM ' +
					'( ' +
						'SELECT TOP(@i) ' +
							'sp.session_id, ' +
							'sp.request_id, ' +
							'COALESCE(r.logical_reads, s.logical_reads) AS reads, ' +
							'COALESCE(r.reads, s.reads) AS physical_reads, ' +
							'COALESCE(r.writes, s.writes) AS writes, ' +
							'COALESCE(r.CPU_time, s.CPU_time) AS CPU, ' +
							'sp.memory_usage + COALESCE(r.granted_query_memory, 0) AS used_memory, ' +
							'LOWER(sp.status) AS status, ' +
							'sp.sql_handle, ' +
							'r.sql_handle AS request_sql_handle, ' +
							'sp.statement_start_offset, ' +
							'sp.statement_end_offset, ' +
							'r.plan_handle, ' +
							'NULLIF(r.percent_complete, 0) AS percent_complete, ' +
							'sp.host_name, ' +
							'sp.login_name, ' +
							'sp.program_name, ' +
							'COALESCE(r.text_size, s.text_size) AS text_size, ' +
							'COALESCE(r.language, s.language) AS language, ' +
							'COALESCE(r.date_format, s.date_format) AS date_format, ' +
							'COALESCE(r.date_first, s.date_first) AS date_first, ' +
							'COALESCE(r.quoted_identifier, s.quoted_identifier) AS quoted_identifier, ' +
							'COALESCE(r.arithabort, s.arithabort) AS arithabort, ' +
							'COALESCE(r.ansi_null_dflt_on, s.ansi_null_dflt_on) AS ansi_null_dflt_on, ' +
							'COALESCE(r.ansi_defaults, s.ansi_defaults) AS ansi_defaults, ' +
							'COALESCE(r.ansi_warnings, s.ansi_warnings) AS ansi_warnings, ' +
							'COALESCE(r.ansi_padding, s.ansi_padding) AS ansi_padding, ' +
							'COALESCE(r.ansi_nulls, s.ansi_nulls) AS ansi_nulls, ' +
							'COALESCE(r.concat_null_yields_null, s.concat_null_yields_null) AS concat_null_yields_null, ' +
							'COALESCE(r.transaction_isolation_level, s.transaction_isolation_level) AS transaction_isolation_level, ' +
							'COALESCE(r.lock_timeout, s.lock_timeout) AS lock_timeout, ' +
							'COALESCE(r.deadlock_priority, s.deadlock_priority) AS deadlock_priority, ' +
							'COALESCE(r.row_count, s.row_count) AS row_count, ' +
							's.original_login_name, ' +
							'COALESCE(r.start_time, sp.login_time) AS start_time, ' +
							'COALESCE(r.start_time, s.last_request_start_time) AS last_request_start_time, ' +
							'r.transaction_id, ' +
							'sp.database_id, ' +
							'sp.open_tran_count, ' +
							'( ' +
								CASE 
									WHEN NOT (@get_transaction_info = 1 AND @recursion = 1) THEN 'SELECT CONVERT(NVARCHAR(4000), NULL) '
									ELSE
										CONVERT
										(
											VARCHAR(MAX),
											'( ' +
												'SELECT TOP(@i) ' +
													'CONVERT ' +
													'( ' +
														'NVARCHAR(MAX), ' +
														'CASE ' +
															'WHEN u_trans.database_id IS NOT NULL THEN ' +
																'CASE u_trans.r ' +
																	'WHEN 1 THEN COALESCE(CONVERT(NVARCHAR, u_trans.transaction_start_time, 121) + NCHAR(254), N'''') ' +
																	'ELSE N'''' ' +
																'END + ' + 
																	'REPLACE ' +
																	'( ' +
																		'REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE( ' +
																		'REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE( ' +
																		'REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE( ' +
																			'CONVERT(VARCHAR(128), COALESCE(DB_NAME(u_trans.database_id), N''(null)'')), ' +
																			'NCHAR(31),N''?''),NCHAR(30),N''?''),NCHAR(29),N''?''),NCHAR(28),N''?''),NCHAR(27),N''?''),NCHAR(26),N''?''),NCHAR(25),N''?''),NCHAR(24),N''?''),NCHAR(23),N''?''),NCHAR(22),N''?''), ' +
																			'NCHAR(21),N''?''),NCHAR(20),N''?''),NCHAR(19),N''?''),NCHAR(18),N''?''),NCHAR(17),N''?''),NCHAR(16),N''?''),NCHAR(15),N''?''),NCHAR(14),N''?''),NCHAR(12),N''?''), ' +
																			'NCHAR(11),N''?''),NCHAR(8),N''?''),NCHAR(7),N''?''),NCHAR(6),N''?''),NCHAR(5),N''?''),NCHAR(4),N''?''),NCHAR(3),N''?''),NCHAR(2),N''?''),NCHAR(1),N''?''), ' +
																		'NCHAR(0), ' +
																		N'''?'' ' +
																	') + ' +
																	'N'': '' + ' +
																'CONVERT(NVARCHAR, u_trans.log_record_count) + N'' ('' + CONVERT(NVARCHAR, u_trans.log_kb_used) + N'' kB)'' + ' +
																'N'','' ' +
															'ELSE ' +
																'N''N/A,'' ' +
														'END COLLATE Latin1_General_BIN2 ' +
													') AS [text()] ' +
												'FROM ' +
												'( ' +
													'SELECT TOP(@i) ' +
														'trans.*, ' +
														'ROW_NUMBER() OVER (ORDER BY trans.transaction_start_time DESC) AS r ' +
													'FROM ' +
													'( ' +
														'SELECT TOP(@i) ' +
															's_tran.database_id, ' +
															'COALESCE(SUM(s_tran.database_transaction_log_record_count), 0) AS log_record_count, ' +
															'COALESCE(SUM(s_tran.database_transaction_log_bytes_used), 0) / 1024 AS log_kb_used, ' +
															'MIN(s_tran.database_transaction_begin_time) AS transaction_start_time ' +
														'FROM ' +
														'( ' +
															'SELECT TOP(@i) ' +
																'* ' +
															'FROM sys.dm_tran_database_transactions ' +
														') AS s_tran ' +
														'LEFT OUTER JOIN ' +
														'( ' +
															'SELECT TOP(@i) ' +
																'* ' +
															'FROM sys.dm_tran_session_transactions ' +
														') AS tst ON ' +
															's_tran.transaction_id = tst.transaction_id ' +
															'AND s_tran.database_id < 32767 ' +
														'WHERE ' +
															's_tran.transaction_id = r.transaction_id ' + 
															'OR ' +
															'( ' +
																'COALESCE(sp.request_id, 0) = 0 ' +
																'AND sp.session_id = tst.session_id ' +
															') ' +
														'GROUP BY ' +
															's_tran.database_id ' +
													') AS trans ' +
												') AS u_trans ' +
												'FOR XML PATH(''''), TYPE ' +
											').value(''.'', ''NVARCHAR(MAX)'') '
										)
								END +
							') COLLATE Latin1_General_Bin2 AS tran_log_writes ' +
						'FROM @sessions AS sp ' +
						'LEFT OUTER LOOP JOIN sys.dm_exec_requests AS r ON ' +
							'sp.status <> ''sleeping'' ' +
							'AND r.session_id = sp.session_id ' +
							'AND r.request_id = sp.request_id ' +
						'LEFT OUTER LOOP JOIN sys.dm_exec_sessions AS s ON ' +
							's.session_id = sp.session_id ' +
							'AND r.request_id IS NULL ' +
						'WHERE ' +
							'sp.ecid = 0 ' +
							'AND ' +
							'( ' +
								'( ' +
									'COALESCE(sp.request_id, 0) = 0 ' +
									'AND ' + 
									'( ' +
										'r.request_id IS NOT NULL ' +
										'OR s.session_id IS NOT NULL ' +
									') ' +
								') ' +
								'OR ' +
								'( ' +
									'COALESCE(sp.request_id, 0) > 0 ' +
									'AND r.request_id IS NOT NULL ' +
								') ' +
							') ' +
					') AS y '
				--End derived table "y"
				) +
				--Derived table "x"
				CONVERT
				(
					VARCHAR(MAX),
					CASE 
						WHEN 
							(
								@get_task_info = 0
								AND @find_block_leaders = 0
							) THEN
							'CROSS JOIN ' +
							'( ' +
								'SELECT TOP(@i) ' +
									'CONVERT(BIGINT, NULL) AS physical_io, ' +
									'CONVERT(BIGINT, NULL) AS context_switches, ' +
									'CONVERT(INT, NULL) AS tasks, ' +
									'CONVERT(SMALLINT, NULL) AS blocking_session_id, ' +
									'CONVERT(NVARCHAR(4000), NULL) AS wait_info ' +
							') AS tasks '
						WHEN @get_task_info = 2 THEN
							'LEFT OUTER HASH JOIN ' +
							'( ' +
								'SELECT TOP(@i) ' +
									'task_nodes.task_node.value(''(session_id/text())[1]'', ''SMALLINT'') AS session_id, ' +
									'task_nodes.task_node.value(''(request_id/text())[1]'', ''INT'') AS request_id, ' +
									'task_nodes.task_node.value(''(physical_io/text())[1]'', ''BIGINT'') AS physical_io, ' +
									'task_nodes.task_node.value(''(context_switches/text())[1]'', ''BIGINT'') AS context_switches, ' +
									'task_nodes.task_node.value(''(tasks/text())[1]'', ''INT'') AS tasks, ' +
									'task_nodes.task_node.value(''(blocking_session_id/text())[1]'', ''SMALLINT'') AS blocking_session_id, ' +
									'task_nodes.task_node.value(''(waits/text())[1]'', ''NVARCHAR(4000)'') AS wait_info ' +
								'FROM ' +
								'( ' +
									'SELECT TOP(@i) ' +
										'CONVERT ' +
										'( ' +
											'XML, ' +
											'REPLACE( ' +
												'CONVERT(NVARCHAR(MAX), tasks_raw.task_xml_raw) COLLATE Latin1_General_Bin2, ' +
												'N''</waits></tasks><tasks><waits>'', N'', '') ' +
										') AS task_xml ' +
									'FROM ' +
									'( ' +
										'SELECT TOP(@i) ' +
											'CASE waits.r ' +
												'WHEN 1 THEN waits.session_id ' +
												'ELSE NULL ' +
											'END AS [session_id], ' +
											'CASE waits.r ' +
												'WHEN 1 THEN waits.request_id ' +
												'ELSE NULL ' +
											'END AS [request_id], ' +											
											'CASE waits.r ' +
												'WHEN 1 THEN waits.physical_io ' +
												'ELSE NULL ' +
											'END AS [physical_io], ' +
											'CASE waits.r ' +
												'WHEN 1 THEN waits.context_switches ' +
												'ELSE NULL ' +
											'END AS [context_switches], ' +
											'CASE waits.r ' +
												'WHEN 1 THEN waits.tasks ' +
												'ELSE NULL ' +
											'END AS [tasks], ' +
											'CASE waits.r ' +
												'WHEN 1 THEN waits.blocking_session_id ' +
												'ELSE NULL ' +
											'END AS [blocking_session_id], ' +
											'REPLACE ' +
											'( ' +
												'REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE( ' +
												'REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE( ' +
												'REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE( ' +
													'CONVERT ' +
													'( ' +
														'NVARCHAR(MAX), ' +
														'N''('' + ' +
															'CONVERT(NVARCHAR, num_waits) + N''x: '' + ' +
															'CASE num_waits ' +
																'WHEN 1 THEN CONVERT(NVARCHAR, min_wait_time) + N''ms'' ' +
																'WHEN 2 THEN ' +
																	'CASE ' +
																		'WHEN min_wait_time <> max_wait_time THEN CONVERT(NVARCHAR, min_wait_time) + N''/'' + CONVERT(NVARCHAR, max_wait_time) + N''ms'' ' +
																		'ELSE CONVERT(NVARCHAR, max_wait_time) + N''ms'' ' +
																	'END ' +
																'ELSE ' +
																	'CASE ' +
																		'WHEN min_wait_time <> max_wait_time THEN CONVERT(NVARCHAR, min_wait_time) + N''/'' + CONVERT(NVARCHAR, avg_wait_time) + N''/'' + CONVERT(NVARCHAR, max_wait_time) + N''ms'' ' +
																		'ELSE CONVERT(NVARCHAR, max_wait_time) + N''ms'' ' +
																	'END ' +
															'END + ' +
														'N'')'' + wait_type COLLATE Latin1_General_BIN2 ' +
													'), ' +
													'NCHAR(31),N''?''),NCHAR(30),N''?''),NCHAR(29),N''?''),NCHAR(28),N''?''),NCHAR(27),N''?''),NCHAR(26),N''?''),NCHAR(25),N''?''),NCHAR(24),N''?''),NCHAR(23),N''?''),NCHAR(22),N''?''), ' +
													'NCHAR(21),N''?''),NCHAR(20),N''?''),NCHAR(19),N''?''),NCHAR(18),N''?''),NCHAR(17),N''?''),NCHAR(16),N''?''),NCHAR(15),N''?''),NCHAR(14),N''?''),NCHAR(12),N''?''), ' +
													'NCHAR(11),N''?''),NCHAR(8),N''?''),NCHAR(7),N''?''),NCHAR(6),N''?''),NCHAR(5),N''?''),NCHAR(4),N''?''),NCHAR(3),N''?''),NCHAR(2),N''?''),NCHAR(1),N''?''), ' +
												'NCHAR(0), ' +
												'N'''' ' +
											') AS [waits] ' +
										'FROM ' +
										'( ' +
											'SELECT TOP(@i) ' +
												'w1.*, ' +
												'ROW_NUMBER() OVER (PARTITION BY w1.session_id, w1.request_id ORDER BY w1.blocking_session_id DESC, w1.num_waits DESC, w1.wait_type) AS r ' +
											'FROM ' +
											'( ' +
												'SELECT TOP(@i) ' +
													'task_info.session_id, ' +
													'task_info.request_id, ' +
													'task_info.physical_io, ' +
													'task_info.context_switches, ' +
													'task_info.num_tasks AS tasks, ' +
													'wt2.wait_type, ' +
													'NULLIF(COUNT(wt2.waiting_task_address), 0) AS num_waits, ' +
													'MIN(wt2.wait_duration_ms) AS min_wait_time, ' +
													'AVG(wt2.wait_duration_ms) AS avg_wait_time, ' +
													'MAX(wt2.wait_duration_ms) AS max_wait_time, ' +
													'MAX(wt2.blocking_session_id) AS blocking_session_id ' +
												'FROM ' +
												'( ' +
													'SELECT TOP(@i) ' +
														'sp2.session_id, ' +
														'sp2.request_id, ' +
														'SUM(CONVERT(BIGINT, t.pending_io_count)) OVER (PARTITION BY sp2.session_id, sp2.request_id) AS physical_io, ' +
														'SUM(CONVERT(BIGINT, t.context_switches_count)) OVER (PARTITION BY sp2.session_id, sp2.request_id) AS context_switches, ' +
														'COUNT(*) OVER (PARTITION BY sp2.session_id, sp2.request_id) AS num_tasks, ' +
														't.task_address, ' +
														't.task_state ' +
													'FROM sys.dm_os_tasks AS t ' +
													'INNER LOOP JOIN @sessions AS sp2 ON ' +
														'sp2.session_id = t.session_id ' +
														'AND sp2.status <> ''sleeping'' ' +
													'INNER HASH JOIN ' +
													'( ' +
														'SELECT TOP(@i) ' +
															'* ' +
														'FROM sys.dm_os_threads ' +
													') AS th ON ' +
														'th.os_thread_id = sp2.kpid ' +
													'INNER HASH JOIN ' +
													'( ' +
														'SELECT TOP(@i) ' +
															'* ' +
														'FROM sys.dm_os_workers ' +
													') AS w ON ' +
														'w.thread_address = th.thread_address ' +
														'AND w.worker_address = t.worker_address ' +
												') AS task_info ' +
												'LEFT OUTER HASH JOIN ' +
												'( ' +
													'SELECT TOP(@i) ' +
														'wt1.wait_type, ' +
														'wt1.waiting_task_address, ' +
														'MAX(wt1.wait_duration_ms) AS wait_duration_ms, ' +
														'MAX(wt1.blocking_session_id) AS blocking_session_id ' +
													'FROM ' +
													'( ' +
														'SELECT DISTINCT TOP(@i) ' +
															'wt.wait_type + ' +
																--TODO: What else can be pulled from the resource_description?
																'CASE ' +
																	'WHEN wt.wait_type LIKE N''PAGE%LATCH_%'' THEN ' +
																		''':'' + ' +
																		--database name
																		'COALESCE(DB_NAME(CONVERT(INT, LEFT(wt.resource_description, CHARINDEX(N'':'', wt.resource_description) - 1))), N''(null)'') + ' +
																		'N'':'' + ' +
																		--file id
																		'SUBSTRING(wt.resource_description, CHARINDEX(N'':'', wt.resource_description) + 1, LEN(wt.resource_description) - CHARINDEX(N'':'', REVERSE(wt.resource_description)) - CHARINDEX(N'':'', wt.resource_description)) + ' +
																		--page # for special pages
																		'N''('' + ' +
																			'CASE ' +
																				'WHEN ' +
																					'CONVERT(INT, RIGHT(wt.resource_description, CHARINDEX(N'':'', REVERSE(wt.resource_description)) - 1)) = 1 OR ' +
																					'CONVERT(INT, RIGHT(wt.resource_description, CHARINDEX(N'':'', REVERSE(wt.resource_description)) - 1)) % 8088 = 0 THEN N''PFS'' ' +
																				'WHEN ' +
																					'CONVERT(INT, RIGHT(wt.resource_description, CHARINDEX(N'':'', REVERSE(wt.resource_description)) - 1)) = 2 OR ' +
																					'CONVERT(INT, RIGHT(wt.resource_description, CHARINDEX(N'':'', REVERSE(wt.resource_description)) - 1)) % 511232 = 0 THEN N''GAM'' ' +
																				'WHEN ' +
																					'CONVERT(INT, RIGHT(wt.resource_description, CHARINDEX(N'':'', REVERSE(wt.resource_description)) - 1)) = 3 OR ' +
																					'CONVERT(INT, RIGHT(wt.resource_description, CHARINDEX(N'':'', REVERSE(wt.resource_description)) - 1)) % 511233 = 0 THEN N''SGAM'' ' +
																				'WHEN ' +
																					'CONVERT(INT, RIGHT(wt.resource_description, CHARINDEX(N'':'', REVERSE(wt.resource_description)) - 1)) = 6 OR ' +
																					'CONVERT(INT, RIGHT(wt.resource_description, CHARINDEX(N'':'', REVERSE(wt.resource_description)) - 1)) % 511238 = 0 THEN N''DCM'' ' +
																				'WHEN ' +
																					'CONVERT(INT, RIGHT(wt.resource_description, CHARINDEX(N'':'', REVERSE(wt.resource_description)) - 1)) = 7 OR ' +
																					'CONVERT(INT, RIGHT(wt.resource_description, CHARINDEX(N'':'', REVERSE(wt.resource_description)) - 1)) % 511239 = 0 THEN N''BCM'' ' +
																				'ELSE N''*'' ' +
																			'END + ' +
																		'N'')'' ' +
																	'WHEN wt.wait_type = N''CXPACKET'' THEN ' +
																		'N'':'' + SUBSTRING(wt.resource_description, CHARINDEX(N''nodeId'', wt.resource_description) + 7, 4) ' +
																	'WHEN wt.wait_type LIKE N''LATCH[_]%'' THEN ' +
																		'N'' ['' + LEFT(wt.resource_description, COALESCE(NULLIF(CHARINDEX(N'' '', wt.resource_description), 0), LEN(wt.resource_description) + 1) - 1) + N'']'' ' +
																	'ELSE N'''' ' +
																'END COLLATE Latin1_General_Bin2 AS wait_type, ' +
															'wt.wait_duration_ms, ' +
															'wt.waiting_task_address, ' +
															'wt.blocking_session_id ' +
														'FROM ' +
														'( ' +
															'SELECT TOP(@i) ' +
																'wt0.wait_type COLLATE Latin1_General_Bin2 AS wait_type, ' +
																'wt0.resource_description COLLATE Latin1_General_Bin2 AS resource_description, ' +
																'wt0.wait_duration_ms, ' +
																'wt0.waiting_task_address, ' +
																'CASE ' +
																	'WHEN wt0.blocking_session_id <> wt0.session_id THEN wt0.blocking_session_id ' +
																	'ELSE NULL ' +
																'END AS blocking_session_id ' +
															'FROM sys.dm_os_waiting_tasks AS wt0 ' +
															'CROSS APPLY ' +
															'( ' +
																'SELECT TOP(1)' +
																	's0.session_id ' +
																'FROM @sessions AS s0 ' +
																'WHERE ' +
																	's0.session_id = wt0.session_id ' +
															') AS p ' +
														') AS wt ' +
													') AS wt1 ' +
													'GROUP BY ' +
														'wt1.wait_type, ' +
														'wt1.waiting_task_address ' +
													'' +
													'UNION ALL ' + 
													'' + 
													'SELECT TOP(@i) ' +
														'state, ' +
														'task_address, ' +
														'( ' +
															'SELECT TOP(@i) ' +
																'ms_ticks ' +
															'FROM sys.dm_os_sys_info ' +
														') - ' +
															'wait_resumed_ms_ticks, ' +
														'NULL ' +
													'FROM sys.dm_os_workers ' +
													'WHERE ' +
														'state = ''RUNNABLE'' ' +
												') AS wt2 ON ' +
													'wt2.waiting_task_address = task_info.task_address ' +
													'AND wt2.wait_duration_ms > 0 ' +
													'AND ' +
													'( ' +
														'task_info.task_state <> ''RUNNABLE'' ' +
														'OR ' +
														'( ' +
															'task_info.task_state = ''RUNNABLE'' ' +
															'AND wt2.wait_type = ''RUNNABLE'' ' +
														') ' +
													') ' +
												'GROUP BY ' +
													'task_info.session_id, ' +
													'task_info.request_id, ' +
													'task_info.physical_io, ' +
													'task_info.context_switches, ' +
													'task_info.num_tasks, ' +
													'wt2.wait_type ' +
											') AS w1 ' +
										') AS waits ' +
										'ORDER BY ' +
											'waits.session_id, ' +
											'waits.request_id, ' +
											'waits.r ' +
										'FOR XML PATH(N''tasks''), TYPE ' +
									') AS tasks_raw (task_xml_raw) ' +
								') AS tasks_final ' +
								'CROSS APPLY tasks_final.task_xml.nodes(N''/tasks'') AS task_nodes (task_node) ' +
								'WHERE ' +
									'task_nodes.task_node.exist(N''session_id'') = 1 ' +
							') AS tasks ON ' +
								'tasks.session_id = y.session_id ' +
								'AND tasks.request_id = y.request_id '
						ELSE --@get_task_info = 1 OR @find_block_leaders = 1
							'LEFT OUTER HASH JOIN ' +
							'( ' +								
								'SELECT TOP(@i) ' +
									'w1.session_id, ' +
									'w1.request_id, ' +
									'w1.blocking_session_id, ' +
									'N''('' + CONVERT(NVARCHAR, w1.wait_duration_ms) + N''ms)'' + ' +
										'w1.wait_type + ' +
											--TODO: What else can be pulled from the resource_description?
											'CASE ' +
												'WHEN w1.wait_type LIKE N''PAGE%LATCH_%'' THEN ' +
													'N'':'' + ' +
													--database name
													'COALESCE(DB_NAME(CONVERT(INT, LEFT(w1.resource_description, CHARINDEX(N'':'', w1.resource_description) - 1))), N''(null)'') + ' +
													'N'':'' + ' +
													--file id
													'SUBSTRING(w1.resource_description, CHARINDEX(N'':'', w1.resource_description) + 1, LEN(w1.resource_description) - CHARINDEX(N'':'', REVERSE(w1.resource_description)) - CHARINDEX(N'':'', w1.resource_description)) + ' +
													--page # for special pages
													'N''('' + ' +
														'CASE ' +
															'WHEN ' +
																'CONVERT(INT, RIGHT(w1.resource_description, CHARINDEX(N'':'', REVERSE(w1.resource_description)) - 1)) = 1 OR ' +
																'CONVERT(INT, RIGHT(w1.resource_description, CHARINDEX(N'':'', REVERSE(w1.resource_description)) - 1)) % 8088 = 0 THEN N''PFS'' ' +
															'WHEN ' +
																'CONVERT(INT, RIGHT(w1.resource_description, CHARINDEX(N'':'', REVERSE(w1.resource_description)) - 1)) = 2 OR ' +
																'CONVERT(INT, RIGHT(w1.resource_description, CHARINDEX(N'':'', REVERSE(w1.resource_description)) - 1)) % 511232 = 0 THEN N''GAM'' ' +
															'WHEN ' +
																'CONVERT(INT, RIGHT(w1.resource_description, CHARINDEX(N'':'', REVERSE(w1.resource_description)) - 1)) = 3 OR ' +
																'CONVERT(INT, RIGHT(w1.resource_description, CHARINDEX(N'':'', REVERSE(w1.resource_description)) - 1)) % 511233 = 0 THEN N''SGAM'' ' +
															'WHEN ' +
																'CONVERT(INT, RIGHT(w1.resource_description, CHARINDEX(N'':'', REVERSE(w1.resource_description)) - 1)) = 6 OR ' +
																'CONVERT(INT, RIGHT(w1.resource_description, CHARINDEX(N'':'', REVERSE(w1.resource_description)) - 1)) % 511238 = 0 THEN N''DCM'' ' +
															'WHEN ' +
																'CONVERT(INT, RIGHT(w1.resource_description, CHARINDEX(N'':'', REVERSE(w1.resource_description)) - 1)) = 7 OR ' +
																'CONVERT(INT, RIGHT(w1.resource_description, CHARINDEX(N'':'', REVERSE(w1.resource_description)) - 1)) % 511239 = 0 THEN N''BCM'' ' +
															'ELSE N''*'' ' +
														'END + ' +
													'N'')'' ' +
												'WHEN w1.wait_type = N''CXPACKET'' THEN ' +
													'N'':'' + SUBSTRING(w1.resource_description, CHARINDEX(N''nodeId'', w1.resource_description) + 7, 4)' +
												'WHEN w1.wait_type LIKE N''LATCH[_]%'' THEN ' +
													'N'' ['' + LEFT(w1.resource_description, COALESCE(NULLIF(CHARINDEX(N'' '', w1.resource_description), 0), LEN(w1.resource_description) + 1) - 1) + N'']'' ' +
												'ELSE N'''' ' +
											'END COLLATE Latin1_General_Bin2 AS wait_info, ' +
									'CONVERT(BIGINT, NULL) AS physical_io, ' +
									'CONVERT(BIGINT, NULL) AS context_switches, ' +
									'CONVERT(INT, NULL) AS tasks ' +
								'FROM ' +
								'( ' +
									'SELECT TOP(@i) ' +
										'sp2.session_id, ' +
										'sp2.request_id, ' +
										'sp2.wait_type COLLATE Latin1_General_Bin2 AS wait_type, ' +
										'sp2.wait_resource COLLATE Latin1_General_Bin2 AS resource_description, ' +
										'sp2.wait_time AS wait_duration_ms, ' +
										'NULLIF(sp2.blocked, 0) AS blocking_session_id, ' +
										'ROW_NUMBER() OVER ' +
										'( ' +
											'PARTITION BY sp2.session_id, sp2.request_id ' +
											'ORDER BY sp2.blocked DESC, sp2.wait_time DESC ' +
										') AS r ' +
									'FROM @sessions AS sp2 ' +
								') AS w1 ' +
								'WHERE ' +
									'w1.r = 1 ' +
							') AS tasks ON ' +
								'tasks.session_id = y.session_id ' +
								'AND tasks.request_id = y.request_id '
					END +
					CONVERT
					(
						VARCHAR(MAX), 
						'LEFT OUTER HASH JOIN ' +
						'( ' +
							'SELECT TOP(@i) ' +
								't_info.session_id, ' +
								't_info.request_id, ' +
								'SUM(t_info.tempdb_allocations) AS tempdb_allocations, ' +
								'SUM(t_info.tempdb_current) AS tempdb_current ' +
							'FROM ' +
							'( ' +
								'SELECT TOP(@i) ' +
									'tsu.session_id, ' +
									'tsu.request_id, ' +
									'tsu.user_objects_alloc_page_count + ' +
										'tsu.internal_objects_alloc_page_count AS tempdb_allocations,' +
									'tsu.user_objects_alloc_page_count + ' +
										'tsu.internal_objects_alloc_page_count - ' +
										'tsu.user_objects_dealloc_page_count - ' +
										'tsu.internal_objects_dealloc_page_count AS tempdb_current ' +
								'FROM sys.dm_db_task_space_usage AS tsu ' +
								'CROSS APPLY ' +
								'( ' +
									'SELECT TOP(1) ' +
										's0.session_id ' +
									'FROM @sessions AS s0 ' +
									'WHERE ' +
										's0.session_id = tsu.session_id ' +
								') AS p ' +
								'' +
								'UNION ALL ' +
								'' +
								'SELECT TOP(@i) ' +
									'ssu.session_id, ' +
									'NULL AS request_id, ' +
									'ssu.user_objects_alloc_page_count + ' +
										'ssu.internal_objects_alloc_page_count AS tempdb_allocations, ' +
									'ssu.user_objects_alloc_page_count + ' +
										'ssu.internal_objects_alloc_page_count - ' +
										'ssu.user_objects_dealloc_page_count - ' +
										'ssu.internal_objects_dealloc_page_count AS tempdb_current ' +
								'FROM sys.dm_db_session_space_usage AS ssu ' +
								'CROSS APPLY ' +
								'( ' +
									'SELECT TOP(1) ' +
										's0.session_id ' +
									'FROM @sessions AS s0 ' +
									'WHERE ' +
										's0.session_id = ssu.session_id ' +
								') AS p ' +
							') AS t_info ' +
							'GROUP BY ' +
								't_info.session_id, ' +
								't_info.request_id ' +
						') AS tempdb_info ON ' +
							'tempdb_info.session_id = y.session_id ' +
							'AND COALESCE(tempdb_info.request_id, -1) = COALESCE(y.request_id, -1) ' 
					) +
					CASE 
						WHEN NOT (@get_avg_time = 1 AND @recursion = 1) THEN CONVERT(VARCHAR(MAX), '')
						ELSE
							CONVERT(VARCHAR(MAX), '') +
							'LEFT OUTER HASH JOIN ' +
							'( ' +
								'SELECT TOP(@i) ' +
									'* ' +
								'FROM sys.dm_exec_query_stats ' +
							') AS qs ON ' +
								'qs.sql_handle = y.request_sql_handle ' + 
								'AND qs.plan_handle = y.plan_handle ' + 
								'AND qs.statement_start_offset = y.statement_start_offset ' +
								'AND qs.statement_end_offset = y.statement_end_offset '
						END + 
				') AS x ' +
				'OPTION (KEEPFIXED PLAN, OPTIMIZE FOR (@i = 1)); ' 
			--End derived table "x"
			);

		SET @sql_n = CONVERT(NVARCHAR(MAX), @sql);

		INSERT #sessions
		(
			recursion,
			session_id,
			request_id,
			session_number,
			elapsed_time,
			avg_elapsed_time,
			physical_io,
			reads,
			physical_reads,
			writes,
			tempdb_allocations,
			tempdb_current,
			CPU,
			context_switches,
			used_memory,
			tasks,
			status,
			wait_info,
			tran_start_time,
			tran_log_writes,
			open_tran_count,
			sql_handle,
			statement_start_offset,
			statement_end_offset,		
			sql_text,
			plan_handle,
			blocking_session_id,
			percent_complete,
			host_name,
			login_name,
			database_name,
			program_name,
			additional_info,
			start_time,
			last_request_start_time
		)
		EXEC sp_executesql 
			@sql_n,
			N'@recursion SMALLINT, @filter sysname, @not_filter sysname',
			@recursion, @filter, @not_filter;

		--Variables for text and plan collection
		DECLARE	
			@session_id SMALLINT,
			@request_id INT,
			@sql_handle VARBINARY(64),
			@plan_handle VARBINARY(64),
			@statement_start_offset INT,
			@statement_end_offset INT,
			@start_time DATETIME;

		IF 
			@recursion = 1
			AND @output_column_list LIKE '%|[sql_text|]%' ESCAPE '|'
		BEGIN
			DECLARE sql_cursor
			CURSOR LOCAL FAST_FORWARD
			FOR 
				SELECT 
					session_id,
					request_id,
					sql_handle,
					statement_start_offset,
					statement_end_offset
				FROM #sessions
				WHERE
					recursion = 1
			OPTION (KEEPFIXED PLAN);

			OPEN sql_cursor;

			FETCH NEXT FROM sql_cursor
			INTO 
				@session_id,
				@request_id,
				@sql_handle,
				@statement_start_offset,
				@statement_end_offset;

			--Wait up to 5 ms for the SQL text, then give up
			SET LOCK_TIMEOUT 5;

			WHILE @@FETCH_STATUS = 0
			BEGIN;
				BEGIN TRY;
					UPDATE s
					SET
						s.sql_text =
						(
							SELECT
								REPLACE
								(
									REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
									REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
									REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
										N'--' + NCHAR(13) + NCHAR(10) +
										CASE 
											WHEN @get_full_inner_text = 1 THEN est.text
											WHEN LEN(est.text) < (@statement_end_offset / 2) + 1 THEN est.text
											WHEN SUBSTRING(est.text, (@statement_start_offset/2), 2) LIKE N'[a-zA-Z0-9][a-zA-Z0-9]' THEN est.text
											ELSE
												CASE
													WHEN @statement_start_offset > 0 THEN
														SUBSTRING
														(
															est.text,
															((@statement_start_offset/2) + 1),
															(
																CASE
																	WHEN @statement_end_offset = -1 THEN 2147483647
																	ELSE ((@statement_end_offset - @statement_start_offset)/2) + 1
																END
															)
														)
													ELSE RTRIM(LTRIM(est.text))
												END
										END +
										NCHAR(13) + NCHAR(10) + N'--' COLLATE Latin1_General_BIN2,
										NCHAR(31),N'?'),NCHAR(30),N'?'),NCHAR(29),N'?'),NCHAR(28),N'?'),NCHAR(27),N'?'),NCHAR(26),N'?'),NCHAR(25),N'?'),NCHAR(24),N'?'),NCHAR(23),N'?'),NCHAR(22),N'?'),
										NCHAR(21),N'?'),NCHAR(20),N'?'),NCHAR(19),N'?'),NCHAR(18),N'?'),NCHAR(17),N'?'),NCHAR(16),N'?'),NCHAR(15),N'?'),NCHAR(14),N'?'),NCHAR(12),N'?'),
										NCHAR(11),N'?'),NCHAR(8),N'?'),NCHAR(7),N'?'),NCHAR(6),N'?'),NCHAR(5),N'?'),NCHAR(4),N'?'),NCHAR(3),N'?'),NCHAR(2),N'?'),NCHAR(1),N'?'),
									NCHAR(0),
									N''
								) AS [processing-instruction(query)]
							FOR XML PATH(''), TYPE
						),
						s.statement_start_offset = 
							CASE 
								WHEN LEN(est.text) < (@statement_end_offset / 2) + 1 THEN 0
								WHEN SUBSTRING(CONVERT(VARCHAR(MAX), est.text), (@statement_start_offset/2), 2) LIKE '[a-zA-Z0-9][a-zA-Z0-9]' THEN 0
								ELSE @statement_start_offset
							END,
						s.statement_end_offset = 
							CASE 
								WHEN LEN(est.text) < (@statement_end_offset / 2) + 1 THEN -1
								WHEN SUBSTRING(CONVERT(VARCHAR(MAX), est.text), (@statement_start_offset/2), 2) LIKE '[a-zA-Z0-9][a-zA-Z0-9]' THEN -1
								ELSE @statement_end_offset
							END
					FROM 
						#sessions AS s,
						(
							SELECT TOP(1)
								text
							FROM
							(
								SELECT 
									text, 
									0 AS row_num
								FROM sys.dm_exec_sql_text(@sql_handle)
								
								UNION ALL
								
								SELECT 
									NULL,
									1 AS row_num
							) AS est0
							ORDER BY
								row_num
						) AS est
					WHERE 
						s.session_id = @session_id
						AND COALESCE(s.request_id, -1) = COALESCE(@request_id, -1)
						AND s.recursion = 1
					OPTION (KEEPFIXED PLAN);
				END TRY
				BEGIN CATCH;
					UPDATE s
					SET
						s.sql_text = 
							CASE ERROR_NUMBER() 
								WHEN 1222 THEN '<timeout_exceeded />'
								ELSE '<error message="' + ERROR_MESSAGE() + '" />'
							END
					FROM #sessions AS s
					WHERE 
						s.session_id = @session_id
						AND COALESCE(s.request_id, -1) = COALESCE(@request_id, -1)
						AND s.recursion = 1
					OPTION (KEEPFIXED PLAN);
				END CATCH;

				FETCH NEXT FROM sql_cursor
				INTO
					@session_id,
					@request_id,
					@sql_handle,
					@statement_start_offset,
					@statement_end_offset;
			END;

			--Return this to the default
			SET LOCK_TIMEOUT -1;

			CLOSE sql_cursor;
			DEALLOCATE sql_cursor;
		END;

		IF 
			@get_outer_command = 1 
			AND @recursion = 1
			AND @output_column_list LIKE '%|[sql_command|]%' ESCAPE '|'
		BEGIN;
			DECLARE @buffer_results TABLE
			(
				EventType VARCHAR(30),
				Parameters INT,
				EventInfo NVARCHAR(4000),
				start_time DATETIME,
				session_number INT IDENTITY(1,1) NOT NULL PRIMARY KEY
			);

			DECLARE buffer_cursor
			CURSOR LOCAL FAST_FORWARD
			FOR 
				SELECT 
					session_id,
					MAX(start_time) AS start_time
				FROM #sessions
				WHERE
					recursion = 1
				GROUP BY
					session_id
				ORDER BY
					session_id
				OPTION (KEEPFIXED PLAN);

			OPEN buffer_cursor;

			FETCH NEXT FROM buffer_cursor
			INTO 
				@session_id,
				@start_time;

			WHILE @@FETCH_STATUS = 0
			BEGIN;
				BEGIN TRY;
					--In SQL Server 2008, DBCC INPUTBUFFER will throw 
					--an exception if the session no longer exists
					INSERT @buffer_results
					(
						EventType,
						Parameters,
						EventInfo
					)
					EXEC sp_executesql
						N'DBCC INPUTBUFFER(@session_id) WITH NO_INFOMSGS;',
						N'@session_id SMALLINT',
						@session_id;

					UPDATE br
					SET
						br.start_time = @start_time
					FROM @buffer_results AS br
					WHERE
						br.session_number = 
						(
							SELECT MAX(br2.session_number)
							FROM @buffer_results br2
						);
				END TRY
				BEGIN CATCH
				END CATCH;

				FETCH NEXT FROM buffer_cursor
				INTO 
					@session_id,
					@start_time;
			END;

			UPDATE s
			SET
				sql_command = 
				(
					SELECT 
						REPLACE
						(
							REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
							REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
							REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
								CONVERT
								(
									NVARCHAR(MAX),
									N'--' + NCHAR(13) + NCHAR(10) + br.EventInfo + NCHAR(13) + NCHAR(10) + N'--' COLLATE Latin1_General_BIN2
								),
								NCHAR(31),N'?'),NCHAR(30),N'?'),NCHAR(29),N'?'),NCHAR(28),N'?'),NCHAR(27),N'?'),NCHAR(26),N'?'),NCHAR(25),N'?'),NCHAR(24),N'?'),NCHAR(23),N'?'),NCHAR(22),N'?'),
								NCHAR(21),N'?'),NCHAR(20),N'?'),NCHAR(19),N'?'),NCHAR(18),N'?'),NCHAR(17),N'?'),NCHAR(16),N'?'),NCHAR(15),N'?'),NCHAR(14),N'?'),NCHAR(12),N'?'),
								NCHAR(11),N'?'),NCHAR(8),N'?'),NCHAR(7),N'?'),NCHAR(6),N'?'),NCHAR(5),N'?'),NCHAR(4),N'?'),NCHAR(3),N'?'),NCHAR(2),N'?'),NCHAR(1),N'?'),
							NCHAR(0),
							N''
						) AS [processing-instruction(query)]
					FROM @buffer_results AS br
					WHERE 
						br.session_number = s.session_number
						AND br.start_time = s.start_time
						AND 
						(
							(
								s.start_time = s.last_request_start_time
								AND EXISTS
								(
									SELECT *
									FROM sys.dm_exec_requests r2
									WHERE
										r2.session_id = s.session_id
										AND r2.request_id = s.request_id
										AND r2.start_time = s.start_time
								)
							)
							OR 
							(
								COALESCE(s.request_id, 0) = 0
								AND EXISTS
								(
									SELECT *
									FROM sys.dm_exec_sessions s2
									WHERE
										s2.session_id = s.session_id
										AND s2.last_request_start_time = s.last_request_start_time
								)
							)
						)
					FOR XML PATH(''), TYPE
				)
			FROM #sessions AS s
			WHERE
				recursion = 1
			OPTION (KEEPFIXED PLAN);

			CLOSE buffer_cursor;
			DEALLOCATE buffer_cursor;
		END;

		IF 
			@get_plans >= 1 
			AND @recursion = 1
			AND @output_column_list LIKE '%|[query_plan|]%' ESCAPE '|'
		BEGIN;
			DECLARE plan_cursor
			CURSOR LOCAL FORWARD_ONLY DYNAMIC OPTIMISTIC
			FOR 
				SELECT 
					plan_handle,
					statement_start_offset,
					statement_end_offset
				FROM #sessions
				WHERE
					recursion = 1
			FOR UPDATE OF 
				query_plan
			OPTION (KEEPFIXED PLAN);

			OPEN plan_cursor;

			FETCH NEXT FROM plan_cursor
			INTO 
				@plan_handle,
				@statement_start_offset,
				@statement_end_offset;

			--Wait up to 5 ms for a query plan, then give up
			SET LOCK_TIMEOUT 5;

			WHILE @@FETCH_STATUS = 0
			BEGIN;
				BEGIN TRY;
					UPDATE s
					SET
						s.query_plan =
						(
							SELECT CONVERT(xml, query_plan)
							FROM sys.dm_exec_text_query_plan(@plan_handle, @statement_start_offset, @statement_end_offset)
							WHERE
								@get_plans = 1

							UNION ALL

							SELECT query_plan
							FROM sys.dm_exec_query_plan(@plan_handle)
							WHERE
								@get_plans = 2
						)
					FROM #sessions AS s
					WHERE 
						CURRENT OF plan_cursor
					OPTION (KEEPFIXED PLAN);
				END TRY
				BEGIN CATCH;
					UPDATE s
					SET
						s.query_plan = 
							CASE ERROR_NUMBER() 
								WHEN 1222 THEN '<timeout_exceeded />'
								ELSE '<error message="' + ERROR_MESSAGE() + '" />'
							END
					FROM #sessions AS s
					WHERE 
						CURRENT OF plan_cursor
					OPTION (KEEPFIXED PLAN);
				END CATCH;

				FETCH NEXT FROM plan_cursor
				INTO
					@plan_handle,
					@statement_start_offset,
					@statement_end_offset;
			END;

			--Return this to the default
			SET LOCK_TIMEOUT -1;

			CLOSE plan_cursor;
			DEALLOCATE plan_cursor;
		END;

		IF 
			@get_locks = 1 
			AND @recursion = 1
			AND @output_column_list LIKE '%|[locks|]%' ESCAPE '|'
		BEGIN;
			DECLARE @DB_NAME sysname;

			DECLARE locks_cursor
			CURSOR LOCAL FAST_FORWARD
			FOR 
				SELECT DISTINCT
					db_name
				FROM #locks
				WHERE
					EXISTS
					(
						SELECT *
						FROM #sessions AS s
						WHERE
							s.session_id = #locks.session_id
							AND recursion = 1
					)
					AND db_name <> '(null)'
				OPTION (KEEPFIXED PLAN);

			OPEN locks_cursor;

			FETCH NEXT  FROM locks_cursor
			INTO @DB_NAME;

			WHILE @@FETCH_STATUS = 0
			BEGIN;
				BEGIN TRY;
					SET @sql_n = CONVERT(NVARCHAR(MAX), '') +
						'UPDATE l ' +
						'SET ' +
							'object_name = ' +
								'REPLACE ' +
								'( ' +
									'REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE( ' +
									'REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE( ' +
									'REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE( ' +
										'o.name COLLATE Latin1_General_BIN2, ' +
										'NCHAR(31),N''?''),NCHAR(30),N''?''),NCHAR(29),N''?''),NCHAR(28),N''?''),NCHAR(27),N''?''),NCHAR(26),N''?''),NCHAR(25),N''?''),NCHAR(24),N''?''),NCHAR(23),N''?''),NCHAR(22),N''?''), ' +
										'NCHAR(21),N''?''),NCHAR(20),N''?''),NCHAR(19),N''?''),NCHAR(18),N''?''),NCHAR(17),N''?''),NCHAR(16),N''?''),NCHAR(15),N''?''),NCHAR(14),N''?''),NCHAR(12),N''?''), ' +
										'NCHAR(11),N''?''),NCHAR(8),N''?''),NCHAR(7),N''?''),NCHAR(6),N''?''),NCHAR(5),N''?''),NCHAR(4),N''?''),NCHAR(3),N''?''),NCHAR(2),N''?''),NCHAR(1),N''?''), ' +
									'NCHAR(0), ' +
									N''''' ' +
								'), ' +
							'index_name = ' +
								'REPLACE ' +
								'( ' +
									'REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE( ' +
									'REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE( ' +
									'REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE( ' +
										'i.name COLLATE Latin1_General_BIN2, ' +
										'NCHAR(31),N''?''),NCHAR(30),N''?''),NCHAR(29),N''?''),NCHAR(28),N''?''),NCHAR(27),N''?''),NCHAR(26),N''?''),NCHAR(25),N''?''),NCHAR(24),N''?''),NCHAR(23),N''?''),NCHAR(22),N''?''), ' +
										'NCHAR(21),N''?''),NCHAR(20),N''?''),NCHAR(19),N''?''),NCHAR(18),N''?''),NCHAR(17),N''?''),NCHAR(16),N''?''),NCHAR(15),N''?''),NCHAR(14),N''?''),NCHAR(12),N''?''), ' +
										'NCHAR(11),N''?''),NCHAR(8),N''?''),NCHAR(7),N''?''),NCHAR(6),N''?''),NCHAR(5),N''?''),NCHAR(4),N''?''),NCHAR(3),N''?''),NCHAR(2),N''?''),NCHAR(1),N''?''), ' +
									'NCHAR(0), ' +
									N''''' ' +
								'), ' +
							'schema_name = ' +
								'REPLACE ' +
								'( ' +
									'REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE( ' +
									'REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE( ' +
									'REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE( ' +
										's.name COLLATE Latin1_General_BIN2, ' +
										'NCHAR(31),N''?''),NCHAR(30),N''?''),NCHAR(29),N''?''),NCHAR(28),N''?''),NCHAR(27),N''?''),NCHAR(26),N''?''),NCHAR(25),N''?''),NCHAR(24),N''?''),NCHAR(23),N''?''),NCHAR(22),N''?''), ' +
										'NCHAR(21),N''?''),NCHAR(20),N''?''),NCHAR(19),N''?''),NCHAR(18),N''?''),NCHAR(17),N''?''),NCHAR(16),N''?''),NCHAR(15),N''?''),NCHAR(14),N''?''),NCHAR(12),N''?''), ' +
										'NCHAR(11),N''?''),NCHAR(8),N''?''),NCHAR(7),N''?''),NCHAR(6),N''?''),NCHAR(5),N''?''),NCHAR(4),N''?''),NCHAR(3),N''?''),NCHAR(2),N''?''),NCHAR(1),N''?''), ' +
									'NCHAR(0), ' +
									N''''' ' +
								'), ' +
							'principal_name = ' + 
								'REPLACE ' +
								'( ' +
									'REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE( ' +
									'REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE( ' +
									'REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE( ' +
										'dp.name COLLATE Latin1_General_BIN2, ' +
										'NCHAR(31),N''?''),NCHAR(30),N''?''),NCHAR(29),N''?''),NCHAR(28),N''?''),NCHAR(27),N''?''),NCHAR(26),N''?''),NCHAR(25),N''?''),NCHAR(24),N''?''),NCHAR(23),N''?''),NCHAR(22),N''?''), ' +
										'NCHAR(21),N''?''),NCHAR(20),N''?''),NCHAR(19),N''?''),NCHAR(18),N''?''),NCHAR(17),N''?''),NCHAR(16),N''?''),NCHAR(15),N''?''),NCHAR(14),N''?''),NCHAR(12),N''?''), ' +
										'NCHAR(11),N''?''),NCHAR(8),N''?''),NCHAR(7),N''?''),NCHAR(6),N''?''),NCHAR(5),N''?''),NCHAR(4),N''?''),NCHAR(3),N''?''),NCHAR(2),N''?''),NCHAR(1),N''?''), ' +
									'NCHAR(0), ' +
									N''''' ' +
								') ' +
						'FROM #locks AS l ' +
						'LEFT OUTER JOIN ' + QUOTENAME(@DB_NAME) + '.sys.allocation_units AS au ON ' +
							'au.allocation_unit_id = l.allocation_unit_id ' +
						'LEFT OUTER JOIN ' + QUOTENAME(@DB_NAME) + '.sys.partitions AS p ON ' +
							'p.hobt_id = ' +
								'COALESCE ' +
								'( ' +
									'l.hobt_id, ' +
									'CASE ' +
										'WHEN au.type IN (1, 3) THEN au.container_id ' +
										'ELSE NULL ' +
									'END ' +
								') ' +
						'LEFT OUTER JOIN ' + QUOTENAME(@DB_NAME) + '.sys.partitions AS p1 ON ' +
							'l.hobt_id IS NULL ' +
							'AND au.type = 2 ' +
							'AND p1.partition_id = au.container_id ' +
						'LEFT OUTER JOIN ' + QUOTENAME(@DB_NAME) + '.sys.objects AS o ON ' +
							'o.object_id = COALESCE(l.object_id, p.object_id, p1.object_id) ' +
						'LEFT OUTER JOIN ' + QUOTENAME(@DB_NAME) + '.sys.indexes AS i ON ' +
							'i.object_id = COALESCE(l.object_id, p.object_id, p1.object_id) ' +
							'AND i.index_id = COALESCE(l.index_id, p.index_id, p1.index_id) ' +
						'LEFT OUTER JOIN ' + QUOTENAME(@DB_NAME) + '.sys.schemas AS s ON ' +
							's.schema_id = COALESCE(l.schema_id, o.schema_id) ' +
						'LEFT OUTER JOIN ' + QUOTENAME(@DB_NAME) + '.sys.database_principals AS dp ON ' +
							'dp.principal_id = l.principal_id ' +
						'WHERE ' +
							'l.db_name = @DB_NAME ' +
						'OPTION (KEEPFIXED PLAN); ';
					
					EXEC sp_executesql
						@sql_n,
						N'@DB_NAME sysname',
						@DB_NAME;
				END TRY
				BEGIN CATCH;
					UPDATE #locks
					SET 
						object_name = '(db_inaccessible)'
					WHERE 
						db_name = @DB_NAME
					OPTION (KEEPFIXED PLAN);
				END CATCH;

				FETCH NEXT  FROM locks_cursor
				INTO @DB_NAME;
			END;

			CLOSE locks_cursor;
			DEALLOCATE locks_cursor;

			CREATE CLUSTERED INDEX IX_SRD ON #locks (session_id, request_id, db_name);

			UPDATE s
			SET 
				s.locks =
				(
					SELECT 
						REPLACE
						(
							REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
							REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
							REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
								CONVERT
								(
									NVARCHAR(MAX), 
									l1.db_name COLLATE Latin1_General_BIN2
								),
								NCHAR(31),N'?'),NCHAR(30),N'?'),NCHAR(29),N'?'),NCHAR(28),N'?'),NCHAR(27),N'?'),NCHAR(26),N'?'),NCHAR(25),N'?'),NCHAR(24),N'?'),NCHAR(23),N'?'),NCHAR(22),N'?'),
								NCHAR(21),N'?'),NCHAR(20),N'?'),NCHAR(19),N'?'),NCHAR(18),N'?'),NCHAR(17),N'?'),NCHAR(16),N'?'),NCHAR(15),N'?'),NCHAR(14),N'?'),NCHAR(12),N'?'),
								NCHAR(11),N'?'),NCHAR(8),N'?'),NCHAR(7),N'?'),NCHAR(6),N'?'),NCHAR(5),N'?'),NCHAR(4),N'?'),NCHAR(3),N'?'),NCHAR(2),N'?'),NCHAR(1),N'?'),
							NCHAR(0),
							N''
						) AS [Database/@name],
						(
							SELECT 
								l2.request_mode AS [Lock/@request_mode],
								l2.request_status AS [Lock/@request_status],
								COUNT(*) AS [Lock/@request_count]
							FROM #locks AS l2
							WHERE 
								l1.session_id = l2.session_id
								AND l1.request_id = l2.request_id
								AND l2.db_name = l1.db_name
								AND l2.resource_type = 'DATABASE'
							GROUP BY
								l2.request_mode,
								l2.request_status
							FOR XML PATH(''), TYPE
						) AS [Database/Locks],
						(
							SELECT
								COALESCE(l3.object_name, '(null)') AS [Object/@name],
								l3.schema_name AS [Object/@schema_name],
								(
									SELECT
										l4.resource_type AS [Lock/@resource_type],
										l4.page_type AS [Lock/@page_type],
										l4.index_name AS [Lock/@index_name],
										CASE 
											WHEN l4.object_name IS NULL THEN l4.schema_name
											ELSE NULL
										END AS [Lock/@schema_name],
										l4.principal_name AS [Lock/@principal_name],
										l4.resource_description AS [Lock/@resource_description],
										l4.request_mode AS [Lock/@request_mode],
										l4.request_status AS [Lock/@request_status],
										SUM(l4.request_count) AS [Lock/@request_count]
									FROM #locks AS l4
									WHERE 
										l4.session_id = l3.session_id
										AND l4.request_id = l3.request_id
										AND l3.db_name = l4.db_name
										AND COALESCE(l3.object_name, '(null)') = COALESCE(l4.object_name, '(null)')
										AND COALESCE(l3.schema_name, '') = COALESCE(l4.schema_name, '')
										AND l4.resource_type <> 'DATABASE'
									GROUP BY
										l4.resource_type,
										l4.page_type,
										l4.index_name,
										CASE 
											WHEN l4.object_name IS NULL THEN l4.schema_name
											ELSE NULL
										END,
										l4.principal_name,
										l4.resource_description,
										l4.request_mode,
										l4.request_status
									FOR XML PATH(''), TYPE
								) AS [Object/Locks]
							FROM #locks AS l3
							WHERE 
								l3.session_id = l1.session_id
								AND l3.request_id = l1.request_id
								AND l3.db_name = l1.db_name
								AND l3.resource_type <> 'DATABASE'
							GROUP BY 
								l3.session_id,
								l3.request_id,
								l3.db_name,
								COALESCE(l3.object_name, '(null)'),
								l3.schema_name
							FOR XML PATH(''), TYPE
						) AS [Database/Objects]
					FROM #locks AS l1
					WHERE
						l1.session_id = s.session_id
						AND l1.request_id = COALESCE(s.request_id, -1)
						AND 
						(
							(
								s.request_id IS NULL 
								AND l1.start_time = s.start_time
							)
							OR
							(
								s.request_id IS NOT NULL 
								AND l1.start_time = s.last_request_start_time
							)
						)
						AND s.recursion = 1
					GROUP BY 
						l1.session_id,
						l1.request_id,
						l1.db_name
					FOR XML PATH(''), TYPE
				)
			FROM #sessions s
			OPTION (KEEPFIXED PLAN);
		END;

		IF 
			@find_block_leaders = 1
			AND @recursion = 1
			AND @output_column_list LIKE '%|[blocked_session_count|]%' ESCAPE '|'
		BEGIN;
			WITH
			blockers AS
			(
				SELECT
					session_id,
					session_id AS top_level_session_id
				FROM #sessions
				WHERE
					recursion = 1

				UNION ALL

				SELECT
					s.session_id,
					b.top_level_session_id
				FROM blockers AS b
				JOIN #sessions AS s ON
					s.blocking_session_id = b.session_id
					AND s.recursion = 1
			)
			UPDATE s
			SET
				s.blocked_session_count = x.blocked_session_count
			FROM #sessions AS s
			JOIN
			(
				SELECT
					b.top_level_session_id AS session_id,
					COUNT(*) - 1 AS blocked_session_count
				FROM blockers AS b
				GROUP BY
					b.top_level_session_id
			) x ON
				s.session_id = x.session_id
			WHERE
				s.recursion = 1;
		END;
		
		IF 
			@delta_interval > 0 
			AND @recursion <> 1
		BEGIN;
			SET @recursion = 1;

			DECLARE @delay_time CHAR(12);
			SET @delay_time = CONVERT(VARCHAR, DATEADD(second, @delta_interval, 0), 114);
			WAITFOR DELAY @delay_time;

			GOTO REDO;
		END;
	END;

	SET @sql = 
		--Outer column list
		CONVERT
		(
			VARCHAR(MAX),
			CASE
				WHEN 
					@destination_table <> '' 
					AND @return_schema = 0 
						THEN 'INSERT ' + @destination_table + ' '
				ELSE ''
			END +
			'SELECT ' +
				@output_column_list + ' ' +
			CASE @return_schema
				WHEN 1 THEN 'INTO #session_schema '
				ELSE ''
			END
		--End outer column list
		) + 
		--Inner column list
		CONVERT
		(
			VARCHAR(MAX),
			'FROM ' +
			'( ' +
				'SELECT ' +
					'session_id, ' +
					--[dd hh:mm:ss.mss]
					CASE @format_output
						WHEN 1 THEN
							'CASE ' +
								'WHEN elapsed_time < 0 THEN ' +
									'RIGHT ' +
									'( ' +
										'''00'' + CONVERT(VARCHAR, (-1 * elapsed_time) / 86400), ' +
										'2 ' +
									') + ' +
										'RIGHT ' +
										'( ' +
											'CONVERT(VARCHAR, DATEADD(second, (-1 * elapsed_time), 0), 120), ' +
											'9 ' +
										') + ' +
										'''.000'' ' +
								'ELSE ' +
									'RIGHT ' +
									'( ' +
										'''00'' + CONVERT(VARCHAR, elapsed_time / 86400000), ' +
										'2 ' +
									') + ' +
										'RIGHT ' +
										'( ' +
											'CONVERT(VARCHAR, DATEADD(second, elapsed_time / 1000, 0), 120), ' +
											'9 ' +
										') + ' +
										'''.'' + ' + 
										'RIGHT(''000'' + CONVERT(VARCHAR, elapsed_time % 1000), 3) ' +
							'END AS [dd hh:mm:ss.mss], '
						ELSE
							''
					END +
					--[dd hh:mm:ss.mss (avg)] / avg_elapsed_time
					CASE @format_output
						WHEN 1 THEN 
							'RIGHT ' +
							'( ' +
								'''00'' + CONVERT(VARCHAR, avg_elapsed_time / 86400000), ' +
								'2 ' +
							') + ' +
								'RIGHT ' +
								'( ' +
									'CONVERT(VARCHAR, DATEADD(second, avg_elapsed_time / 1000, 0), 120), ' +
									'9 ' +
								') + ' +
								'''.'' + ' +
								'RIGHT(''000'' + CONVERT(VARCHAR, avg_elapsed_time % 1000), 3) AS [dd hh:mm:ss.mss (avg)], '
						ELSE
							'avg_elapsed_time, '
					END +
					--physical_io
					CASE @format_output
						WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, physical_io))) OVER() - LEN(CONVERT(VARCHAR, physical_io))) + LEFT(CONVERT(CHAR(22), CONVERT(MONEY, physical_io), 1), 19)) AS '
						WHEN 2 THEN 'CONVERT(VARCHAR, LEFT(CONVERT(CHAR(22), CONVERT(MONEY, physical_io), 1), 19)) AS '
						ELSE ''
					END + 'physical_io, ' +
					--reads
					CASE @format_output
						WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, reads))) OVER() - LEN(CONVERT(VARCHAR, reads))) + LEFT(CONVERT(CHAR(22), CONVERT(MONEY, reads), 1), 19)) AS '
						WHEN 2 THEN 'CONVERT(VARCHAR, LEFT(CONVERT(CHAR(22), CONVERT(MONEY, reads), 1), 19)) AS '
						ELSE ''
					END + 'reads, ' +
					--physical_reads
					CASE @format_output
						WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, physical_reads))) OVER() - LEN(CONVERT(VARCHAR, physical_reads))) + LEFT(CONVERT(CHAR(22), CONVERT(MONEY, physical_reads), 1), 19)) AS '
						WHEN 2 THEN 'CONVERT(VARCHAR, LEFT(CONVERT(CHAR(22), CONVERT(MONEY, physical_reads), 1), 19)) AS '
						ELSE ''
					END + 'physical_reads, ' +
					--writes
					CASE @format_output
						WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, writes))) OVER() - LEN(CONVERT(VARCHAR, writes))) + LEFT(CONVERT(CHAR(22), CONVERT(MONEY, writes), 1), 19)) AS '
						WHEN 2 THEN 'CONVERT(VARCHAR, LEFT(CONVERT(CHAR(22), CONVERT(MONEY, writes), 1), 19)) AS '
						ELSE ''
					END + 'writes, ' +
					--tempdb_allocations
					CASE @format_output
						WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, tempdb_allocations))) OVER() - LEN(CONVERT(VARCHAR, tempdb_allocations))) + LEFT(CONVERT(CHAR(22), CONVERT(MONEY, tempdb_allocations), 1), 19)) AS '
						WHEN 2 THEN 'CONVERT(VARCHAR, LEFT(CONVERT(CHAR(22), CONVERT(MONEY, tempdb_allocations), 1), 19)) AS '
						ELSE ''
					END + 'tempdb_allocations, ' +
					--tempdb_current
					CASE @format_output
						WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, tempdb_current))) OVER() - LEN(CONVERT(VARCHAR, tempdb_current))) + LEFT(CONVERT(CHAR(22), CONVERT(MONEY, tempdb_current), 1), 19)) AS '
						WHEN 2 THEN 'CONVERT(VARCHAR, LEFT(CONVERT(CHAR(22), CONVERT(MONEY, tempdb_current), 1), 19)) AS '
						ELSE ''
					END + 'tempdb_current, ' +
					--CPU
					CASE @format_output
						WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, CPU))) OVER() - LEN(CONVERT(VARCHAR, CPU))) + LEFT(CONVERT(CHAR(22), CONVERT(MONEY, CPU), 1), 19)) AS '
						WHEN 2 THEN 'CONVERT(VARCHAR, LEFT(CONVERT(CHAR(22), CONVERT(MONEY, CPU), 1), 19)) AS '
						ELSE ''
					END + 'CPU, ' +
					--context_switches
					CASE @format_output
						WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, context_switches))) OVER() - LEN(CONVERT(VARCHAR, context_switches))) + LEFT(CONVERT(CHAR(22), CONVERT(MONEY, context_switches), 1), 19)) AS '
						WHEN 2 THEN 'CONVERT(VARCHAR, LEFT(CONVERT(CHAR(22), CONVERT(MONEY, context_switches), 1), 19)) AS '
						ELSE ''
					END + 'context_switches, ' +
					--used_memory
					CASE @format_output
						WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, used_memory))) OVER() - LEN(CONVERT(VARCHAR, used_memory))) + LEFT(CONVERT(CHAR(22), CONVERT(MONEY, used_memory), 1), 19)) AS '
						WHEN 2 THEN 'CONVERT(VARCHAR, LEFT(CONVERT(CHAR(22), CONVERT(MONEY, used_memory), 1), 19)) AS '
						ELSE ''
					END + 'used_memory, ' +
					--physical_io_delta			
					'CASE ' +
						'WHEN ' +
							'first_request_start_time = last_request_start_time ' + 
							'AND num_events = 2 ' +
							'AND physical_io_delta >= 0 ' +
								'THEN ' +
								CASE @format_output
									WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, physical_io_delta))) OVER() - LEN(CONVERT(VARCHAR, physical_io_delta))) + LEFT(CONVERT(CHAR(22), CONVERT(MONEY, physical_io_delta), 1), 19)) ' 
									WHEN 2 THEN 'CONVERT(VARCHAR, LEFT(CONVERT(CHAR(22), CONVERT(MONEY, physical_io_delta), 1), 19)) '
									ELSE 'physical_io_delta '
								END +
						'ELSE NULL ' +
					'END AS physical_io_delta, ' +
					--reads_delta
					'CASE ' +
						'WHEN ' +
							'first_request_start_time = last_request_start_time ' + 
							'AND num_events = 2 ' +
							'AND reads_delta >= 0 ' +
								'THEN ' +
								CASE @format_output
									WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, reads_delta))) OVER() - LEN(CONVERT(VARCHAR, reads_delta))) + LEFT(CONVERT(CHAR(22), CONVERT(MONEY, reads_delta), 1), 19)) '
									WHEN 2 THEN 'CONVERT(VARCHAR, LEFT(CONVERT(CHAR(22), CONVERT(MONEY, reads_delta), 1), 19)) '
									ELSE 'reads_delta '
								END +
						'ELSE NULL ' +
					'END AS reads_delta, ' +
					--physical_reads_delta
					'CASE ' +
						'WHEN ' +
							'first_request_start_time = last_request_start_time ' + 
							'AND num_events = 2 ' +
							'AND physical_reads_delta >= 0 ' +
								'THEN ' +
								CASE @format_output
									WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, physical_reads_delta))) OVER() - LEN(CONVERT(VARCHAR, physical_reads_delta))) + LEFT(CONVERT(CHAR(22), CONVERT(MONEY, physical_reads_delta), 1), 19)) '
									WHEN 2 THEN 'CONVERT(VARCHAR, LEFT(CONVERT(CHAR(22), CONVERT(MONEY, physical_reads_delta), 1), 19)) '
									ELSE 'physical_reads_delta '
								END + 
						'ELSE NULL ' +
					'END AS physical_reads_delta, ' +
					--writes_delta
					'CASE ' +
						'WHEN ' +
							'first_request_start_time = last_request_start_time ' + 
							'AND num_events = 2 ' +
							'AND writes_delta >= 0 ' +
								'THEN ' +
								CASE @format_output
									WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, writes_delta))) OVER() - LEN(CONVERT(VARCHAR, writes_delta))) + LEFT(CONVERT(CHAR(22), CONVERT(MONEY, writes_delta), 1), 19)) '
									WHEN 2 THEN 'CONVERT(VARCHAR, LEFT(CONVERT(CHAR(22), CONVERT(MONEY, writes_delta), 1), 19)) '
									ELSE 'writes_delta '
								END + 
						'ELSE NULL ' +
					'END AS writes_delta, ' +
					--tempdb_allocations_delta
					'CASE ' +
						'WHEN ' +
							'first_request_start_time = last_request_start_time ' + 
							'AND num_events = 2 ' +
							'AND tempdb_allocations_delta >= 0 ' +
								'THEN ' +
								CASE @format_output
									WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, tempdb_allocations_delta))) OVER() - LEN(CONVERT(VARCHAR, tempdb_allocations_delta))) + LEFT(CONVERT(CHAR(22), CONVERT(MONEY, tempdb_allocations_delta), 1), 19)) '
									WHEN 2 THEN 'CONVERT(VARCHAR, LEFT(CONVERT(CHAR(22), CONVERT(MONEY, tempdb_allocations_delta), 1), 19)) '
									ELSE 'tempdb_allocations_delta '
								END + 
						'ELSE NULL ' +
					'END AS tempdb_allocations_delta, ' +
					--tempdb_current_delta
					--this is the only one that can (legitimately) go negative 
					'CASE ' +
						'WHEN ' +
							'first_request_start_time = last_request_start_time ' + 
							'AND num_events = 2 ' +
								'THEN ' +
								CASE @format_output
									WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, tempdb_current_delta))) OVER() - LEN(CONVERT(VARCHAR, tempdb_current_delta))) + LEFT(CONVERT(CHAR(22), CONVERT(MONEY, tempdb_current_delta), 1), 19)) '
									WHEN 2 THEN 'CONVERT(VARCHAR, LEFT(CONVERT(CHAR(22), CONVERT(MONEY, tempdb_current_delta), 1), 19)) '
									ELSE 'tempdb_current_delta '
								END + 
						'ELSE NULL ' +
					'END AS tempdb_current_delta, ' +
					--CPU_delta
					'CASE ' +
						'WHEN ' +
							'first_request_start_time = last_request_start_time ' + 
							'AND num_events = 2 ' +
							'AND CPU_delta >= 0 ' +
								'THEN ' +
								CASE @format_output
									WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, CPU_delta))) OVER() - LEN(CONVERT(VARCHAR, CPU_delta))) + LEFT(CONVERT(CHAR(22), CONVERT(MONEY, CPU_delta), 1), 19)) '
									WHEN 2 THEN 'CONVERT(VARCHAR, LEFT(CONVERT(CHAR(22), CONVERT(MONEY, CPU_delta), 1), 19)) '
									ELSE 'CPU_delta '
								END + 
						'ELSE NULL ' +
					'END AS CPU_delta, ' +
					--context_switches_delta
					'CASE ' +
						'WHEN ' +
							'first_request_start_time = last_request_start_time ' + 
							'AND num_events = 2 ' +
							'AND context_switches_delta >= 0 ' +
								'THEN ' +
								CASE @format_output
									WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, context_switches_delta))) OVER() - LEN(CONVERT(VARCHAR, context_switches_delta))) + LEFT(CONVERT(CHAR(22), CONVERT(MONEY, context_switches_delta), 1), 19)) '
									WHEN 2 THEN 'CONVERT(VARCHAR, LEFT(CONVERT(CHAR(22), CONVERT(MONEY, context_switches_delta), 1), 19)) '
									ELSE 'context_switches_delta '
								END + 
						'ELSE NULL ' +
					'END AS context_switches_delta, ' +
					--used_memory_delta
					'CASE ' +
						'WHEN ' +
							'first_request_start_time = last_request_start_time ' + 
							'AND num_events = 2 ' +
							'AND used_memory_delta >= 0 ' +
								'THEN ' +
								CASE @format_output
									WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, used_memory_delta))) OVER() - LEN(CONVERT(VARCHAR, used_memory_delta))) + LEFT(CONVERT(CHAR(22), CONVERT(MONEY, used_memory_delta), 1), 19)) '
									WHEN 2 THEN 'CONVERT(VARCHAR, LEFT(CONVERT(CHAR(22), CONVERT(MONEY, used_memory_delta), 1), 19)) '
									ELSE 'used_memory_delta '
								END + 
						'ELSE NULL ' +
					'END AS used_memory_delta, ' +
					--tasks
					CASE @format_output
						WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, tasks))) OVER() - LEN(CONVERT(VARCHAR, tasks))) + LEFT(CONVERT(CHAR(22), CONVERT(MONEY, tasks), 1), 19)) AS '
						WHEN 2 THEN 'CONVERT(VARCHAR, LEFT(CONVERT(CHAR(22), CONVERT(MONEY, tasks), 1), 19)) '
						ELSE ''
					END + 'tasks, ' +
					'status, ' +
					'wait_info, ' +
					'locks, ' +
					'tran_start_time, ' +
					'LEFT(tran_log_writes, LEN(tran_log_writes) - 1) AS tran_log_writes, ' +
					--open_tran_count
					CASE @format_output
						WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, open_tran_count))) OVER() - LEN(CONVERT(VARCHAR, open_tran_count))) + LEFT(CONVERT(CHAR(22), CONVERT(MONEY, open_tran_count), 1), 19)) AS '
						WHEN 2 THEN 'CONVERT(VARCHAR, LEFT(CONVERT(CHAR(22), CONVERT(MONEY, open_tran_count), 1), 19)) AS '
						ELSE ''
					END + 'open_tran_count, ' +
					--sql_command
					CASE @format_output 
						WHEN 0 THEN 'REPLACE(REPLACE(CONVERT(NVARCHAR(MAX), sql_command), ''<?query --''+CHAR(13)+CHAR(10), ''''), CHAR(13)+CHAR(10)+''--?>'', '''') AS '
						ELSE ''
					END + 'sql_command, ' +
					--sql_text
					CASE @format_output 
						WHEN 0 THEN 'REPLACE(REPLACE(CONVERT(NVARCHAR(MAX), sql_text), ''<?query --''+CHAR(13)+CHAR(10), ''''), CHAR(13)+CHAR(10)+''--?>'', '''') AS '
						ELSE ''
					END + 'sql_text, ' +
					'query_plan, ' +
					'blocking_session_id, ' +
					--blocked_session_count
					CASE @format_output
						WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, blocked_session_count))) OVER() - LEN(CONVERT(VARCHAR, blocked_session_count))) + LEFT(CONVERT(CHAR(22), CONVERT(MONEY, blocked_session_count), 1), 19)) AS '
						WHEN 2 THEN 'CONVERT(VARCHAR, LEFT(CONVERT(CHAR(22), CONVERT(MONEY, blocked_session_count), 1), 19)) AS '
						ELSE ''
					END + 'blocked_session_count, ' +
					--percent_complete
					CASE @format_output
						WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, CONVERT(MONEY, percent_complete), 2))) OVER() - LEN(CONVERT(VARCHAR, CONVERT(MONEY, percent_complete), 2))) + CONVERT(CHAR(22), CONVERT(MONEY, percent_complete), 2)) AS '
						WHEN 2 THEN 'CONVERT(VARCHAR, CONVERT(CHAR(22), CONVERT(MONEY, blocked_session_count), 1)) AS '
						ELSE ''
					END + 'percent_complete, ' +
					'host_name, ' +
					'login_name, ' +
					'database_name, ' +
					'program_name, ' +
					'additional_info, ' +
					'start_time, ' +
					'request_id, ' +
					'GETDATE() AS collection_time '
		--End inner column list
		) +
		--Derived table and INSERT specification
		CONVERT
		(
			VARCHAR(MAX),
				'FROM ' +
				'( ' +
					'SELECT TOP(2147483647) ' +
						'*, ' +
						'MAX(physical_io * recursion) OVER (PARTITION BY session_id, request_id) + ' +
							'MIN(physical_io * recursion) OVER (PARTITION BY session_id, request_id) AS physical_io_delta, ' +
						'MAX(reads * recursion) OVER (PARTITION BY session_id, request_id) + ' +
							'MIN(reads * recursion) OVER (PARTITION BY session_id, request_id) AS reads_delta, ' +
						'MAX(physical_reads * recursion) OVER (PARTITION BY session_id, request_id) + ' +
							'MIN(physical_reads * recursion) OVER (PARTITION BY session_id, request_id) AS physical_reads_delta, ' +
						'MAX(writes * recursion) OVER (PARTITION BY session_id, request_id) + ' +
							'MIN(writes * recursion) OVER (PARTITION BY session_id, request_id) AS writes_delta, ' +
						'MAX(tempdb_allocations * recursion) OVER (PARTITION BY session_id, request_id) + ' +
							'MIN(tempdb_allocations * recursion) OVER (PARTITION BY session_id, request_id) AS tempdb_allocations_delta, ' +
						'MAX(tempdb_current * recursion) OVER (PARTITION BY session_id, request_id) + ' +
							'MIN(tempdb_current * recursion) OVER (PARTITION BY session_id, request_id) AS tempdb_current_delta, ' +
						'MAX(CPU * recursion) OVER (PARTITION BY session_id, request_id) + ' +
							'MIN(CPU * recursion) OVER (PARTITION BY session_id, request_id) AS CPU_delta, ' +
						'MAX(context_switches * recursion) OVER (PARTITION BY session_id, request_id) + ' +
							'MIN(context_switches * recursion) OVER (PARTITION BY session_id, request_id) AS context_switches_delta, ' +
						'MAX(used_memory * recursion) OVER (PARTITION BY session_id, request_id) + ' +
							'MIN(used_memory * recursion) OVER (PARTITION BY session_id, request_id) AS used_memory_delta, ' +
						'MIN(last_request_start_time) OVER (PARTITION BY session_id, request_id) AS first_request_start_time, ' +
						'COUNT(*) OVER (PARTITION BY session_id, request_id) AS num_events ' +
					'FROM #sessions AS s1 ' +
					CASE 
						WHEN @sort_order = '' THEN ''
						ELSE
							'ORDER BY ' +
								@sort_order
					END +
				') AS s ' +
				'WHERE ' +
					's.recursion = 1 ' +
			') x ' +
			'OPTION (KEEPFIXED PLAN); ' +
			'' +
			CASE @return_schema
				WHEN 1 THEN
					'SET @schema = ' +
						'''CREATE TABLE <table_name> ( '' + ' +
							'STUFF ' +
							'( ' +
								'( ' +
									'SELECT ' +
										''','' + ' +
										'QUOTENAME(COLUMN_NAME) + '' '' + ' +
										'DATA_TYPE + ' + 
										'CASE ' +
											'WHEN DATA_TYPE LIKE ''%char'' THEN ''('' + COALESCE(NULLIF(CONVERT(VARCHAR, CHARACTER_MAXIMUM_LENGTH), ''-1''), ''max'') + '') '' ' +
											'ELSE '' '' ' +
										'END + ' +
										'CASE IS_NULLABLE ' +
											'WHEN ''NO'' THEN ''NOT '' ' +
											'ELSE '''' ' +
										'END + ''NULL'' AS [text()] ' +
									'FROM tempdb.INFORMATION_SCHEMA.COLUMNS ' +
									'WHERE ' +
										'TABLE_NAME = (SELECT name FROM tempdb.sys.objects WHERE object_id = OBJECT_ID(''tempdb..#session_schema'')) ' +
										'ORDER BY ' +
											'ORDINAL_POSITION ' +
									'FOR XML PATH('''') ' +
								'), + ' +
								'1, ' +
								'1, ' +
								''''' ' +
							') + ' +
						''')''; ' 
				ELSE ''
			END
		--End derived table and INSERT specification
		);

	SET @sql_n = CONVERT(NVARCHAR(MAX), @sql);

	EXEC sp_executesql
		@sql_n,
		N'@schema VARCHAR(MAX) OUTPUT',
		@schema OUTPUT;
END;

GO
